<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>KR云图库Day01</title>
    <link href="/2025/07/10/%E4%BA%91%E5%9B%BE%E5%BA%9301/"/>
    <url>/2025/07/10/%E4%BA%91%E5%9B%BE%E5%BA%9301/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>最后更新于：2025/7/10 PM</p>          </div><h1 id="前言">前言</h1><p>基于之前一直观看视频学习，没有记录笔记感觉并没有真正学到什么，有点自欺欺人的感觉</p><p>再加上本人比较迷恋游戏，不知不觉浪费的半个多月的时间</p><p>所以从今天开始根据文字教程依次学习，把自己在项目中遇到的问题解决收集一些陌生的概念和语法</p><p>废话少说现在开始。。。。。</p><h1 id="项目介绍">项目介绍</h1><h2 id="概述">概述</h2><p>在开始之前，我们需要对我们要做的项目有一个基本的认识，清楚自己在做什么，做这个项目有什么意义？？</p><blockquote><p>我们要做的项目是一个云图库项目，就类似于网上的图片网站</p></blockquote><p>教程：参考<ahref="https://www.codefather.cn/course/1864210260732116994/section/1864990875352473601?type=#heading-0">鱼皮图库项目</a></p><p>部分模块介绍，整个项目围绕以下几点进行实现</p><p>1）用户模块：登录注册</p><p>2）图片模块：上传图片，管理图片，查询图片，管理员审核图片</p><p>3）空间模块：个人空间，团队空间</p><h2id="核心业务流程可以帮助我们下一步该做什么本人太懒不太爱画这个hh但是一定要多画">核心业务流程(可以帮助我们下一步该做什么，本人太懒不太爱画这个hh，但是一定要多画)</h2><p>在线工具：<a href="https://draw.io">draw.io</a></p><h3 id="一图库平台流程">一、图库平台流程</h3><figure><img src="/img/pictureLibrary/user_modal.png" alt="user_modal" /><figcaption aria-hidden="true">user_modal</figcaption></figure><h3 id="二加入用户私有图库">二、加入用户私有图库</h3><figure><img src="/img/pictureLibrary/private_user_modal.png"alt="private_user_modal" /><figcaption aria-hidden="true">private_user_modal</figcaption></figure><h3 id="三加入团队空间">三、加入团队空间</h3><figure><img src="/img/pictureLibrary/team_modal.png" alt="team_modal" /><figcaption aria-hidden="true">team_modal</figcaption></figure><h2 id="项目功能介绍">项目功能介绍</h2><h3 id="阶段一">阶段一</h3><p>用户模块</p><ul><li>登录</li><li>注册</li><li>注销</li><li>AOP权限控制</li><li>用户管理</li></ul><p>图片模块</p><ul><li>上传图片</li><li>编辑图片</li><li>图片管理</li><li>关键词搜索图片</li><li>下载图片</li><li>审核用户上传的图片</li><li>导入图片<ul><li>URL上传</li><li>本地上传</li></ul></li><li>优化<ul><li>缓存优化查询</li><li>上传优化</li><li>加载优化</li><li>存储优化</li></ul></li></ul><h3 id="阶段二">阶段二</h3><p>用户私有空间</p><ul><li>空间管理(管理员)</li><li>用户开通私有空间</li><li>权限控制</li><li>空间级别</li><li>用户空间、管理员全空间分析</li></ul><p>图片模块</p><ul><li>图片搜索<ul><li>字段搜索</li><li>以图搜图</li><li>颜色搜索</li></ul></li><li>图片分享<ul><li>二维码分享</li><li>链接分享</li></ul></li><li>批量管理<ul><li>重命名</li><li>修改信息</li></ul></li><li>图片编辑<ul><li>AI编辑</li><li>基础编辑</li></ul></li></ul><h3 id="阶段三">阶段三</h3><p>空间模块</p><ul><li>创建团队空间</li><li>空间成员管理</li><li>成员邀请</li><li>成员权限控制</li></ul><p>图片模块</p><ul><li>协同编辑</li></ul><h2 id="技术选型">技术选型</h2><p>前端</p><ul><li>Vue3 + AntDesign Vue</li><li>Pinia 全局状态管理</li><li>格式化工具：Prettier、ESlint、TS</li><li>OpenAPI</li><li>axios</li></ul><p>后端</p><ul><li>SpringBoot</li><li>MySQL + MyBatis + MP</li><li>Redis + Caffeine 缓存</li><li>Jsoup数据抓取</li><li>COS + 数据万象</li><li>WebSocket</li><li>编程式事务操作</li></ul><h1 id="项目初始化">项目初始化</h1><h2 id="后端项目初始化">后端项目初始化</h2><h3 id="环境配置">环境配置</h3><p>1）JDK17</p><p>2）MySQL8</p><h3 id="idea配置">IDEA配置</h3><h4 id="一引入基础依赖">一、引入基础依赖</h4><ol type="1"><li>Spring Web：提供Web服务，通过localhost:端口请求接口</li><li>Lombok：<span class="citation" data-cites="Data">@Data</span>注解提供getter setter</li><li>Mybatis Framework：mb 基础操作数据库服务</li><li>提供IDEA里连接Mysql的接口</li></ol><figure><img src="/img/pictureLibrary/1.png" alt="1" /><figcaption aria-hidden="true">1</figcaption></figure><h4 id="二启动">二、启动！</h4><figure><img src="/img/pictureLibrary/image-20250710143603834.png"alt="image-20250710143603834" /><figcaption aria-hidden="true">image-20250710143603834</figcaption></figure><p>报错了？别慌，观察错误信息说我们并没有对数据库进行相关的配置，对咯、application.yml都没改跑个毛</p><h4 id="三添加配置项">三、添加配置项</h4><p><code>application.yml</code></p><p>初次写建议自己写一遍就当练习了</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8082</span> <span class="hljs-comment"># 服务端口</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/api</span> <span class="hljs-comment">#设置上下文路径，之后访问后端接口需要带/api</span><br><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">kr-picture-backend</span><br><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span> <br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/kr_picture</span> <br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">intmain()</span><br><br></code></pre></td></tr></table></figure><p>datasource的信息除了<code>driver-class-name</code>是写死的，其余的都可以参照图片信息</p><figure><img src="/img/pictureLibrary/image-20250710144516360.png"alt="image-20250710144516360" /><figcaption aria-hidden="true">image-20250710144516360</figcaption></figure><h4 id="四整合依赖">四、整合依赖</h4><p>1）Mybatis-plus</p><p>引入MP 需要移除Mybatis 相关依赖以免冲突</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>在启动类中，添加@MapperScan注解同时指定mapper包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(&quot;com.kroot.krpicturebackend.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KrPictureBackendApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(KrPictureBackendApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>application.yml中添加MP相关配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>  <span class="hljs-comment"># 执行sql语句时，字段下划线转驼峰</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 仅在开发环境开启日志</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">logic-delete-field:</span> <span class="hljs-string">isDelete</span> <span class="hljs-comment"># 全局逻辑删除的实体字段名</span><br>      <span class="hljs-attr">logic-delete-value:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 逻辑已删除值（默认为 1）</span><br>      <span class="hljs-attr">logic-not-delete-value:</span> <span class="hljs-number">0</span> <span class="hljs-comment"># 逻辑未删除值（默认为 0）</span><br><br></code></pre></td></tr></table></figure><p>2）Hutool</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.26<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3）Knife4j</p><p><ahref="https://doc.xiaominfo.com/docs/quick-start#spring-boot-2">官方文档，依赖引入以及yml配置</a></p><p>Swagger升级版，后端API文档</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-openapi2-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>yml配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 接口文档配置</span><br><span class="hljs-attr">knife4j:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">openapi:</span><br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;接口文档&quot;</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">1.0</span><br>    <span class="hljs-attr">group:</span><br>      <span class="hljs-attr">default:</span><br>        <span class="hljs-attr">api-rule:</span> <span class="hljs-string">package</span><br>        <span class="hljs-attr">api-rule-resources:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">com.kroot.krpicturebackend.controller</span><br><br></code></pre></td></tr></table></figure><p>编写controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/health&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">health</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Nice try&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试</p><p>编写controller包，同时包下创建<code>MainController</code>测试接口文档，启动项目访问<ahref="http://localhost:8082/api/doc.html#/home">http://localhost:8082/api/doc.html#/home</a>，同时发现刚才我们添加的Controller下的health接口也生效了</p><figure><img src="/img/pictureLibrary/image-20250710150522714.png"alt="image-20250710150522714" /><figcaption aria-hidden="true">image-20250710150522714</figcaption></figure><p>4）AOP</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4id="五通用代码块多练写熟练了再copy">五、通用代码块（多练，写熟练了再Copy）</h4><p>异常通用基础代码</p><p><strong>1、自定义异常</strong></p><p>✨技巧404作为HTTP错误码意思是Not Found，那我们定义状态码为40400</p><p>其余的状态码类似，针对于错误码一个code对应一条消息，我们将其定义为枚举，同时设置@Getter方便获取字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kroot.krpicturebackend.exception;<br><br><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ErrorCode</span> &#123;<br><br>    SUCCESS(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;ok&quot;</span>),<br>    PARAMS_ERROR(<span class="hljs-number">40000</span>, <span class="hljs-string">&quot;请求参数错误&quot;</span>),<br>    NOT_LOGIN_ERROR(<span class="hljs-number">40100</span>, <span class="hljs-string">&quot;未登录&quot;</span>),<br>    NO_AUTH_ERROR(<span class="hljs-number">40101</span>, <span class="hljs-string">&quot;无权限&quot;</span>),<br>    NOT_FOUND_ERROR(<span class="hljs-number">40400</span>, <span class="hljs-string">&quot;请求数据不存在&quot;</span>),<br>    FORBIDDEN_ERROR(<span class="hljs-number">40300</span>, <span class="hljs-string">&quot;禁止访问&quot;</span>),<br>    SYSTEM_ERROR(<span class="hljs-number">50000</span>, <span class="hljs-string">&quot;系统内部异常&quot;</span>),<br>    OPERATION_ERROR(<span class="hljs-number">50001</span>, <span class="hljs-string">&quot;操作失败&quot;</span>);<br><br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> code;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String message;<br><br>    ErrorCode(<span class="hljs-type">int</span> code, String message) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>在项目中我们往往不直接抛出<code>RuntimeException</code>，需要自定义业务异常类<code>BusinessException</code>同时继承<code>RuntimeException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kroot.krpicturebackend.exception;<br><br><br><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BusinessException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span>&#123;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BusinessException</span><span class="hljs-params">(<span class="hljs-type">int</span> code,String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BusinessException</span><span class="hljs-params">(ErrorCode errorCode)</span> &#123;<br>        <span class="hljs-built_in">super</span>(errorCode.getMessage());<br>        <span class="hljs-built_in">this</span>.code = errorCode.getCode();<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BusinessException</span><span class="hljs-params">(ErrorCode errorCode,String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>        <span class="hljs-built_in">this</span>.code = errorCode.getCode();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>为了不直接抛出异常，可以设置断言、通过某些条件判断是否跑出异常，我们可以封装一个Utils，方法定义为static方法方便<code>ThrowUtils.throwIf</code>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kroot.krpicturebackend.exception;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThrowUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">throwIf</span><span class="hljs-params">(<span class="hljs-type">boolean</span> condition, RuntimeException runtimeException)</span> &#123;<br>        <span class="hljs-keyword">if</span>(condition) &#123;<br>            <span class="hljs-keyword">throw</span> runtimeException;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">throwIf</span><span class="hljs-params">(<span class="hljs-type">boolean</span> condition, ErrorCode errorCode)</span> &#123;<br>        <span class="hljs-keyword">if</span>(condition) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(errorCode.getCode(), errorCode.getMessage());<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">throwIf</span><span class="hljs-params">(<span class="hljs-type">boolean</span> condition, ErrorCode errorCode,String message)</span> &#123;<br>        <span class="hljs-keyword">if</span>(condition) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(errorCode.getCode(), message);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>2、响应包装类</strong></p><p>正常情况下，后端需要返回一个统一的格式，方便前端对数据进行响应的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kroot.krpicturebackend.common;<br><br><span class="hljs-keyword">import</span> com.kroot.krpicturebackend.exception.ErrorCode;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseResponse</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br><br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseResponse</span><span class="hljs-params">(<span class="hljs-type">int</span> code, T data, String message)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.data = data;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseResponse</span><span class="hljs-params">(<span class="hljs-type">int</span> code, T data)</span> &#123;<br>        <span class="hljs-built_in">this</span>(code,data,<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseResponse</span><span class="hljs-params">(ErrorCode errorCode)</span> &#123;<br>        <span class="hljs-built_in">this</span>(errorCode.getCode(),<span class="hljs-literal">null</span>,errorCode.getMessage());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>但是现在每一次返回值都需要<code>new BaseResponse</code>，我们可以自定义一个工具类，针对于成功与失败的情况进行new响应包装类的封装</p><p>针对于泛型方法，如果参数中涉及泛型，那么需要在方法前添加<code>&lt;T&gt;</code>来表明是个泛型方法</p><p>在不使用泛型参数的时候返回值可以使用？代表不需要知道确切类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kroot.krpicturebackend.common;<br><br><span class="hljs-keyword">import</span> com.kroot.krpicturebackend.exception.ErrorCode;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; BaseResponse&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">(T data)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(<span class="hljs-number">0</span>,data,<span class="hljs-string">&quot;ok&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BaseResponse&lt;?&gt; error(ErrorCode errorCode) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(errorCode.getCode(),<span class="hljs-literal">null</span>,errorCode.getMessage());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BaseResponse&lt;?&gt; error(ErrorCode errorCode,String message) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(errorCode.getCode(),<span class="hljs-literal">null</span>,message);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>3、全局异常处理器</strong></p><p>为了防止出现一些意料之外的异常，可以封装全局异常，针对于RuntimeException和业务异常分别进行捕获</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br>    <span class="hljs-meta">@ExceptionHandler(BusinessException.class)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;?&gt; businessExceptionHandler(BusinessException e) &#123;<br>        log.error(<span class="hljs-string">&quot;BusinessException&quot;</span>,e);<br>        <span class="hljs-keyword">return</span> ResultUtils.error(e.getCode(),e.getMessage());<br>    &#125;<br><br><br>    <span class="hljs-meta">@ExceptionHandler(RuntimeException.class)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;?&gt; runtimeExceptionHandler(RuntimeException e) &#123;<br>        log.error(<span class="hljs-string">&quot;RuntimeException&quot;</span>,e);<br>        <span class="hljs-keyword">return</span> ResultUtils.error(ErrorCode.SYSTEM_ERROR,<span class="hljs-string">&quot;系统错误&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>4、请求封装类</strong></p><p>针对于某些公共的请求，参数一致，我们可以把它单独提取出来</p><p>分页请求包装类封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kroot.krpicturebackend.common;<br><br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">6981652838124494846L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">pageSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-comment">//排序字段</span><br>    <span class="hljs-keyword">private</span> String sortField;<br><br>    <span class="hljs-comment">//升序还是降序</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">sortOrder</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;descend&quot;</span>;<br>    <br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><p>删除请求封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kroot.krpicturebackend.common;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeleteRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">6018983994171083590L</span>;<br>    <span class="hljs-keyword">private</span> Long id;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>5、全局配置跨域</strong></p><p>什么是跨域问题？</p><blockquote><p>跨域指的是浏览器中访问URL和后端URL或者是端口不一致情况，例如后端运行localhost:8080，前端localhost:5347，前端请求后端就会触发跨域问题</p></blockquote><p>新建config包下创建CorsConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CorsConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>        <span class="hljs-comment">// 覆盖所有请求</span><br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                <span class="hljs-comment">// 允许发送 Cookie</span><br>                .allowCredentials(<span class="hljs-literal">true</span>)<br>                <span class="hljs-comment">// 放行哪些域名（必须用 patterns，否则 * 会和 allowCredentials 冲突）</span><br>                .allowedOriginPatterns(<span class="hljs-string">&quot;*&quot;</span>)<br>                .allowedMethods(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;PUT&quot;</span>, <span class="hljs-string">&quot;DELETE&quot;</span>, <span class="hljs-string">&quot;OPTIONS&quot;</span>)<br>                .allowedHeaders(<span class="hljs-string">&quot;*&quot;</span>)<br>                .exposedHeaders(<span class="hljs-string">&quot;*&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>后端配置到此结束，启动项目检查是否生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainController</span> &#123;<br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;String&gt; <span class="hljs-title function_">health</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> ResultUtils.success(<span class="hljs-string">&quot;Nice Try&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里有一个疑问，为什么当我们使用@Controller注解会发生报错？</p><ul><li>想要返回对象本身，<span class="citation"data-cites="RestController会将返回值序列化为HTTP响应体">@RestController会将返回值序列化为HTTP响应体</span>(JSON)</li><li>或者使用@Controller + <span class="citation"data-cites="ResponseBody组合">@ResponseBody组合</span></li><li><span class="citation"data-cites="Controller返回的是HTML界面">@Controller返回的是HTML界面</span>，Restful规范要求服务器返回结构化数据(JSON)</li></ul><p>返回结果，和我们定义的一样，说明没毛病</p><figure><img src="/img/pictureLibrary/image-20250710161709041.png"alt="image-20250710161709041" /><figcaption aria-hidden="true">image-20250710161709041</figcaption></figure><h2 id="前端项目初始化">前端项目初始化</h2><h3 id="环境要求">环境要求</h3><p>Nodejs &gt;= 18</p><p>包管理工具yarn + npm(2选1)</p><h3 id="创建项目">创建项目</h3><p>初始化 vue3.12.1 版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm create vue@3.12.1<br></code></pre></td></tr></table></figure><p>依次按照下面步骤做</p><figure><img src="/img/pictureLibrary/image-20250710162312780.png"alt="image-20250710162312780" /><figcaption aria-hidden="true">image-20250710162312780</figcaption></figure><p>启动WebStorm打开项目，终端执行<code>npm install</code>安装依赖，接着运行package.json中的dev，或者输入指令<code>npm run dev</code>，看到这个界面运行成功</p><figure><img src="/img/pictureLibrary/image-20250710162929753.png"alt="image-20250710162929753" /><figcaption aria-hidden="true">image-20250710162929753</figcaption></figure><p>配置美化工具Prettier</p><figure><img src="/img/pictureLibrary/image-20250710163040790.png"alt="image-20250710163040790" /><figcaption aria-hidden="true">image-20250710163040790</figcaption></figure><p>配置好后可以项目中右键可以格式化</p><figure><img src="/img/pictureLibrary/image-20250710163222233.png"alt="image-20250710163222233" /><figcaption aria-hidden="true">image-20250710163222233</figcaption></figure><p>关闭Eslint，防止编译错误</p><figure><img src="/img/pictureLibrary/image-20250710163343894.png"alt="image-20250710163343894" /><figcaption aria-hidden="true">image-20250710163343894</figcaption></figure><h4 id="引入组件库ant-design-vue">引入组件库(Ant Design Vue)</h4><p><a href="https://antdv.com/docs/vue/getting-started">GettingStarted</a></p><figure><img src="/img/pictureLibrary/image-20250710163644757.png"alt="image-20250710163644757" /><figcaption aria-hidden="true">image-20250710163644757</figcaption></figure><p>验证是否引入成功，可以看到按钮已经引入成功了</p><figure><img src="/img/pictureLibrary/image-20250710163955618.png"alt="image-20250710163955618" /><figcaption aria-hidden="true">image-20250710163955618</figcaption></figure><p>定义开发规范</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;xxPage&quot;&gt;<br><br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br><br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>#xxPage &#123;<br>&#125;<br><br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p>修改基础标签信息</p><p>更改根目录下的index.html，同时替换/public下的favicon.ico，修改后效果如下</p><figure><img src="/img/pictureLibrary/image-20250710164533893.png"alt="image-20250710164533893" /><figcaption aria-hidden="true">image-20250710164533893</figcaption></figure><h4 id="全局通用布局引入">全局通用布局引入</h4><p>创建layout目录，新建布局<code>BasicLayout.vue</code>，同时在Vue中引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup lang=&quot;ts&quot;&gt;<br>import BasicLayout from &#x27;@/layout/BasicLayout.vue&#x27;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>    &lt;BasicLayout /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p>BasicLayout 布局参考 <ahref="https://antdv.com/components/layout">Ant Design vue layout</a></p><figure><img src="/img/pictureLibrary/image-20250710165305691.png"alt="image-20250710165305691" /><figcaption aria-hidden="true">image-20250710165305691</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;basicLayOut&quot;&gt;<br>    &lt;a-layout&gt;<br>      &lt;a-layout-header&gt;Header&lt;/a-layout-header&gt;<br>      &lt;a-layout-content&gt;Content&lt;/a-layout-content&gt;<br>      &lt;a-layout-footer&gt;Footer&lt;/a-layout-footer&gt;<br>    &lt;/a-layout&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br><br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>#basicLayOut &#123;<br><br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><h4 id="全局底部栏">全局底部栏</h4><blockquote><p>底部主要显示版权信息，需要设置fixed样式，使其固定在底部</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;a-layout-footer class=&quot;footer&quot;&gt;<br>    &lt;a href=&quot;https://github.com&quot; target=&quot;_blank&quot;&gt;联系KotRin&lt;/a&gt;<br>&lt;/a-layout-footer&gt;<br></code></pre></td></tr></table></figure><p>样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#basicLayOut</span> <span class="hljs-selector-class">.footer</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#efefef</span>;<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="内容部分根据vue-router动态展示">内容部分根据VueRouter动态展示</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;a-layout-content&gt;<br>     &lt;router-view /&gt;<br>&lt;/a-layout-content&gt;<br></code></pre></td></tr></table></figure><p>样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#basicLayOut</span> <span class="hljs-selector-class">.content</span>&#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right,<span class="hljs-number">#fefefe</span>,<span class="hljs-number">#fff</span>);  //背景色设置为渐变色<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">30px</span>;   //为了防止被<span class="hljs-selector-tag">footer</span>遮挡<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;  //使内容靠中<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="全局顶部烂">全局顶部烂</h4><p>参考<a href="https://antdv.com/components/menu#Menu">Ant DesignMenu</a></p><figure><img src="/img/pictureLibrary/image-20250710171353472.png"alt="image-20250710171353472" /><figcaption aria-hidden="true">image-20250710171353472</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;a-layout-header&gt;<br>    &lt;GlobalHeader /&gt;<br>&lt;/a-layout-header&gt;<br></code></pre></td></tr></table></figure><p>引入全局顶部栏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">GlobalHeader</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/GlobalHeader.vue&#x27;</span><br></code></pre></td></tr></table></figure><figure><img src="/img/pictureLibrary/image-20250710171555420.png"alt="image-20250710171555420" /><figcaption aria-hidden="true">image-20250710171555420</figcaption></figure><p>顶部栏ant design 定义的默认padding-inline: 50px</p><p>样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#basicLayOut</span> <span class="hljs-selector-class">.header</span> &#123;<br>  <span class="hljs-attribute">padding-inline</span>: <span class="hljs-number">20px</span>; //等于<span class="hljs-attribute">padding-left</span>:<span class="hljs-number">20px</span>;<span class="hljs-attribute">padding-right</span>:<span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">16px</span>; <br>  <span class="hljs-attribute">background</span>: white;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>按照需求修改默认菜单</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; h, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MailOutlined</span>, <span class="hljs-title class_">HomeOutlined</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons-vue&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MenuProps</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ant-design-vue&#x27;</span>;<br><span class="hljs-keyword">const</span> current = ref&lt;string[]&gt;([<span class="hljs-string">&#x27;mail&#x27;</span>]);<br><span class="hljs-keyword">const</span> items = ref&lt;<span class="hljs-title class_">MenuProps</span>[<span class="hljs-string">&#x27;items&#x27;</span>]&gt;([<br>  &#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">icon</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">HomeOutlined</span>),<br>    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;主页&#x27;</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;主页&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;关于&#x27;</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;关于&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;/blog&#x27;</span>,<br>    <span class="hljs-attr">label</span>: <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;a&#x27;</span>, &#123; <span class="hljs-attr">href</span>: <span class="hljs-string">&#x27;https://korinall.github.io/&#x27;</span>, <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;_blank&#x27;</span> &#125;, <span class="hljs-string">&#x27;作者博客&#x27;</span>),<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;作者BLOG&#x27;</span>,<br><br>  &#125;,<br>]);<br></code></pre></td></tr></table></figure><p>效果如下</p><figure><img src="/img/pictureLibrary/image-20250710173327570.png"alt="image-20250710173327570" /><figcaption aria-hidden="true">image-20250710173327570</figcaption></figure><p>h()是Vue中的虚拟DOM函数，用法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">h(<span class="hljs-string">&#x27;a&#x27;</span>, &#123; href: <span class="hljs-string">&#x27;https://korinall.github.io/&#x27;</span>, target: <span class="hljs-string">&#x27;_blank&#x27;</span> &#125;, <span class="hljs-string">&#x27;作者博客&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lisp">h(&#x27;div&#x27;,&#123;class: &#x27;container&#x27;&#125;,[<br>h(&#x27;h1&#x27;,标题),<br>h(&#x27;p&#x27;,&#x27;内容&#x27;)<br>])<br></code></pre></td></tr></table></figure><p>优化导航栏</p><p>除此之外，我需要在左侧添加Logo 标题，点击后可以跳回主页</p><p>右侧添加登录按钮</p><p>这里分为三部分，建议使用<ahref="https://antdv.com/components/grid/#Grid">Ant DesignGrid</a>，左右两侧自定义width大小，中间自适应</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div id=&quot;globalHeader&quot;&gt;<br>  &lt;a-row&gt;<br>    &lt;a-col flex=&quot;200px&quot;&gt;<br>      //RouterLink组件支持超链接跳转，不刷新界面<br>      &lt;RouterLink to=&quot;/&quot;&gt;<br>        &lt;div class=&quot;title-bar&quot;&gt;<br>          &lt;img class=&quot;logo&quot; src=&quot;../assets/logo.png&quot; alt=&quot;logo&quot; /&gt;<br>          &lt;div class=&quot;title&quot;&gt;KR智能云图库&lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/RouterLink&gt;<br>    &lt;/a-col&gt;<br>    &lt;a-col flex=&quot;auto&quot;&gt;<br>      &lt;a-menu v-model:selectedKeys=&quot;current&quot; mode=&quot;horizontal&quot; :items=&quot;items&quot; /&gt;<br>    &lt;/a-col&gt;<br>    &lt;a-col flex=&quot;180px&quot;&gt;<br>      &lt;a-button type=&quot;primary&quot; href=&quot;/user/login&quot;&gt;登录&lt;/a-button&gt;<br>    &lt;/a-col&gt;<br>  &lt;/a-row&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>效果如下</p><figure><img src="/img/pictureLibrary/image-20250710180019627.png"alt="image-20250710180019627" /><figcaption aria-hidden="true">image-20250710180019627</figcaption></figure><h4 id="路由">路由</h4><p>路由配置中一个path对应一个components，同时支持按需懒加载组件(不点击不加载)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">BASE_URL</span>),<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">HomeView</span>,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>,<br>      <span class="hljs-comment">// route level code-splitting</span><br>      <span class="hljs-comment">// this generates a separate chunk (About.[hash].js) for this route</span><br>      <span class="hljs-comment">// which is lazy-loaded when the route is visited.</span><br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/AboutView.vue&#x27;</span>),<br>    &#125;,<br>  ],<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>GlobalHeader添加路由跳转，ant designvue中<code>a-menu</code>标签是支持@click的</p><figure><img src="/img/pictureLibrary/image-20250710181156925.png"alt="image-20250710181156925" /><figcaption aria-hidden="true">image-20250710181156925</figcaption></figure><p>返回的结果是一个对象，如果看不懂，可以通过console.log打印</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">doMenuClick</span> = (<span class="hljs-params">val: any</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(val)<br>&#125;<br></code></pre></td></tr></table></figure><figure><img src="/img/pictureLibrary/image-20250710181247119.png"alt="image-20250710181247119" /><figcaption aria-hidden="true">image-20250710181247119</figcaption></figure><p>我们可以通过解构的方式提取出内部key，跳转到对应位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">doMenuClick</span> = (<span class="hljs-params">&#123;key&#125;: &#123;key: string&#125;</span>) =&gt; &#123;<br>  router.<span class="hljs-title function_">push</span>(&#123;<br>    <span class="hljs-attr">path</span>: key,<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="设置高亮">设置高亮</h4><p>高亮原理</p><p>点击菜单后，v-model绑定了current值实现高亮</p><p>刷新界面需要根据URL路径来修改current的值来实现高亮</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;a-col flex=&quot;auto&quot;&gt;<br>   &lt;a-menu v-model:selectedKeys=&quot;current&quot; mode=&quot;horizontal&quot; :items=&quot;items&quot; @click=&quot;doMenuClick&quot; /&gt;<br>&lt;/a-col&gt;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> current = ref&lt;string[]&gt;([])<br></code></pre></td></tr></table></figure><p>这里我们可以使用生命周期钩子<code>afterEach</code>监听路由变化，当界面发生刷新自动更改current的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">afterEach</span>(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>) =&gt;</span> &#123;<br>  current.<span class="hljs-property">value</span> = [to.<span class="hljs-property">path</span>];<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="axios请求">axios请求</h4><p>为了方便我们向后端发送请求，获取数据，这里我们需要引入axios</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> axios<br></code></pre></td></tr></table></figure><p>全局自定义请求</p><p>应用场景：当我们需要对通用的响应对象统一处理，设置请求拦截器和响应拦截器，这里主要是在响应后判断是否未登录，如果未登录则判断当前请求不是获取用户登录态或者说用户不在登录界面，提示用户去登录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> &#123; message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ant-design-vue&#x27;</span><br><br><span class="hljs-comment">// 创建 Axios 实例</span><br><span class="hljs-keyword">const</span> myAxios = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://localhost:8082&#x27;</span>,<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">60000</span>,<br>  <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span>,<br>&#125;)<br><br><span class="hljs-comment">// 全局请求拦截器</span><br>myAxios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-comment">// Do something before request is sent</span><br>    <span class="hljs-keyword">return</span> config<br>  &#125;,<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-comment">// Do something with request error</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>  &#125;,<br>)<br><br><span class="hljs-comment">// 全局响应拦截器</span><br>myAxios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; data &#125; = response<br>    <span class="hljs-comment">// 未登录</span><br>    <span class="hljs-keyword">if</span> (data.<span class="hljs-property">code</span> === <span class="hljs-number">40100</span>) &#123;<br>      <span class="hljs-comment">// 不是获取用户信息的请求，并且用户目前不是已经在用户登录页面，则跳转到登录页面</span><br>      <span class="hljs-keyword">if</span> (<br>        !response.<span class="hljs-property">request</span>.<span class="hljs-property">responseURL</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;user/get/login&#x27;</span>) &amp;&amp;<br>        !<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">pathname</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;/user/login&#x27;</span>)<br>      ) &#123;<br>        message.<span class="hljs-title function_">warning</span>(<span class="hljs-string">&#x27;请先登录&#x27;</span>)<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">`/user/login?redirect=<span class="hljs-subst">$&#123;<span class="hljs-variable language_">window</span>.location.href&#125;</span>`</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> response<br>  &#125;,<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-comment">// Any status codes that falls outside the range of 2xx cause this function to trigger</span><br>    <span class="hljs-comment">// Do something with response error</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>  &#125;,<br>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> myAxios<br><br></code></pre></td></tr></table></figure><h4 id="openapi自动生成请求代码">openapi自动生成请求代码</h4><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i --save-dev @umijs/openapi<br></code></pre></td></tr></table></figure><p>根目录创建openapi.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; generateService &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@umijs/openapi&#x27;</span><br><br><span class="hljs-title function_">generateService</span>(&#123;<br>  <span class="hljs-attr">requestLibPath</span>: <span class="hljs-string">&quot;import request from &#x27;@/request&#x27;&quot;</span>,<br>  <span class="hljs-attr">schemaPath</span>: <span class="hljs-string">&#x27;http://localhost:8082/api/v2/api-docs&#x27;</span>,<br>  <span class="hljs-attr">serversPath</span>: <span class="hljs-string">&#x27;./src&#x27;</span>,<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>package.json中添加<code>"openapi": "node openapi.config.js"</code></p><p>运行<code>npm run openapi</code>创建了api文件，同时创建了后端请求代码</p><figure><img src="/img/pictureLibrary/image-20250710184506890.png"alt="image-20250710184506890" /><figcaption aria-hidden="true">image-20250710184506890</figcaption></figure><p>测试请求</p><figure><img src="/img/pictureLibrary/image-20250710185814726.png"alt="image-20250710185814726" /><figcaption aria-hidden="true">image-20250710185814726</figcaption></figure><p>如果出现跨域CORS问题，没有配置CorsConfig的情况</p><p>后端Controller方法上添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CrossOrigin(origins = &#123;&quot;https://localhost:8081&quot;&#125;,allowCredentials = &quot;true&quot;)</span><br></code></pre></td></tr></table></figure><p>如果前端使用vite，可以在vite.config.ts中增加代理配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">server</span>: &#123;<br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;/api&#x27;</span>: <span class="hljs-string">&#x27;http://localhost:8082&#x27;</span>,<br>    &#125;<br>  &#125;,<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>同时修改request.ts，删除前缀</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建 Axios 实例</span><br><span class="hljs-keyword">const</span> myAxios = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">60000</span>,<br>  <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span>,<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>前端这样配置相当于代理帮你发送到后端<code>http://localhost:8082</code></p><h3 id="全局状态管理">全局状态管理</h3><p><strong>什么是全局状态管理？</strong></p><blockquote><p>所有页面都共享的变量，适合作为全局状态管理的对象：用户的登录态</p></blockquote><p>全局状态管理库主要包括Vuex、Pinia，由于VuexStore状态管理需要引入<code>state</code>,<code>mutations</code>,<code>actions</code>,<code>getters</code>这些概念</p><p>这里使用Pinia，很适合上手</p><p>create-vue的时候已经选择了使用Pinia状态管理，这里无需引入</p><p><strong>定义用户状态</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useLoginUserStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&quot;loginUser&quot;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-comment">//state</span><br>  <span class="hljs-keyword">const</span> loginUser = ref&lt;any&gt;(&#123;<br>    <span class="hljs-attr">userName</span>: <span class="hljs-string">&quot;未登录&quot;</span><br>  &#125;)<br><br>  <span class="hljs-comment">//调用后端getLoginUser接口获取当前用户信息</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchLoginUser</span>(<span class="hljs-params"></span>) &#123;<br><br>  &#125;<br><br><br><span class="hljs-comment">//修改用户状态</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">setLoginUser</span>(<span class="hljs-params">newLoginUser: any</span>) &#123;<br>    loginUser.<span class="hljs-property">value</span> = newLoginUser<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> &#123;loginUser,fetchLoginUser,setLoginUser&#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p><strong>全局使用用户状态</strong></p><p>首次加入页面，需要获取用户信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> loginUserStore = <span class="hljs-title function_">useLoginUserStore</span>()<br>loginUserStore.<span class="hljs-title function_">fetchLoginUser</span>()<br></code></pre></td></tr></table></figure><p>想要获取内部数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">loginUserStore.<span class="hljs-property">loginUser</span>.<span class="hljs-property">userName</span><br></code></pre></td></tr></table></figure><p>修改顶部菜单栏，如果用户有ID展示其昵称，没有昵称展示无名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div class=&quot;user-login-state&quot;&gt;<br>  &lt;div v-if=&quot;loginUserStore.loginUser.id&quot;&gt;<br>    &#123;&#123;loginUserStore.loginUser.userName ?? &#x27;无名&#x27;&#125;&#125;<br>  &lt;/div&gt;<br>  &lt;div v-else&gt;<br>    &lt;a-button type=&quot;primary&quot; href=&quot;/user/login&quot;&gt;登录&lt;/a-button&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>为了方便看到效果，我们设置延迟修改<code>loginUser</code>的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchLoginUser</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    loginUser.<span class="hljs-property">value</span> = &#123;<span class="hljs-attr">userName</span>: <span class="hljs-string">&quot;测试用户&quot;</span>,<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>&#125;<br>  &#125;,<span class="hljs-number">3000</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>页面开发目录结构</p><p>我们主要分为管理员和用户，管理员可以管理用户</p><p>所以我们需要创建用户注册页面、用户登录页面、用户管理页面</p><figure><img src="/img/pictureLibrary/image-20250710204256240.png"alt="image-20250710204256240" /><figcaption aria-hidden="true">image-20250710204256240</figcaption></figure><p>/user/login ===&gt; UserLoginPage</p><p>/user/register ====&gt; UserRegisterPage</p><p>至此第一部分项目初始化结束！！！！</p><h2 id="用户模块">用户模块</h2><h3 id="用户模块需求分析">用户模块需求分析</h3><ul><li>用户登录</li><li>用户注册</li><li>用户注销</li><li>用户权限控制</li><li>用户管理界面(管理员)</li></ul><h3 id="用户表设计">用户表设计</h3><p>用户表名：user</p><p>用户字段：ID、userAccount、userPassword、userName、userRole、userAvatar、userProfile、editTime、createTime、updateTime、isDelete</p><p>为经常查询的键设置索引：userAccount(账号唯一)、userName</p><p>editTime和updateTime区别：editTime指的是用户编辑个人信息时更改，updateTime指的是任意字段变动更改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 用户表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> <span class="hljs-keyword">user</span><br>(<br>    id           <span class="hljs-type">bigint</span> auto_increment comment <span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-keyword">primary</span> key,<br>    userAccount  <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                           <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;账号&#x27;</span>,<br>    userPassword <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>)                           <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;密码&#x27;</span>,<br>    userName     <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                           <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户昵称&#x27;</span>,<br>    userAvatar   <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>)                          <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户头像&#x27;</span>,<br>    userProfile  <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>)                           <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户简介&#x27;</span>,<br>    userRole     <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;user&#x27;</span>            <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户角色：user/admin&#x27;</span>,<br>    editTime     datetime     <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;编辑时间&#x27;</span>,<br>    createTime   datetime     <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    updateTime   datetime     <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>    isDelete     tinyint      <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;是否删除&#x27;</span>,<br>    <span class="hljs-keyword">UNIQUE</span> KEY uk_userAccount (userAccount),<br>    INDEX idx_userName (userName)<br>) comment <span class="hljs-string">&#x27;用户&#x27;</span> <span class="hljs-keyword">collate</span> <span class="hljs-operator">=</span> utf8mb4_unicode_ci;<br><br></code></pre></td></tr></table></figure><h3 id="用户登录流程一定要搞明白">用户登录流程(一定要搞明白)</h3><p>1）初始对话：前端与服务器创建连接后，服务器给客户端一个Session，同时保存。SessionID会作为唯一标识，返回给前端。</p><p>2）登录成功，后端服务器校验信息成功后，会将用户信息存入Session中。服务器生成一个Set-Cookie响应头指向前端SessionID</p><p>3）前端保存Cookie：前端收到后端响应后，根据浏览器Set-Session指令，将SessionID存储到浏览器Cookie同时绑定域名</p><p>4）再次向绑定域名发送请求，浏览器后续会携带之前保存的Cookie，其中包含SessionID</p><p>5）服务器收到请求，提取SessionID，获取Session</p><p>6）通过Session，获取用户信息</p><h3 id="权限控制">权限控制</h3><ul><li>无权限也可以看</li><li>登录用户才可以看</li><li>未登录可以看，登录解锁更多</li><li>只有管理员可以看</li></ul><h3 id="后端开发">后端开发</h3><p>刚刚已经创建了user表，这里使用mybatis-plusX插件，右键user表，选择mybatis-plus插件，来为我们生成mapper和service</p><figure><img src="/img/pictureLibrary/image-20250710214119233.png"alt="image-20250710214119233" /><figcaption aria-hidden="true">image-20250710214119233</figcaption></figure><p>将User拖动到model/entity下，UserMapper拖到mapper，Service移动到service包下，如果有mapper中应用到了generator的包名记得更改</p>]]></content>
    
    
    <categories>
      
      <category>项目实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM Like HotSpot?</title>
    <link href="/2025/01/02/JVM-Like-HotSpot/"/>
    <url>/2025/01/02/JVM-Like-HotSpot/</url>
    
    <content type="html"><![CDATA[<h1 id="q1jvm-在哪里">Q1：JVM 在哪里？</h1><p>JVM(Java VirtualMachine)是位于操作系统之上的一个环境，在这个环境中，我们同时运行了一堆Java程序。</p><p>JRE包含JVM、操作系统也是安装于硬件之上。</p><p><img src="/img/JVMIMG/1.png" /></p><h1 id="q2jvm体系结构">Q2：JVM体系结构</h1><p><img src="/img/JVMIMG/2.png" /></p><p><img src="/img/JVMIMG/3.png" /></p><h1 id="什么是类加载器的双亲委派机制">什么是类加载器的双亲委派机制</h1><h3 id="类加载流程图">类加载流程图</h3><p><img src="/img/JVMIMG/4.png" /></p><h3 id="模版对象介绍">模版对象介绍</h3><p><img src="/img/JVMIMG/5.png" /></p><h3 id="双亲委派机制">双亲委派机制</h3><p>通过打印我们会发信啊当前使用的是AppClassLoader、父亲为ExtClassLoader、爷爷是NULL(java调用不到、由C实现)</p><p><img src="/img/JVMIMG/6.png" /></p><p>其实不然，为什么以下程序报错，正在我们使用类的时候，他会从AppLoader逐渐过渡到rt.jar发现rt.jar包下的java.lang底下也是有一个叫String的类，优先执行ROOT下的String，而不会执行当前AppLoader中的</p><p><img src="/img/JVMIMG/7.png" /></p><p>所以说双亲委派的流程大致为类加载器收到类加载请求，之后将请求委托给ROOT，如果当前类加载器可以加载这个类，直接结束，否则的话，逐步传递给子类，判断是否可以类加载，最后实在没有就报错</p><h1 id="沙箱安全机制">沙箱安全机制</h1><p><a href="https://www.51cto.com/article/709366.html">详见</a></p><h1 id="native关键字">native关键字</h1><p>凡是带有native关键字的，都会回到本地方法栈，调用本地方法接口(JNI)</p><p>JNI作用：扩展Java的使用，融合不同的语言为Java使用</p><h1 id="pc寄存器">PC寄存器</h1><p>也被称为程序计数器，本质上是一个指针为线程私有</p><h1 id="方法区">方法区</h1><p><img src="/img/JVMIMG/8.png" /></p><p>存储static、final、class、常量池</p><h1 id="栈的实行机制">栈的实行机制</h1><p>栈遵循先进后出的道理</p><p>所以说Main函数在栈中最后弹出，不存在垃圾回收机制</p><p>线程的生命周期和栈是同步的，线程结束，栈被释放</p><p>栈运行原理为栈帧</p><h1 id="jvm有哪些">JVM有哪些？</h1><ul><li>HotSpot</li><li>BEA JRockit</li><li>IBM J9 VM</li></ul><h1 id="堆">堆</h1><p><img src="/img/JVMIMG/9.png" /></p><p>堆区内存满了叫做OOM、堆内存不够</p><p>在JDK8以后永久区叫做元空间</p><h3 id="永久区">永久区</h3><p>存储java运行时的环境以及jdk自带的Class对象、不存在垃圾回收机制</p><ul><li>jdk1.6之前：永久化，常量池存储在永久区中</li><li>jdk1.7：去除永久代，常量池存放到堆中</li><li>jdk1.8：常量池存放到元空间中</li></ul><h3id="如果出现了oom的情况如何解决">如果出现了OOM的情况，如何解决？</h3><p>默认情况下打印内存分配情况</p><p><img src="/img/JVMIMG/10.png" /></p><p><img src="/img/JVMIMG/11.png" /></p><p>根据打印信息我们会发现新生区 + 老年区大小 = 堆区内存大小</p><p><img src="/img/JVMIMG/12.png" /></p><p>因为元空间也属于堆的范畴，但是并没有为其分配空间，所以说元空间物理上并不存在</p><p>GC垃圾回收的机制</p><p>每次向堆中存放数据都会进行轻GC，当新生区满了进行一次重GC，数据存放到老年区，如果最终老年区中的数据也满了报错显示</p><p>使用工具排除问题</p><ul><li>Debug调试代码</li><li>使用内存快照工具，MAT，Jprofiler</li></ul><p>Jprofiler作用</p><ul><li>分析Dump文件，定位内存泄漏</li><li>获取堆中的对象</li></ul><h1 id="gc">GC</h1><h3 id="引用计数法">引用计数法</h3><p>对象每使用一次，将其计数加一，最后将不怎么使用的对象筛选掉</p><p><img src="/img/JVMIMG/13.png" /></p><h3 id="复制算法">复制算法</h3><p><img src="/img/JVMIMG/14.png" /></p><p>每一次GC都会将伊甸园区的数据存放到幸存区，Eden变为空</p><p>幸存From和幸存To如何分辨：谁空谁是To，假设经过GC、Eden中的数据存放到幸存区中，则另一个幸存区由于是空被标识为To，对象流向To，From又为空，接着将From变为To，接着进行GC操作，当操作来到15次对象还没有挂掉就会进入老年区</p><p>15次是默认老年区的GC次数，我们还可以手动设置<code>-XX:MaxTenuringThreshold=15</code></p><p>好处：没有内存碎片</p><p>坏处：浪费内存空间，两个幸存区，一块永远是空的</p><p>复制算法最佳使用场景：对象存活度较低的情况 对应新生区</p><h3 id="标记清除算法">标记清除算法</h3><p>标记活着的对象、清除没有标记的对象</p><p>优点：不需要额外的空间</p><p>缺点：两次扫描、严重浪费时间，会产生内存碎片</p><h3 id="标记压缩算法">标记压缩算法</h3><p><img src="/img/JVMIMG/15.png" /></p><p>再次扫描，将存活的对象向前移动</p><h1 id="jmm是什么">JMM是什么？</h1><p>JVM(Java Memory Model)</p><p>作用：缓存一致性原则，用于定义数据读写规则</p><p>JMM定义了主内存和线程工作内存之间的关系，同时保证了主内存和线程工作内存之间的通信</p><p><img src="/img/JVMIMG/16.png" /></p><p>volilate主要用来解决线程中的数据和主存同步</p>]]></content>
    
    
    <categories>
      
      <category>JavaVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fluid+GithubPage</title>
    <link href="/2024/10/19/Fluid+GithubPage/"/>
    <url>/2024/10/19/Fluid+GithubPage/</url>
    
    <content type="html"><![CDATA[<h2 id="hexo-fluid-theme-githubpage-搭建个人博客">Hexo + Fluid Theme +GithubPage 搭建个人博客</h2><p>前言</p><ul><li>GithubPage是静态站点托管服务，它可以读取到你上传至仓库中的html、css、javascript代码，运行并且在对应位置进行显示</li><li>Hexo是一个快速、简洁且高效的博客框架。 Hexo使用Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页，Hexo提供服务Fluid提供前端页面</li></ul><h3 id="前置条件">1. 前置条件</h3><h4 id="git的安装与配置">1.1 Git的安装与配置</h4><h5 id="安装">安装</h5><p>两种方式</p><ul><li><p>brew安装 <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>git<br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://git-scm.com/">官方直达</a></p></li></ul><p>git -v查看版本</p><h6 id="配置">配置</h6><p><ahref="https://www.cnblogs.com/techflow/p/13703721.html">参考链接</a></p><p><strong>name对应Github用户名、email对应Github绑定的邮箱</strong><strong>其中[user]一定要配置好，其余的可以没有</strong> <imgsrc="/img/T1/gf.png" /></p><p><span style="color: red; font-size: 1.2em;">后期常常出现的问题:github,Empty reply from server？</span></p><p><strong>解决方案</strong></p><p>本地生成公钥，查看公钥内容 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;Github绑定邮箱&quot;</span><br><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure></p><p>将cat到的内容放入到New SSH Key中 <img src="/img/T1/ssh.png" /></p><h4 id="nodejs安装">1.2 Nodejs安装</h4><p><ahref="https://nodejs.org/en">官方直达</a>或者说可以使用brew安装</p><p>node -v查看版本</p><h4 id="github-创建仓库">1.3 Github 创建仓库</h4><p>创建一个名为用户名.github.io的仓库</p><p><em>初体验(所有的操作都在master中进行，记得修改main -&gt;master)</em></p><ol type="1"><li>我们可以创建一个html页面index.html</li><li>点击Setting，选择GithubPage</li><li>点击Visit Website，如果404，可以查看Actions，生效后访问</li></ol><h3 id="hexo简单使用与结构分析">2. Hexo简单使用与结构分析</h3><h4 id="hexo初体验">2.1 hexo初体验</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><ol type="1"><li>hexo初始化项目</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hexo</span> init<span class="hljs-meta"> [可选]</span><br></code></pre></td></tr></table></figure><p>hexo init 直接在当前文件夹下创建项目内容、hexo init my-blog创建一个my-blog文件夹，同时在里面创建项目内容</p><p>项目结构</p><blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus">├── _config<span class="hljs-selector-class">.fluid</span><span class="hljs-selector-class">.yml</span><br>├── _config<span class="hljs-selector-class">.landscape</span><span class="hljs-selector-class">.yml</span><br>├── _config<span class="hljs-selector-class">.yml</span><br>├── db<span class="hljs-selector-class">.json</span><br>├── node_modules<br>├── package-lock<span class="hljs-selector-class">.json</span><br>├── package<span class="hljs-selector-class">.json</span><br>├── public<br>├── scaffolds<br>├── <span class="hljs-selector-tag">source</span><br>├── themes<br>└── yarn.lock<br></code></pre></td></tr></table></figure></blockquote><p>启动项目 <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure></p><p>接着去浏览器里访问localhost:4000，会看到初始化好的界面</p><p>配置完整后hexo的操作为 <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss">hexo clean<br><br>hexo <span class="hljs-selector-tag">g</span><br><br>hexo s<span class="hljs-selector-attr">[预览、可选]</span><br><br>hexo <span class="hljs-built_in">d</span>(下面介绍)<br></code></pre></td></tr></table></figure></p><h4 id="hexo-theme引入">2.2 Hexo-Theme引入</h4><p><a href="https://hexo.io/themes/">Themes</a></p><p>本篇文章只介绍Fluid主题的相关配置</p><h5 id="在博客目录下创建_config.fluid.yml">2.2.1在博客目录下创建_config.fluid.yml</h5><p>默认情况下_config.yml是博客的配置入口，fluid主题将_config.fluid.yml优先级设置的比较高，可能是考虑到不小心把_config.yml改乱了，所以接下来我们只需要设置_config.fluid.yml就可以了</p><ul><li>_config.fluid.yml配置</li></ul><p>基本配置 <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">title:</span> 标签页内容<br><span class="hljs-symbol">theme:</span> fluid<br><span class="hljs-symbol">author:</span> 设置成自己名(可选)<br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN<br></code></pre></td></tr></table></figure></p><p>添加deploy便于后期上传 <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">    type:</span> git<br><span class="hljs-symbol">    repo:</span> git@github.com:KoRinALL/KoRinALL.github.io.git (这里我建议使用ssh)<br><span class="hljs-symbol">    branch:</span> master<br></code></pre></td></tr></table></figure></p><p>部署好后，我们可以使用<code>hexo d</code>进行上传文件到仓库中</p><ul><li>博客目录下主要文件介绍</li></ul><p>public: 主要前端文件 html、css、javascript source: - _posts管理md文章的文件 - about 需要自己创建，对应about界面 - img需要自己创建，图片路径优先级比themes下_config.yml 优先级高</p><p>node_modules - hexo-themes-fluid - <em>config.yml 主题配置文件 </em>img和刚才创建的img对应</p><h3 id="插件引入">3. 插件引入</h3><p>-&gt; hexo-themes-fluid/_config.yml</p><blockquote><p>图片更换，文本的更改以及一些很基础的操作这里就不介绍了，我相信各位大佬能自行解决同时学到些新知识～</p></blockquote><p>评论插件包括utterances | disqus | gitalk | valine | waline | changyan| livere | remark42 | twikoo | cusdis | giscus |discuss，我使用的主要是gitalk</p><h4 id="gitalk-comment-不推荐请看3.4-配置waline评论">3.1 Gitalk Comment(不推荐，请看3.4 配置Waline评论)</h4><p><img src="/img/T1/GK.png" /></p><ol type="1"><li><p>来到Github/Setting/Developer Setting/OAuth Apps/New OAuthApps</p></li><li><p>Homepage URL 和Authorization callback URL填写自己仓库地址(一定要是https协议) ex:https://korinall.github.io/，里面会提供Client ID和Client secrets</p></li></ol><p>3.其他设置 <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">repo:</span>仓库名<br>owner、admin: 用户名<br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN<br>其余默认<br></code></pre></td></tr></table></figure></p><p>Tip： 效果只有在部署后，初始化给予权限后才可以使用</p><h4 id="latex">3.2 Latex</h4><ol type="1"><li>更改主题配置</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">math:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">engine:</span> <span class="hljs-string">mathjax</span><br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>更换渲染器渲染器只允许同时存在一个，所以我们需要删除默认的，下载支持Latex的<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm uninstall hexo-renderer-marked <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure></li></ol><p>mathjax: <code>npm install hexo-renderer-kramed --save</code></p><p>katex:<code>npm install @upupming/hexo-renderer-markdown-it-plus --save</code></p><p>下载好后，我们只需要在对应的md文章FrontMatter部分添加<code>math: true</code></p><p>Front Matter指的是如下部分 <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">ssssss</span><br><span class="hljs-attr">math:</span> <span class="hljs-literal">true</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure></p><h4 id="添加看板娘">3.3 添加看板娘</h4><ol type="1"><li><p>git clone<ahref="https://github.com/stevenjoezhang/live2d-widget">live2d-widget</a>到主题的<font color="red">source</font>目录下</p></li><li><p>在主题的<font color="red">layout</font>目录下找到<strong>head.js</strong>添加如下代码<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/live2d-widget/autoload.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></p></li><li><p>修改autoload.js文件 <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">// const live2d_path <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://fastly.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/&quot;</span><span class="hljs-comment">;</span><br>const live2d_path <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/live2d-widget/&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></p></li><li><p>更改autoload.js下的CDN地址 默认CND地址不可以进行换装，这里使用<ahref="https://akilar.top/posts/5b8f515f/">Akilarの糖果屋</a>的CDN，模型多放心使用<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">cdnPath:</span> <span class="hljs-string">&quot;https://npm.elemecdn.com/akilar-live2dapi@latest/&quot;</span><br></code></pre></td></tr></table></figure></p></li><li><p>为了防止看板娘被挡住，我们可以将其图层设置为999，具体操作更改<font color="blue">live2d-widget</font>下的<font color="blue">waifu.css</font><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta">#waifu &#123;</span><br>    z-<span class="hljs-keyword">index</span>: <span class="hljs-number">999</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p></li><li><p>调整看板娘位于右下角，修改配置如下</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#waifu</span> &#123;<br><span class="hljs-attribute">bottom</span>: -<span class="hljs-number">1000px</span>;<br><span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br><span class="hljs-attribute">line-height</span>: <span class="hljs-number">0</span>;<br><span class="hljs-attribute">margin-bottom</span>: -<span class="hljs-number">10px</span>;<br><span class="hljs-attribute">position</span>: fixed;<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">3px</span>);<br><span class="hljs-attribute">transition</span>: transform .<span class="hljs-number">3s</span> ease-in-out, bottom <span class="hljs-number">3s</span> ease-in-out;<br><span class="hljs-attribute">z-index</span>: <span class="hljs-number">999</span>;<br>&#125;<br><br><br><span class="hljs-selector-id">#waifu-tool</span> &#123;<br><span class="hljs-attribute">color</span>: <span class="hljs-number">#aaa</span>;<br><span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br><span class="hljs-attribute">position</span>: absolute;<br><span class="hljs-attribute">left</span>: <span class="hljs-number">0px</span>;<br><span class="hljs-attribute">top</span>: <span class="hljs-number">70px</span>;<br><span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">1s</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="waline-comment">3.4 Waline Comment</h4><blockquote><p>Gitalk博客每一次都需要管理员初始化感觉挺CS，这里推荐换成Waline</p></blockquote><p>需要用到的网站</p><p>LeanCloud(推荐使用国际版本)：<ahref="https://console.leancloud.app/apps">https://console.leancloud.app/apps</a></p><p><font>如果使用国内版本，需要在LeanCloud上绑定已经备案等域名，Vercel中也需要多添加一步环境变量，具体参考<ahref="https://www.zywvvd.com/notes/hexo/theme/fluid/fluid-waline/fluid-waline/">Here!</a></font></p><p>Vercel：<a href="https://vercel.com/">https://vercel.com/</a></p><p><font size=5>LeanCloud</font></p><ol type="1"><li>创建应用实例</li></ol><figure><img src="/img/T1/ca.png" alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><ol start="2" type="1"><li><p>来到Setting中完成邮箱验证</p></li><li><p>选择Setting-&gt;App Keys</p></li></ol><p>待会要用AppID、AppKey、MasterKey</p><p><font size=5>Vercel</font></p><ol type="1"><li><p>注册账号(推荐使用github登录)</p></li><li><p><ahref="https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fwalinejs%2Fwaline%2Ftree%2Fmain%2Fexample&amp;teamSlug=korinalls-projects">点这里</a></p></li><li><p>解锁、添加仓库名</p></li></ol><figure><img src="/img/T1/newpro.png" alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><ol start="4" type="1"><li>点击Continue to Dashboard -&gt; Environment Variables</li></ol><p>配置三个环境变量LEAN_ID, LEAN_KEY 和 LEAN_MASTER_KEY 。</p><p>它们的值分别对应之前在 LeanCloud 中获得的 APP ID, APP KEY, MasterKey，然后Save。</p><ol start="5" type="1"><li><p>点击顶部栏点Deployments中的Redeploy <imgsrc="/img/T1/redeploy.png" alt="alt text" /></p></li><li><p>回到顶部栏Project -&gt; Visit -&gt; Login</p></li></ol><figure><img src="/img/T1/register.png" alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><ol start="7" type="1"><li>这个页面中第一个注册的人默认就是管理员，后期可以使用管理员进行发送消息</li></ol><p><font size=5>主题配置文件(_config.yml)</font></p><p>在原有的基础上只需要将Visit访问的网址填入就可以使用了</p><figure><img src="/img/T1/vs.png" alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>至此，博客已经搭建完毕，其余的内容自行探索，学习永无止境^_^ echoBye！</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac技巧-1-应用位置查询</title>
    <link href="/2024/10/19/Mac%E6%8A%80%E5%B7%A7-1-%E5%BA%94%E7%94%A8%E4%BD%8D%E7%BD%AE%E6%9F%A5%E8%AF%A2/"/>
    <url>/2024/10/19/Mac%E6%8A%80%E5%B7%A7-1-%E5%BA%94%E7%94%A8%E4%BD%8D%E7%BD%AE%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>最后更新于：2024/10/24 PM</p>          </div><p>最近想要删除一个软件，这个软件在控制台中是存在的，通过Command +Space是可以打开的</p><p>但是忘记当时放在访达中什么位置，迫不得已上网查找，可能自己问题描述的有点抽象，没找到。。</p><p>最后去搜索了Spotlight Search的用法，其中介绍了一种查找路径的方法</p><p><font>长按command接着放置到查找的文件上</font>如图所示</p><figure><img src="/img/mac_tip/1.png" alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>成功 ！！！ <img src="/img/mac_tip/2.png" alt="alt text" /></p>]]></content>
    
    
    <categories>
      
      <category>Mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MAC技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
