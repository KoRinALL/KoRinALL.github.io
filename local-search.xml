<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>KR云图库Day04</title>
    <link href="/2025/07/16/%E4%BA%91%E5%9B%BE%E5%BA%9304/"/>
    <url>/2025/07/16/%E4%BA%91%E5%9B%BE%E5%BA%9304/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>最后更新于：2025/7/16 PM</p>          </div><h1 id="每日闲话环节">每日闲话环节</h1><p>今天是7月16号，博主已经鸽了2天了，这个项目我需要在8月分之前完成，好作为我的实习项目</p><p>鸽了两天干什么去了？额博主偷懒去了，感觉做什么事情都没有什么动力。。。。</p><p>今天玩逃生试炼遇到了一个新手老外，起初他拉我组队，我点错了同意了，进去后我寻思两个人就玩嘛</p><p>看着它懵懵懂懂的样子，感觉很有意思，在做一些简单的事情，我会让他做，复杂的都交给我这个老手</p><p>Steam交流我就问他来自哪一些客套话，大部分情况还是不怎么交流的</p><p>玩了大概3个小时，他不玩了说"它先下了，以后再玩，祝你有很好的一天"，突然就感觉我的付出没有白费hhh</p><p>也谢谢他 给我一个很好的面对生活的态度，让我不至于在游戏中堕落下去</p><p>不煽情了，来补一下之前的内容吧</p><h2 id="图片模块前端模块">图片模块（前端模块）</h2><h3 id="图片创建页面">图片创建页面</h3><p>创建<code>/pages/AddPicturePage</code>界面</p><h4 id="添加路由和菜单项">1）添加路由和菜单项</h4><p>路由添加</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/add_picture&#x27;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;创建图片&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-title class_">AddPicturePage</span>,<br>&#125;,<br></code></pre></td></tr></table></figure><p>GlobalHeader菜单项添加</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts">&#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;/add_picture&#x27;</span>,<br>  <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;创建图片&#x27;</span>,<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;创建图片&#x27;</span>,<br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="上传图片组件引入">2）上传图片组件引入</h4><p>1、这里使用Ant Design Vue 的upload组件</p><p><ahref="https://antdv.com/components/upload-cn#components-upload-demo-avatar">参考文档</a></p><figure><img src="/img/pictureLibrary/image-20250714112127767.png"alt="image-20250714112127767" /><figcaption aria-hidden="true">image-20250714112127767</figcaption></figure><p>2、该组件为受控组件，需要父组件传递图片信息</p><p>子组件代码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Props</span> &#123;<br>  picture?: <span class="hljs-variable constant_">API</span>.<span class="hljs-property">PictureVO</span><br>  onSuccess?: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">newPicture</span>:API.<span class="hljs-title class_">PictureVO</span></span>) =&gt;</span> <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">const</span> props = defineProps&lt;<span class="hljs-title class_">Props</span>&gt;()<br></code></pre></td></tr></table></figure><p><code>defineProps&lt;Props&gt;</code>在这里起到了什么作用？</p><p>个人理解：声明接口Props内部信息，供外部使用</p><p><code>onSuccess</code>函数会在图片上传后，将得到的图片信息返回给父组件</p><p>父组件给子组件传参</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;PictureUpload :picture=&quot;picture&quot; :onSuccess=&quot;onSuccess&quot;/&gt;<br></code></pre></td></tr></table></figure><p>父组件代码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> picture = ref&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">PictureVO</span>&gt;()<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onSuccess</span> = (<span class="hljs-params"><span class="hljs-attr">newPicture</span>:API.<span class="hljs-title class_">PictureVO</span></span>) =&gt; &#123;<br>  picture.<span class="hljs-property">value</span> = newPicture<br>&#125;<br></code></pre></td></tr></table></figure><p>3、页面结构代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div id=&quot;picture-upload&quot;&gt;  <br>  &lt;a-upload  <br>    list-type=&quot;picture-card&quot;  <br>    :show-upload-list=&quot;false&quot;  <br>    :custom-request=&quot;handleUpload&quot;  <br>    :before-upload=&quot;beforeUpload&quot;  <br>  &gt;  <br>    &lt;img v-if=&quot;picture?.url&quot; :src=&quot;picture?.url&quot; alt=&quot;avatar&quot; /&gt;  <br>    &lt;div v-else&gt;  <br>      &lt;loading-outlined v-if=&quot;loading&quot;&gt;&lt;/loading-outlined&gt;  <br>      &lt;plus-outlined v-else&gt;&lt;/plus-outlined&gt;  <br>      &lt;div class=&quot;ant-upload-text&quot;&gt;点击或拖拽上传图片&lt;/div&gt;  <br>    &lt;/div&gt;  <br>  &lt;/a-upload&gt;  <br>&lt;/div&gt;<br><br></code></pre></td></tr></table></figure><p>4、上传前图片校验</p><p>使用默认校验规则</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">beforeUpload</span> = (<span class="hljs-params"><span class="hljs-attr">file</span>: <span class="hljs-title class_">UploadProps</span>[<span class="hljs-string">&#x27;fileList&#x27;</span>][<span class="hljs-built_in">number</span>]</span>) =&gt; &#123;  <br>  <span class="hljs-keyword">const</span> isJpgOrPng = file.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;image/jpeg&#x27;</span> || file.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;image/png&#x27;</span>  <br>  <span class="hljs-keyword">if</span> (!isJpgOrPng) &#123;  <br>    message.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;不支持上传该格式的图片，推荐 jpg 或 png&#x27;</span>)  <br>  &#125;  <br>  <span class="hljs-keyword">const</span> isLt2M = file.<span class="hljs-property">size</span> / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span> &lt; <span class="hljs-number">2</span>  <br>  <span class="hljs-keyword">if</span> (!isLt2M) &#123;  <br>    message.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;不能上传超过 2M 的图片&#x27;</span>)  <br>  &#125;  <br>  <span class="hljs-keyword">return</span> isJpgOrPng &amp;&amp; isLt2M  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>上传图片，调用后端接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleUpload</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">&#123;file&#125;: <span class="hljs-built_in">any</span></span>) =&gt; &#123;<br>  loading.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span>;<br><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> params = props.<span class="hljs-property">picture</span> ? &#123;<span class="hljs-attr">id</span>: props.<span class="hljs-property">picture</span>.<span class="hljs-property">id</span>&#125; : &#123;&#125;;<br>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">uploadPictureUsingPost</span>(params,&#123;&#125;,file)<br><br>    <span class="hljs-keyword">if</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> === <span class="hljs-number">0</span> &amp;&amp; res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>) &#123;<br>      message.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;图片上传成功&#x27;</span>);<br>      <span class="hljs-comment">//将上传成功的图片信息返回给父元素</span><br>      props.<span class="hljs-property">onSuccess</span>?.(res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>)<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>      message.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;图片上传失败&#x27;</span> + res.<span class="hljs-property">data</span>.<span class="hljs-property">message</span>);<br>    &#125;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    message.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;图片上传失败&#x27;</span>)<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    loading.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span><br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在调用上传图片接口的时候，如果已经存在pictureId，需要对上传的图片进行更新，将ID参数添加到请求中，防止出现创建新图片记录</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> params = props.<span class="hljs-property">picture</span> ? &#123; <span class="hljs-attr">id</span>: props.<span class="hljs-property">picture</span>.<span class="hljs-property">id</span> &#125; : &#123;&#125;;<br></code></pre></td></tr></table></figure><p>5、增加样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#picture-upload</span> :<span class="hljs-built_in">deep</span>(.ant-upload) &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span> <span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span> <span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">152px</span>;<br>  <span class="hljs-attribute">min-width</span>: <span class="hljs-number">152px</span>;<br>&#125;<br><br><span class="hljs-selector-id">#picture-upload</span> <span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">max-height</span>: <span class="hljs-number">480px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.ant-upload-select-picture-card</span> <span class="hljs-selector-tag">i</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">32px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>&#125;<br><br><span class="hljs-selector-class">.ant-upload-select-picture-card</span> <span class="hljs-selector-class">.ant-upload-text</span> &#123;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">8px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="开发创建图片页面">3）开发创建图片页面</h4><p>刚刚我们完成了上传组件</p><p>在此基础上，我们需要添加一些描述信息，分类等表单组件</p><p>这里我们使用<ahref="https://antdv.com/components/input-cn#components-input-demo-basic">图片名称</a>、<ahref="https://antdv.com/components/input-cn#components-input-demo-autosize-textarea">简介</a>、<ahref="https://antdv.com/components/select-cn#components-select-demo-tags">标签</a>、<ahref="https://antdv.com/components/auto-complete-cn">分类</a></p><p><strong>AutoComplete是一个带提示的文本输入框，用户可以自由输入，关键词是辅助输入。</strong></p><p>1）开发页面结构、及变量获取、样式调节</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div id=&quot;addPicturePage&quot;&gt;<br>    &lt;h2 style=&quot;margin-bottom: 20px&quot;&gt;&#123;&#123;route.query?.id ? &#x27;修改图片&#x27; : &#x27;创建图片&#x27;&#125;&#125;&lt;/h2&gt;<br>    &lt;PictureUpload :picture=&quot;picture&quot; :onSuccess=&quot;onSuccess&quot; /&gt;<br><br><br>    &lt;a-form v-if=&quot;picture&quot; layout=&quot;vertical&quot; :model=&quot;pictureForm&quot; @finish=&quot;handleSubmit&quot;&gt;<br>      &lt;a-form-item label=&quot;名称&quot; name=&quot;name&quot;&gt;<br>        &lt;a-input v-model:value=&quot;pictureForm.name&quot; placeholder=&quot;请输入名称&quot; /&gt;<br>      &lt;/a-form-item&gt;<br><br><br>      &lt;a-form-item label=&quot;简介&quot; name=&quot;introduction&quot;&gt;<br>        &lt;a-textarea v-model:value=&quot;pictureForm.introduction&quot; placeholder=&quot;请输入简介&quot; :rows=&quot;4&quot; allowClear autoSize/&gt;<br>      &lt;/a-form-item&gt;<br><br>      &lt;a-form-item label=&quot;分类&quot; name=&quot;category&quot;&gt;<br>        &lt;a-auto-complete<br>          v-model:value=&quot;pictureForm.category&quot;<br>          :options=&quot;categoryOptions&quot;<br>          placeholder=&quot;请输入分类&quot;<br>          allow-clear<br>        /&gt;<br>      &lt;/a-form-item&gt;<br><br><br>      &lt;a-form-item label=&quot;标签&quot; name=&quot;tags&quot;&gt;<br>        &lt;a-select<br>          v-model:value=&quot;pictureForm.tags&quot;<br>          mode=&quot;tags&quot;<br>          :options=&quot;tagOptions&quot;<br>          placeholder=&quot;请输入标签&quot;<br>          allow-clear<br>        &gt;&lt;/a-select&gt;<br>      &lt;/a-form-item&gt;<br><br>      &lt;a-form-item&gt;<br>        &lt;a-button type=&quot;primary&quot; html-type=&quot;submit&quot; style=&quot;width: 100%&quot;&gt;创建&lt;/a-button&gt;<br>      &lt;/a-form-item&gt;<br>    &lt;/a-form&gt;<br>  &lt;/div&gt;<br></code></pre></td></tr></table></figure><p>至于每一个标签参数怎么写，参考文档</p><p>打个比方，我们使用<code>a-textarea</code>，属性怎么写呢？参考<ahref="https://antdv.com/components/input-cn/#textarea">https://antdv.com/components/input-cn/#textarea</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> picture = ref&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">PictureVO</span>&gt;()<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onSuccess</span> = (<span class="hljs-params"><span class="hljs-attr">newPicture</span>:API.<span class="hljs-title class_">PictureVO</span></span>) =&gt; &#123;<br>  picture.<span class="hljs-property">value</span> = newPicture<br>&#125;<br><span class="hljs-keyword">const</span> pictureForm = reactive&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">PictureEditRequest</span>&gt;(&#123;&#125;);<br></code></pre></td></tr></table></figure><p>样式添加</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#addPicturePage</span> &#123;  <br>  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">720px</span>;  <br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>效果如下：</p><figure><img src="/img/pictureLibrary/image-20250716214243282.png"alt="image-20250716214243282" /><figcaption aria-hidden="true">image-20250716214243282</figcaption></figure><p>2）上传图片，将图片名称赋值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">onSuccess</span> = (<span class="hljs-params"><span class="hljs-attr">newPicture</span>: API.<span class="hljs-title class_">PictureVO</span></span>) =&gt; &#123;  <br>  picture.<span class="hljs-property">value</span> = newPicture  <br>  pictureForm.<span class="hljs-property">name</span> = newPicture.<span class="hljs-property">name</span>  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>3）编写提交表单函数，需要携带图片ID调用修改图片接口</p><p>提交表单步骤主要分为</p><ol type="1"><li>构造请求参数</li><li>调用接口</li><li>校验是否成功，是否跳转路由</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleSubmit</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"><span class="hljs-attr">values</span>: <span class="hljs-built_in">any</span></span>) =&gt; &#123;<br><br>  <span class="hljs-comment">//构造参数</span><br>  <span class="hljs-keyword">const</span> pictureId = picture.<span class="hljs-property">value</span>?.<span class="hljs-property">id</span>;<br>  <span class="hljs-keyword">if</span>(!pictureId) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-comment">//发送后端请求</span><br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">editPictureUsingPost</span>(&#123;<br>    <span class="hljs-attr">id</span>: pictureId,<br>    ...values<br>  &#125;)<br><br>  <span class="hljs-comment">//校验请求结果</span><br>  <span class="hljs-keyword">if</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> == <span class="hljs-number">0</span> &amp;&amp; res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>) &#123;<br>    message.<span class="hljs-title function_">success</span>(<span class="hljs-string">&quot;创建图片成功&quot;</span>);<br>    router.<span class="hljs-title function_">push</span>(&#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">`/picture/<span class="hljs-subst">$&#123;pictureId&#125;</span>`</span><br>    &#125;)<br><br>  &#125;<span class="hljs-keyword">else</span> &#123;<br>    message.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;创建图片失败&quot;</span> + res.<span class="hljs-property">data</span>.<span class="hljs-property">message</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4）为分类和标签添加后台死数据</p><p>定义tagList、categoryList接收对象</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> categoryOptions = ref&lt;<span class="hljs-built_in">string</span>[]&gt;([])<br><span class="hljs-keyword">const</span> tagOptions = ref&lt;<span class="hljs-built_in">string</span>[]&gt;([])<br></code></pre></td></tr></table></figure><p>调用后端接口，赋值给我门定义的变量</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getTagOrCategory</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">listPictureTagCategoryUsingGet</span>()<br><br>  <span class="hljs-keyword">if</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> == <span class="hljs-number">0</span> &amp;&amp; res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>) &#123;<br>    categoryOptions.<span class="hljs-property">value</span> = (res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-property">categoryList</span> ?? []).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">data</span>: <span class="hljs-built_in">string</span></span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">value</span>: data,<br>        <span class="hljs-attr">label</span>: data<br>      &#125;<br>    &#125;)<br><br>    tagOptions.<span class="hljs-property">value</span> = (res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-property">tagList</span> ?? []).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">data</span>: <span class="hljs-built_in">string</span></span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">value</span>: data,<br>        <span class="hljs-attr">label</span>: data<br>      &#125;<br>    &#125;)<br><br>  &#125;<span class="hljs-keyword">else</span> &#123;<br>    message.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;获取选项失败&#x27;</span> + res.<span class="hljs-property">data</span>.<span class="hljs-property">message</span>);<br>  &#125;<br>&#125;<br><br><br><span class="hljs-comment">//声明周期钩子，在页面加载前调用</span><br><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">getTagOrCategory</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><p>给组件补充Option</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ts">&lt;a-form-item label=<span class="hljs-string">&quot;分类&quot;</span> name=<span class="hljs-string">&quot;category&quot;</span>&gt;  <br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a-auto-complete</span>  </span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-model:value</span>=<span class="hljs-string">&quot;pictureForm.category&quot;</span>  </span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;categoryOptions&quot;</span>  </span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入分类&quot;</span>  </span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">allowClear</span>  </span></span><br><span class="hljs-tag"><span class="language-xml">  /&gt;</span></span>  <br>&lt;/a-form-item&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;标签&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tags&quot;</span>&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">a-select</span>  </span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-model:value</span>=<span class="hljs-string">&quot;pictureForm.tags&quot;</span>  </span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;tagOptions&quot;</span>  </span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;tags&quot;</span>  </span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入标签&quot;</span>  </span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">allowClear</span>  </span></span><br><span class="hljs-tag"><span class="language-xml">  /&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a-form-item</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>效果如下</p><figure><img src="/img/pictureLibrary/image-20250716191843496.png"alt="image-20250716191843496" /><figcaption aria-hidden="true">image-20250716191843496</figcaption></figure><p>优化：在我们上传图片后，才可以填写图片信息</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">&lt;a-form v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;picture&quot;</span> layout=<span class="hljs-string">&quot;vertical&quot;</span> :model=<span class="hljs-string">&quot;pictureForm&quot;</span> <span class="hljs-meta">@finish</span>=<span class="hljs-string">&quot;handleSubmit&quot;</span>&gt;&lt;/a-form&gt;<br></code></pre></td></tr></table></figure><figure><img src="/img/pictureLibrary/image-20250716192004445.png"alt="image-20250716192004445" /><figcaption aria-hidden="true">image-20250716192004445</figcaption></figure><h3 id="图片修改页面">图片修改页面</h3><p>修改主要采用的逻辑为取URL中<code>?id=xxx</code>，根据ID查询数据填充表单</p><p>1）根据ID，判断是否已有修改图片</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getOldPicture</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> id = route.<span class="hljs-property">query</span>?.<span class="hljs-property">id</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(id)<br>  <span class="hljs-keyword">if</span>(id) &#123;<br>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getPictureVoByIdUsingGet</span>(id.<span class="hljs-title function_">toString</span>())<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br><br>    <span class="hljs-keyword">if</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> == <span class="hljs-number">0</span> &amp;&amp; res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>) &#123;<br>      <span class="hljs-keyword">const</span> data = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>;<br>      picture.<span class="hljs-property">value</span> = data;<br>      pictureForm.<span class="hljs-property">name</span> = data.<span class="hljs-property">name</span>;<br>      pictureForm.<span class="hljs-property">introduction</span> = data.<span class="hljs-property">introduction</span>;<br>      pictureForm.<span class="hljs-property">category</span> = data.<span class="hljs-property">category</span>;<br>      pictureForm.<span class="hljs-property">tags</span> = data.<span class="hljs-property">tags</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2）修改页面标题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;h2 style=&quot;margin-bottom: 20px&quot;&gt;&#123;&#123;route.query?.id ? &#x27;修改图片&#x27; : &#x27;创建图片&#x27;&#125;&#125;&lt;/h2&gt;<br></code></pre></td></tr></table></figure><p>当我们访问之前已经创建过的图片<code>http://localhost:5173/add_picture?id=1945491351449268226</code>他会调用getPictureVoUsingGet 接口，前端加载后端返回的数据</p><figure><img src="/img/pictureLibrary/image-20250716223705867.png"alt="image-20250716223705867" /><figcaption aria-hidden="true">image-20250716223705867</figcaption></figure><p>注意：像我上面说的这么访问，会发现页面并没有跳转到之前的编辑页面，这是因为传递ID参数在前端属于number类型，后端属于Long类型，传递会出现精度丢失的情况</p><p>这里有两种做法</p><ul><li>将前端类型转为BigInt类型，后端使用String类型，试过没整明白</li><li>前后端统一为String类型(推荐)，接下来会告诉你改哪里</li></ul><p>修改前端接口和调用接口函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">//使用params传递String id</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getPictureVoByIdUsingGet</span>(<span class="hljs-params"></span><br><span class="hljs-params">  <span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span>,</span><br><span class="hljs-params">  options?: &#123; [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span> &#125;</span><br><span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(<span class="hljs-string">&#x27;/api/picture/get/vo&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    <span class="hljs-attr">params</span>: &#123;<br>      <span class="hljs-attr">id</span>: id<br>    &#125;,<br>    ...(options || &#123;&#125;),<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getPictureVoByIdUsingGet</span>(id.<span class="hljs-title function_">toString</span>())<br></code></pre></td></tr></table></figure><p>后端</p><p><code>/get/vo</code>接收参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/get/vo&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;PictureVO&gt; <span class="hljs-title function_">getPictureVOById</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String id, HttpServletRequest request)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">longId</span> <span class="hljs-operator">=</span> Long.parseLong(id);<br>        ThrowUtils.throwIf(longId &lt;= <span class="hljs-number">0</span>, ErrorCode.PARAMS_ERROR);<br>        <span class="hljs-comment">// 查询数据库</span><br>        <span class="hljs-type">Picture</span> <span class="hljs-variable">picture</span> <span class="hljs-operator">=</span> pictureService.getById(id);<br>        ThrowUtils.throwIf(picture == <span class="hljs-literal">null</span>, ErrorCode.NOT_FOUND_ERROR);<br>        <span class="hljs-comment">// 获取封装类</span><br>        <span class="hljs-keyword">return</span> ResultUtils.success(pictureService.getPictureVO(picture, request));<br>    &#125;<br></code></pre></td></tr></table></figure><p>更改PictureVO ID类型，随之Picture和PictureVO之间添加setID</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PictureVO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><span class="hljs-keyword">private</span> String id;<br>&#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 封装类转对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Picture <span class="hljs-title function_">voToObj</span><span class="hljs-params">(PictureVO pictureVO)</span> &#123;<br>        <span class="hljs-keyword">if</span> (pictureVO == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">Picture</span> <span class="hljs-variable">picture</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Picture</span>();<br>        BeanUtils.copyProperties(pictureVO, picture);<br>        <span class="hljs-comment">// 类型不同，需要转换  </span><br>        picture.setTags(JSONUtil.toJsonStr(pictureVO.getTags()));<br>        picture.setId(Long.parseLong(pictureVO.getId()));<br>        <span class="hljs-keyword">return</span> picture;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对象转封装类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PictureVO <span class="hljs-title function_">objToVo</span><span class="hljs-params">(Picture picture)</span> &#123;<br>        <span class="hljs-keyword">if</span> (picture == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">PictureVO</span> <span class="hljs-variable">pictureVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PictureVO</span>();<br>        BeanUtils.copyProperties(picture, pictureVO);<br>        <span class="hljs-comment">// 类型不同，需要转换  </span><br>        pictureVO.setTags(JSONUtil.toList(picture.getTags(), String.class));<br>        pictureVO.setId(Long.toString(picture.getId()));<br>        <span class="hljs-keyword">return</span> pictureVO;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="图片管理页面">图片管理页面</h3><h4 id="section"></h4><h4 id="新建路由">1）新建路由</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/admin/pictureManage&#x27;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;图片管理&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-title class_">PictureManagerPage</span>,<br>&#125;,<br></code></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts">&#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;/admin/pictureManage&#x27;</span>,<br>  <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;图片管理&#x27;</span>,<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;图片管理&#x27;</span>,<br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="开发管理界面">2）开发管理界面</h4><p>和用户管理一样，直接复制粘贴</p><p>1、修改column字段</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> columns = [  <br>  &#123;  <br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;id&#x27;</span>,  <br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;id&#x27;</span>,  <br>    <span class="hljs-attr">width</span>: <span class="hljs-number">80</span>,  <br>  &#125;,  <br>  &#123;  <br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;图片&#x27;</span>,  <br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;url&#x27;</span>,  <br>  &#125;,  <br>  &#123;  <br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;名称&#x27;</span>,  <br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;name&#x27;</span>,  <br>  &#125;,  <br>  &#123;  <br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;简介&#x27;</span>,  <br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;introduction&#x27;</span>,  <br>    <span class="hljs-attr">ellipsis</span>: <span class="hljs-literal">true</span>,  <br>  &#125;,  <br>  &#123;  <br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;类型&#x27;</span>,  <br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;category&#x27;</span>,  <br>  &#125;,  <br>  &#123;  <br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;标签&#x27;</span>,  <br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;tags&#x27;</span>,  <br>  &#125;,  <br>  &#123;  <br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;图片信息&#x27;</span>,  <br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;picInfo&#x27;</span>,  <br>  &#125;,  <br>  &#123;  <br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;用户 id&#x27;</span>,  <br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;userId&#x27;</span>,  <br>    <span class="hljs-attr">width</span>: <span class="hljs-number">80</span>,  <br>  &#125;,  <br>  &#123;  <br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;创建时间&#x27;</span>,  <br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;createTime&#x27;</span>,  <br>  &#125;,  <br>  &#123;  <br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;编辑时间&#x27;</span>,  <br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;editTime&#x27;</span>,  <br>  &#125;,  <br>  &#123;  <br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;操作&#x27;</span>,  <br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;action&#x27;</span>,  <br>  &#125;,  <br>]<br><br></code></pre></td></tr></table></figure><p>2、调用后端接口，获取后端数据</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> dataList = ref&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">UserVO</span>[]&gt;([])<br><span class="hljs-keyword">const</span> total = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><br><br><span class="hljs-keyword">const</span> searchParams = reactive&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">UserQueryRequest</span>&gt;(&#123;<br>  <span class="hljs-attr">current</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">pageSize</span>: <span class="hljs-number">10</span>,<br>  <span class="hljs-attr">sortField</span>: <span class="hljs-string">&#x27;createTime&#x27;</span>,<br>  <span class="hljs-attr">sortOrder</span>: <span class="hljs-string">&#x27;descend&#x27;</span><br>&#125;)<br><br><span class="hljs-keyword">const</span> pagination = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">current</span>: searchParams.<span class="hljs-property">current</span> ?? <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">pageSize</span>: searchParams.<span class="hljs-property">pageSize</span> ?? <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">total</span>: total.<span class="hljs-property">value</span>,<br>    <span class="hljs-attr">showSizeChanger</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">showTotal</span>: <span class="hljs-function">(<span class="hljs-params">total</span>) =&gt;</span> <span class="hljs-string">`共<span class="hljs-subst">$&#123;total&#125;</span>条`</span>,<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">doTableChange</span> = (<span class="hljs-params"><span class="hljs-attr">page</span>: <span class="hljs-built_in">any</span></span>) =&gt; &#123;<br>  searchParams.<span class="hljs-property">current</span> = page.<span class="hljs-property">current</span><br>  searchParams.<span class="hljs-property">pageSize</span> = page.<span class="hljs-property">pageSize</span><br>  <span class="hljs-title function_">fetchData</span>()<br>&#125;<br><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">fetchData</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">listPictureByPageUsingPost</span>(&#123;<br>    ...searchParams<br>  &#125;)<br><br>  <span class="hljs-keyword">if</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>) &#123;<br>    dataList.<span class="hljs-property">value</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-property">records</span> ?? []<br>    total.<span class="hljs-property">value</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-property">total</span> ?? <span class="hljs-number">0</span><br><br>  &#125;<span class="hljs-keyword">else</span> &#123;<br>    message.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;获取分页数据失败&#x27;</span> + res.<span class="hljs-property">data</span>.<span class="hljs-property">message</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">doSearch</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  searchParams.<span class="hljs-property">current</span> = <span class="hljs-number">1</span><br>  <span class="hljs-title function_">fetchData</span>()<br>&#125;<br><br><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">fetchData</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><p>注意：和用户管理不同的是</p><ul><li>searchParams 参数不一致，需要让最新的图片在上面</li><li>调用接口不同，调用<code>listPictureByPageUsingPost</code>和<code>deletePictureUsingPost</code>接口</li><li>不需要删除图片的接口</li></ul><p>3、更新前端代码，按照自定义列展示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template #bodyCell=&quot;&#123; column, record &#125;&quot;&gt;  <br>  &lt;template v-if=&quot;column.dataIndex === &#x27;url&#x27;&quot;&gt;  <br>    &lt;a-image :src=&quot;record.url&quot; :width=&quot;120&quot; /&gt;  <br>  &lt;/template&gt;  <br>  &lt;!-- 标签 --&gt;  <br>  &lt;template v-if=&quot;column.dataIndex === &#x27;tags&#x27;&quot;&gt;  <br>    &lt;a-space wrap&gt;  <br>      &lt;a-tag v-for=&quot;tag in JSON.parse(record.tags || &#x27;[]&#x27;)&quot; :key=&quot;tag&quot;&gt;&#123;&#123; tag &#125;&#125;&lt;/a-tag&gt;  <br>    &lt;/a-space&gt;  <br>  &lt;/template&gt;  <br>  &lt;!-- 图片信息 --&gt;  <br>  &lt;template v-if=&quot;column.dataIndex === &#x27;picInfo&#x27;&quot;&gt;  <br>    &lt;div&gt;格式：&#123;&#123; record.picFormat &#125;&#125;&lt;/div&gt;  <br>    &lt;div&gt;宽度：&#123;&#123; record.picWidth &#125;&#125;&lt;/div&gt;  <br>    &lt;div&gt;高度：&#123;&#123; record.picHeight &#125;&#125;&lt;/div&gt;  <br>    &lt;div&gt;宽高比：&#123;&#123; record.picScale &#125;&#125;&lt;/div&gt;  <br>    &lt;div&gt;大小：&#123;&#123; (record.picSize / 1024).toFixed(2) &#125;&#125;KB&lt;/div&gt;  <br>  &lt;/template&gt;  <br>  &lt;template v-else-if=&quot;column.dataIndex === &#x27;createTime&#x27;&quot;&gt;  <br>    &#123;&#123; dayjs(record.createTime).format(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;  <br>  &lt;/template&gt;  <br>  &lt;template v-else-if=&quot;column.dataIndex === &#x27;editTime&#x27;&quot;&gt;  <br>    &#123;&#123; dayjs(record.editTime).format(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;  <br>  &lt;/template&gt;  <br>  &lt;template v-else-if=&quot;column.key === &#x27;action&#x27;&quot;&gt;  <br>    &lt;a-button type=&quot;link&quot; danger @click=&quot;doDelete(record.id)&quot;&gt;删除&lt;/a-button&gt;  <br>  &lt;/template&gt;  <br>&lt;/template&gt;<br><br></code></pre></td></tr></table></figure><p>由于后端返回的是字符串类型，需要使用<code>Json.parse</code>转化为JS数组</p><p>4）开发搜索表单</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KR云图库Day03</title>
    <link href="/2025/07/13/%E4%BA%91%E5%9B%BE%E5%BA%9303/"/>
    <url>/2025/07/13/%E4%BA%91%E5%9B%BE%E5%BA%9303/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>最后更新于：2025/7/13 PM</p>          </div><h1 id="闲话微叙">闲话微叙</h1><p>昨天和朋友时隔多年小聚，休息一天</p><p>我发现我认知中的和朋友聚会的场所永远都是网吧，还没怎么去过别的地方</p><p>可能是我比较喜欢网吧吧，吹着空调打着游戏岂不美哉！</p><p>不多说了，今天让我们来完成图片模块(后端部分)</p><p>Let us go！！！</p><h2 id="一需求分析">一、需求分析</h2><p>1）管理员</p><ul><li>图片上传、创建</li><li>图片管理</li><li>修改图片</li></ul><p>2）用户</p><ul><li>主页查看搜索图片</li><li>图片详情</li><li>图片下载</li></ul><h2 id="二方案设计">二、方案设计</h2><p>1、图片库表设计</p><p>2、图片上传和下载如何实现</p><p>3、创建图片流程</p><p>4、如何解析图片数据</p><h3 id="库表设计">库表设计</h3><p>像<code>user</code>表一样，我们同样要存储图片到本地，接下来我们将设计<code>picture</code>表</p><p>为了保证和教程一致，我直接拷贝</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 图片表  </span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> picture  <br>(  <br>    id           <span class="hljs-type">bigint</span> auto_increment comment <span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-keyword">primary</span> key,  <br>    url          <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>)                       <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;图片 url&#x27;</span>,  <br>    name         <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>)                       <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;图片名称&#x27;</span>,  <br>    introduction <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>)                       <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;简介&#x27;</span>,  <br>    category     <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>)                        <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;分类&#x27;</span>,  <br>    tags         <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>)                      <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;标签（JSON 数组）&#x27;</span>,  <br>    picSize      <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;图片体积&#x27;</span>,  <br>    picWidth     <span class="hljs-type">int</span>                                <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;图片宽度&#x27;</span>,  <br>    picHeight    <span class="hljs-type">int</span>                                <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;图片高度&#x27;</span>,  <br>    picScale     <span class="hljs-keyword">double</span>                             <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;图片宽高比例&#x27;</span>,  <br>    picFormat    <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>)                        <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;图片格式&#x27;</span>,  <br>    userId       <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建用户 id&#x27;</span>,  <br>    createTime   datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,  <br>    editTime     datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;编辑时间&#x27;</span>,  <br>    updateTime   datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,  <br>    isDelete     tinyint  <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;是否删除&#x27;</span>,  <br>    INDEX idx_name (name),                 <span class="hljs-comment">-- 提升基于图片名称的查询性能  </span><br>    INDEX idx_introduction (introduction), <span class="hljs-comment">-- 用于模糊搜索图片简介  </span><br>    INDEX idx_category (category),         <span class="hljs-comment">-- 提升基于分类的查询性能  </span><br>    INDEX idx_tags (tags),                 <span class="hljs-comment">-- 提升基于标签的查询性能  </span><br>    INDEX idx_userId (userId)              <span class="hljs-comment">-- 提升基于用户 ID 的查询性能  </span><br>) comment <span class="hljs-string">&#x27;图片&#x27;</span> <span class="hljs-keyword">collate</span> <span class="hljs-operator">=</span> utf8mb4_unicode_ci;<br><br></code></pre></td></tr></table></figure><p>针对于图片我们需要的字段往往包含，图片名称、url、简介、标签、分类、格式方面、创建用户、创建更新时间以及逻辑删除</p><p>为了方便我们通过名称、标签、分类、创建用户、简介查询，我们需要为其设置索引</p><h3 id="图片上传下载如何实现">图片上传、下载如何实现？</h3><p><strong>思考图片上传到哪里？从哪里下载？</strong></p><p>最简单的方式是使用Java API将图片上传至后端JavaWeb服务器，ex：Tomcat</p><p>显然这是不现实的，像tomcat服务器这种往往空间都是有限的，在更换服务器资源迁移是很费劲的，只能通过文件管理器管理</p><p>所以这种简单的方式只适用于存储临时文件</p><p>这里我们使用第三方工具，腾讯云<ahref="https://console.cloud.tencent.com/cos">对象存储COS</a>，或者阿里云(OSS)</p><p>COS 在存储图片的同时，为每一张图片分配URL对应数据库中URL</p><p>购买资源包，这里不掩饰了，第一次购买只需要1元</p><h3 id="创建图片流程">创建图片流程</h3><p>上传图片 + 图片保存至数据库</p><p>这里主要包含两种形式</p><p>1）上传图片后，生成URL后用户填写任意信息，点击提交后保存数据库</p><p>2）上传图片，系统自动生成其他信息，无需点击提交，直接保存至数据库，后续再创建已有图片，在此基础上修改</p><p>方案一固然简单，但是用户不提交，图片资源残留，浪费空间，所以我们选择第二种方式</p><h3 id="如何解析图片信息">如何解析图片信息</h3><p>两种形式</p><p>1）Java 自带处理图片库</p><p>2）第三方云存储</p><p>腾讯云COS提供了数据万象CI 直接提取图片元数据</p><p><ahref="https://console.cloud.tencent.com/ci">数据万象</a>需要自己开通</p><h2 id="三后端开发">三、后端开发</h2><h3 id="创建使用存储桶">创建使用存储桶</h3><p>所属地域选择离自己近的，因为作者是辽宁的，这里选择北京</p><p>权限控制方面选择公有读私有写，保证用户可以查看公有图片，但是无法查看存储桶中的资源</p><p>默认告警打开，对象存储和访问是计费的，防止出现扣费不知道的情况</p><figure><img src="/img/pictureLibrary/image-20250713115045934.png"alt="image-20250713115045934" /><figcaption aria-hidden="true">image-20250713115045934</figcaption></figure><p>这里直接下一步</p><figure><img src="/img/pictureLibrary/image-20250713115432785.png"alt="image-20250713115432785" /><figcaption aria-hidden="true">image-20250713115432785</figcaption></figure><p>下一步点击创建成功即可</p><h4 id="手动上传图片测试">手动上传图片测试</h4><p>可以看到COS为我们上传的图片分配了一个URL</p><figure><img src="/img/pictureLibrary/image-20250713120032390.png"alt="image-20250713120032390" /><figcaption aria-hidden="true">image-20250713120032390</figcaption></figure><p>注意如果使用默认域名会报高风险的提示，因为默认域名一旦设置无法更改，暴露出去被攻击后，只能换一个存储桶了，后续讲该如何解决。</p><h3 id="后端操作cos">后端操作COS</h3><p>现在我们已经配置好了COS，该如何去操作他呢？</p><p>没错，需要我们引入COS 的Java SDK，去使用内部各式各样的方法</p><p>可以参考<ahref="https://cloud.tencent.com/document/product/436/10199">快速上手</a></p><h4 id="初始化客户端">1、初始化客户端</h4><p>1）引入COS 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 腾讯云 cos 服务 --&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.qcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cos_api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.6.227<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>2）编写CosClientConfig类，并创建一个COS客户端的Bean</p><p>官方给出了两种CosClient的写法，这里我们使用永久密钥</p><figure><img src="/img/pictureLibrary/image-20250713122011086.png"alt="image-20250713122011086" /><figcaption aria-hidden="true">image-20250713122011086</figcaption></figure><p>参考示例代码，我们实际上只需要传入secretId、secretKey以及根据region创建的clientConfig，就可以创建最后的cosClient</p><p><code>@ConfigurationProperties(prefix = "cos.client")</code>会从配置文件<code>application.yml</code>中读取所有以<code>cos.client</code>开头的属性，将属性注入到CosClientConfig类中对应的字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;cos.client&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CosClientConfig</span> &#123;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 域名  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> String host;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * secretId  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> String secretId;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 密钥（注意不要泄露）  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> String secretKey;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 区域  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> String region;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 桶名  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> String bucket;  <br>  <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> COSClient <span class="hljs-title function_">cosClient</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 初始化用户身份信息(secretId, secretKey)  </span><br>        <span class="hljs-type">COSCredentials</span> <span class="hljs-variable">cred</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicCOSCredentials</span>(secretId, secretKey);<br>        <span class="hljs-comment">// 设置bucket的区域, COS地域的简称请参照 https://www.qcloud.com/document/product/436/6224  </span><br>        <span class="hljs-type">ClientConfig</span> <span class="hljs-variable">clientConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientConfig</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Region</span>(region));<br>        <span class="hljs-comment">// 生成cos客户端  </span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">COSClient</span>(cred, clientConfig);  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>3）填写配置文件</p><p>为了防止敏感信息泄漏，我们可以新建<code>application-local.yml</code>，并在<code>.gitignore</code>中忽略该文件提交</p><p><code>.gitignore</code>翻译过来就是git忽略，可以帮助我们在git提交的时候忽略某些特定文件</p><figure><img src="/img/pictureLibrary/image-20250713122849681.png"alt="image-20250713122849681" /><figcaption aria-hidden="true">image-20250713122849681</figcaption></figure><p>application-local.yml配置如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 对象存储配置（需要从腾讯云获取）  </span><br><span class="hljs-attr">cos:</span>  <br>  <span class="hljs-attr">client:</span>  <br>    <span class="hljs-attr">host:</span> <span class="hljs-string">xxx</span>  <br>    <span class="hljs-attr">secretId:</span> <span class="hljs-string">xxx</span>  <br>    <span class="hljs-attr">secretKey:</span> <span class="hljs-string">xxx</span>  <br>    <span class="hljs-attr">region:</span> <span class="hljs-string">xxx</span>  <br>    <span class="hljs-attr">bucket:</span> <span class="hljs-string">xxx</span><br><br></code></pre></td></tr></table></figure><p>如何获取各个信息呢</p><p>host</p><p>点击桶详情</p><figure><img src="/img/pictureLibrary/image-20250713123744582.png"alt="image-20250713123744582" /><figcaption aria-hidden="true">image-20250713123744582</figcaption></figure><p>secretID、secretKey参考<ahref="https://console.cloud.tencent.com/cam/capi">https://console.cloud.tencent.com/cam/capi</a>，新建密钥，复制粘贴</p><p>region参考<ahref="https://cloud.tencent.com/document/product/436/6224">https://cloud.tencent.com/document/product/436/6224</a>根据创建的桶选择地域简称</p><p>bucket 名称</p><figure><img src="/img/pictureLibrary/image-20250713123953119.png"alt="image-20250713123953119" /><figcaption aria-hidden="true">image-20250713123953119</figcaption></figure><h4 id="通用功能类">2、通用功能类</h4><p>新建manager包，创建CosManager类，提供文件上传、文件下载等功能</p><p>注入对象存储配置类和COSClient，用于与COS交互</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CosManager</span> &#123;  <br>  <br>    <span class="hljs-meta">@Resource</span>  <br>    <span class="hljs-keyword">private</span> CosClientConfig cosClientConfig;  <br>  <br>    <span class="hljs-meta">@Resource</span>  <br>    <span class="hljs-keyword">private</span> COSClient cosClient;  <br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="文件上传">3、文件上传</h4><p>参考<ahref="https://cloud.tencent.com/document/product/436/65935">文档</a>，对象上传部分</p><p>这里我们选择简单接口里的上传本地文件</p><figure><img src="/img/pictureLibrary/image-20250713125018437.png"alt="image-20250713125018437" /><figcaption aria-hidden="true">image-20250713125018437</figcaption></figure><p>通过观察，我们会发现最核心的代码只有两句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">PutObjectRequest</span> <span class="hljs-variable">putObjectRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PutObjectRequest</span>(bucketName, key, localFile);<br><span class="hljs-type">PutObjectResult</span> <span class="hljs-variable">putObjectResult</span> <span class="hljs-operator">=</span> cosClient.putObject(putObjectRequest);<br></code></pre></td></tr></table></figure><p>1）CosManager新增上传对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> PutObjectResult <span class="hljs-title function_">putObject</span><span class="hljs-params">(String key, File file)</span> &#123;<br>    <span class="hljs-type">PutObjectRequest</span> <span class="hljs-variable">putObjectRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PutObjectRequest</span>(cosClientConfig.getBucket(), key, file);<br>    <span class="hljs-keyword">return</span> cosClient.putObject(putObjectRequest);<br>&#125;<br></code></pre></td></tr></table></figure><p>2）创建FileController 测试接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AuthCheck(mustRole = UserConstant.ADMIN_ROLE)</span><br>    <span class="hljs-meta">@PostMapping(&quot;/test/upload&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;String&gt; <span class="hljs-title function_">testUploadFile</span><span class="hljs-params">(<span class="hljs-meta">@RequestPart(&quot;file&quot;)</span> MultipartFile multipartFile)</span> &#123;<br>        <span class="hljs-comment">//文件目录</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> multipartFile.getOriginalFilename();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filepath</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;/test/%s&quot;</span>,fileName);<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//上传文件</span><br>            file = File.createTempFile(filepath,<span class="hljs-literal">null</span>);<br>            multipartFile.transferTo(file);<br>            cosManager.putObject(filepath,file);<br><br>            <span class="hljs-keyword">return</span> ResultUtils.success(filepath);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;file upload error&quot;</span> + filepath,e);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.SYSTEM_ERROR,<span class="hljs-string">&quot;上传失败&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(file != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">del</span> <span class="hljs-operator">=</span> file.delete();<br>                <span class="hljs-keyword">if</span>(!del) &#123;<br>                    log.error(<span class="hljs-string">&quot;file delete error,filepath=&#123;&#125;&quot;</span>,filepath);<br>                &#125;<br>            &#125;<br>        &#125;<br><br><br>    &#125;<br></code></pre></td></tr></table></figure><p>这里我起初对<code>file = File.createTempFile(filepath,null);</code>这串代码有疑问，不理解参数的含义</p><p>通过查看源码我们可以发现createTempFile可以两个参数也可以三个参数</p><p><code>createTempFile(prefix, suffix,directory)</code>参数分别为前缀后缀以及临时文件存放在哪里(默认根据操作系统存放指定路径)</p><p>例如prefix = "hhhh",sufffix = ".txt"结果就是<code>hhhh.txt</code></p><p>对比<code>multipartFile.transferTo(file);</code>前后，我们会发现在此之前File.length()是0，而之后就是你传入文件的字节大小了</p><p>应用<code>application-local.yml</code>配置</p><figure><img src="/img/pictureLibrary/image-20250713133454692.png"alt="image-20250713133454692" /><figcaption aria-hidden="true">image-20250713133454692</figcaption></figure><p>打开Swagger，测试文件上传</p><figure><img src="/img/pictureLibrary/image-20250713133724807.png"alt="image-20250713133724807" /><figcaption aria-hidden="true">image-20250713133724807</figcaption></figure><h4 id="文件下载">4、文件下载</h4><p>COS主要提供三种下载文件的方式</p><p>1）将COS文件存储到后端服务器</p><p>2）获取文件下载输入流</p><p>3）URL下载</p><p>针对于我们的项目，图片是公开的，直接使用第三种方式</p><p>同理，观察示例代码，提取核心部分</p><figure><img src="/img/pictureLibrary/image-20250713140240788.png"alt="image-20250713140240788" /><figcaption aria-hidden="true">image-20250713140240788</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">GetObjectRequest</span> <span class="hljs-variable">getObjectRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetObjectRequest</span>(bucketName, key);<br><span class="hljs-type">COSObject</span> <span class="hljs-variable">cosObject</span> <span class="hljs-operator">=</span> cosClient.getObject(getObjectRequest);<br></code></pre></td></tr></table></figure><p>1）CosManager新增下载对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> COSObject <span class="hljs-title function_">getObject</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-type">GetObjectRequest</span> <span class="hljs-variable">getObjectRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetObjectRequest</span>(cosClientConfig.getBucket(), key);<br>        <span class="hljs-keyword">return</span> cosClient.getObject(getObjectRequest);<br>    &#125;<br></code></pre></td></tr></table></figure><p>2）FileController测试下载对象接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * 测试文件下载  </span><br><span class="hljs-comment"> *  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> filepath 文件路径  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response 响应对象  </span><br><span class="hljs-comment"> */</span>  <br><span class="hljs-meta">@AuthCheck(mustRole = UserConstant.ADMIN_ROLE)</span>  <br><span class="hljs-meta">@GetMapping(&quot;/test/download/&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDownloadFile</span><span class="hljs-params">(String filepath, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>    <span class="hljs-type">COSObjectInputStream</span> <span class="hljs-variable">cosObjectInput</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;  <br>    <span class="hljs-keyword">try</span> &#123;  <br>      <span class="hljs-comment">//根据路径获取COS对象</span><br>        <span class="hljs-type">COSObject</span> <span class="hljs-variable">cosObject</span> <span class="hljs-operator">=</span> cosManager.getObject(filepath);  <br>      <span class="hljs-comment">//将对象文件输入流</span><br>        cosObjectInput = cosObject.getObjectContent();  <br>        <span class="hljs-comment">// 处理下载到的流  </span><br>        <span class="hljs-type">byte</span>[] bytes = IOUtils.toByteArray(cosObjectInput);  <br>        <span class="hljs-comment">// 设置响应头  </span><br>        response.setContentType(<span class="hljs-string">&quot;application/octet-stream;charset=UTF-8&quot;</span>);  <br>        response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment; filename=&quot;</span> + filepath);  <br>        <span class="hljs-comment">// 写入响应  </span><br>        response.getOutputStream().write(bytes);  <br>        response.getOutputStream().flush();  <br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;  <br>        log.error(<span class="hljs-string">&quot;file download error, filepath = &quot;</span> + filepath, e);  <br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.SYSTEM_ERROR, <span class="hljs-string">&quot;下载失败&quot;</span>);  <br>    &#125; <span class="hljs-keyword">finally</span> &#123;  <br>        <span class="hljs-keyword">if</span> (cosObjectInput != <span class="hljs-literal">null</span>) &#123;  <br>            cosObjectInput.close();  <br>        &#125;  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>打开Swagger，调用该接口</p><figure><img src="/img/pictureLibrary/image-20250713154408587.png"alt="image-20250713154408587" /><figcaption aria-hidden="true">image-20250713154408587</figcaption></figure><p>根据状态吗和大小可以判断已经下载成功了，但是由于我们并没有指定本地路径，所以暂时什么都看不到</p><h3 id="图片代码生成">图片代码生成</h3><p>同理，利用Mybatis-plusX生成图片的基础层级结构</p><p>优化Picture实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableId(type = IdType.ASSIGN_ID)</span><br><span class="hljs-keyword">private</span> Long id;<br><br><span class="hljs-meta">@TableLogic</span><br><span class="hljs-keyword">private</span> Integer isDelete;<br></code></pre></td></tr></table></figure><h3 id="图片上传">图片上传</h3><h4 id="图片上传封装类">1）图片上传封装类</h4><p>新建<code>/dto/picture</code>，由于支持重复上传，我们需要保留图片ID</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PictureUploadRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 图片 id（用于修改）  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> Long id;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>在我们上传成功后，需要返回给前端返回上传成功的信息</p><p>编写PictureVO，同时提供 PictureVO和Picture互相转换的函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PictureVO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * id  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> Long id;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 图片 url  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> String url;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 图片名称  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> String name;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 简介  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> String introduction;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 标签  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> List&lt;String&gt; tags;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 分类  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> String category;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 文件体积  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> Long picSize;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 图片宽度  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> Integer picWidth;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 图片高度  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> Integer picHeight;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 图片比例  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> Double picScale;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 图片格式  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> String picFormat;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 用户 id  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> Long userId;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 创建时间  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> Date createTime;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 编辑时间  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> Date editTime;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 更新时间  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> Date updateTime;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 创建用户信息  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> UserVO user;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 封装类转对象  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Picture <span class="hljs-title function_">voToObj</span><span class="hljs-params">(PictureVO pictureVO)</span> &#123;  <br>        <span class="hljs-keyword">if</span> (pictureVO == <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>        &#125;  <br>        <span class="hljs-type">Picture</span> <span class="hljs-variable">picture</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Picture</span>();  <br>        BeanUtils.copyProperties(pictureVO, picture);  <br>        <span class="hljs-comment">// 类型不同，需要转换  </span><br>        picture.setTags(JSONUtil.toJsonStr(pictureVO.getTags()));  <br>        <span class="hljs-keyword">return</span> picture;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 对象转封装类  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PictureVO <span class="hljs-title function_">objToVo</span><span class="hljs-params">(Picture picture)</span> &#123;  <br>        <span class="hljs-keyword">if</span> (picture == <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>        &#125;  <br>        <span class="hljs-type">PictureVO</span> <span class="hljs-variable">pictureVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PictureVO</span>();  <br>        BeanUtils.copyProperties(picture, pictureVO);  <br>        <span class="hljs-comment">// 类型不同，需要转换  </span><br>        pictureVO.setTags(JSONUtil.toList(picture.getTags(), String.class));  <br>        <span class="hljs-keyword">return</span> pictureVO;  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="通用文件上传服务类">2）通用文件上传服务类</h4><p>虽然说之前编写了COS对象存储操作管理类CosManager，但是没有任何校验机制，需要我们指定</p><p>这里我们编写图片上传服务FileManager，该服务提供图片上传后返回信息的接口</p><p>FileManager可以理解成服务实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileManager</span> &#123;  <br>  <br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> CosClientConfig cosClientConfig;<br>  <br>    <span class="hljs-meta">@Resource</span>  <br>    <span class="hljs-keyword">private</span> CosManager cosManager;  <br>  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>图片解析结果包装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadPictureResult</span> &#123;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 图片地址  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> String url;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 图片名称  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> String picName;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 文件体积  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> Long picSize;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 图片宽度  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> picWidth;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 图片高度  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> picHeight;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 图片宽高比  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> Double picScale;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 图片格式  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-keyword">private</span> String picFormat;  <br>  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>采用数据万象，增添<ahref="https://cloud.tencent.com/document/product/436/55377">持久化处理</a></p><figure><img src="/img/pictureLibrary/image-20250713160825149.png"alt="image-20250713160825149" /><figcaption aria-hidden="true">image-20250713160825149</figcaption></figure><p>核心代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">PutObjectRequest</span> <span class="hljs-variable">putObjectRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PutObjectRequest</span>(bucketName, key, localFile);<br><span class="hljs-type">PicOperations</span> <span class="hljs-variable">picOperations</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PicOperations</span>();<br><br>putObjectRequest.setPicOperations(picOperations);<br><br><span class="hljs-type">PutObjectResult</span> <span class="hljs-variable">putObjectResult</span> <span class="hljs-operator">=</span> cosClient.putObject(putObjectRequest);<br></code></pre></td></tr></table></figure><p>CosManager 更新方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//上传对象</span><br><span class="hljs-keyword">public</span> PutObjectResult <span class="hljs-title function_">putPictureObject</span><span class="hljs-params">(String key, File file)</span> &#123;<br>  <span class="hljs-type">PutObjectRequest</span> <span class="hljs-variable">putObjectRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PutObjectRequest</span>(cosClientConfig.getBucket(), key, file);<br>  <span class="hljs-type">PicOperations</span> <span class="hljs-variable">picOperations</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PicOperations</span>();<br><br>  picOperations.setIsPicInfo(<span class="hljs-number">1</span>);<br><br>  putObjectRequest.setPicOperations(picOperations);<br><br>  <span class="hljs-keyword">return</span> cosClient.putObject(putObjectRequest);<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>针对于之前的putObject有什么区别吗？</strong></p><blockquote><p>putPictureObject有图片处理的机制，以及可以返回图片元信息，后续允许图片裁剪、缩放等功能</p></blockquote><h4 id="filemanager编写图片上传">3）FileManager编写图片上传</h4><p>开始前讲一下MultipartFile和File的关系</p><p>在浏览器上传本地文件后，会在请求头中添加以下代码</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Content-Disposition: form-data; <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;file&quot;</span>; <span class="hljs-attribute">filename</span>=<span class="hljs-string">&quot;example.jpg&quot;</span><br></code></pre></td></tr></table></figure><p>这串代码可以通过Spring的MultipartFile解析成为File对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MultipartFile</span> &#123;<br>    String <span class="hljs-title function_">getOriginalFilename</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 获取客户端原始文件名</span><br>    InputStream <span class="hljs-title function_">getInputStream</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 获取文件流</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">transferTo</span><span class="hljs-params">(File dest)</span>;   <span class="hljs-comment">// 转存为本地文件</span><br>    <span class="hljs-comment">// ...其他方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>上传图片</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> UploadPictureResult <span class="hljs-title function_">uploadPicture</span><span class="hljs-params">(MultipartFile multipartFile, String uploadPrefix)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//检查文件是否合法</span><br>        validPicture(multipartFile);<br><br>        <span class="hljs-comment">//图片上传地址</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> RandomUtil.randomString(<span class="hljs-number">16</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> multipartFile.getOriginalFilename();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uploadFilename</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%s_%s.%s&quot;</span>, DateUtil.formatDate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()), uuid, FileUtil.getSuffix(originalFilename));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uploadPath</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;/%s/%s&quot;</span>, uploadPrefix, uploadFilename);<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            file = File.createTempFile(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;.png&quot;</span>);<br>            multipartFile.transferTo(file);<br><br>            <span class="hljs-comment">//上传图片</span><br>            <span class="hljs-type">PutObjectResult</span> <span class="hljs-variable">putObjectResult</span> <span class="hljs-operator">=</span> cosManager.putPictureObject(uploadPath, file);<br>            <span class="hljs-type">ImageInfo</span> <span class="hljs-variable">imageInfo</span> <span class="hljs-operator">=</span> putObjectResult.getCiUploadResult().getOriginalInfo().getImageInfo();<br><br>            <span class="hljs-comment">//封装返回结果</span><br>            <span class="hljs-type">UploadPictureResult</span> <span class="hljs-variable">uploadPictureResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UploadPictureResult</span>();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">picWidth</span> <span class="hljs-operator">=</span> imageInfo.getWidth();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">picHeight</span> <span class="hljs-operator">=</span> imageInfo.getHeight();<br>            <span class="hljs-type">double</span> <span class="hljs-variable">picScale</span> <span class="hljs-operator">=</span> NumberUtil.round(picWidth * <span class="hljs-number">1.0</span> / picHeight, <span class="hljs-number">2</span>).doubleValue();<br>            uploadPictureResult.setPicName(FileUtil.mainName(originalFilename));<br>            uploadPictureResult.setPicSize(FileUtil.size(file));<br>            uploadPictureResult.setPicWidth(picWidth);<br>            uploadPictureResult.setPicHeight(picHeight);<br>            uploadPictureResult.setPicScale(picScale);<br>            uploadPictureResult.setPicFormat(imageInfo.getFormat());<br>            uploadPictureResult.setUrl(cosClientConfig.getHost() + <span class="hljs-string">&quot;/&quot;</span> + uploadPath);<br><br>            <span class="hljs-keyword">return</span> uploadPictureResult;<br><br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;上传图片到COS失败&quot;</span>,e);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.SYSTEM_ERROR,<span class="hljs-string">&quot;上传失败&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            deletePicture(file);<br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">validPicture</span><span class="hljs-params">(MultipartFile multipartFile)</span> &#123;<br>        ThrowUtils.throwIf(multipartFile == <span class="hljs-literal">null</span>, ErrorCode.PARAMS_ERROR, <span class="hljs-string">&quot;文件不能为空&quot;</span>);<br><br>        <span class="hljs-comment">//1.校验文件大小</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">fileSize</span> <span class="hljs-operator">=</span> multipartFile.getSize();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">ONE_MB</span> <span class="hljs-operator">=</span> <span class="hljs-number">1024</span> * <span class="hljs-number">1024L</span>;<br>        ThrowUtils.throwIf(fileSize &gt; <span class="hljs-number">2</span> * ONE_MB, ErrorCode.PARAMS_ERROR, <span class="hljs-string">&quot;文件大小不能大于2MB&quot;</span>);<br>        <span class="hljs-comment">//2.检查文件后缀</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileSuffix</span> <span class="hljs-operator">=</span> FileUtil.getSuffix(multipartFile.getOriginalFilename());<br><br>        <span class="hljs-comment">//允许上传的后缀</span><br>        <span class="hljs-keyword">final</span> List&lt;String&gt; ALLOW_FORMAT_LIST = Arrays.asList(<span class="hljs-string">&quot;jpeg&quot;</span>, <span class="hljs-string">&quot;jpg&quot;</span>, <span class="hljs-string">&quot;png&quot;</span>, <span class="hljs-string">&quot;webp&quot;</span>);<br><br>        ThrowUtils.throwIf(!ALLOW_FORMAT_LIST.contains(fileSuffix), ErrorCode.PARAMS_ERROR, <span class="hljs-string">&quot;文件类型出错&quot;</span>);<br><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deletePicture</span><span class="hljs-params">(File file)</span> &#123;<br>        <span class="hljs-keyword">if</span> (file == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">deleteResult</span> <span class="hljs-operator">=</span> file.delete();<br>        <span class="hljs-keyword">if</span>(!deleteResult) &#123;<br>            log.error(<span class="hljs-string">&quot;file delete error&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>乍眼一看有点复杂，其实还好这里简单解释一下代码</p><p>文件名构造 = 日期 + 随机数 + 原始图片后缀</p><p>路径 = / + 用户传入的路径 + / + 文件名</p><p>首先应该校验文件大小和文件格式是否满足条件</p><p>内部代码将传入文件放入临时文件，上传完图片后，数据万象解析出图片信息，将信息填充到上传文件返回结果通用类，文件用完后占用空间，最后需要删除</p><p>我觉得最难的可能是Hutool工具类中的方法，有点恶心，有点多，虽然说这个东西忘了就查，但是常用的还是简单记一下</p><h4 id="服务开发">4）服务开发</h4><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">PictureVO <span class="hljs-title function_">uploadPicture</span><span class="hljs-params">(MultipartFile file, PictureUploadRequest pictureUploadRequest, User loginUser)</span>;<br></code></pre></td></tr></table></figure><p>接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PictureVO <span class="hljs-title function_">uploadPicture</span><span class="hljs-params">(MultipartFile multipartFile, PictureUploadRequest pictureUploadRequest, User loginUser)</span> &#123;<br>        ThrowUtils.throwIf(loginUser == <span class="hljs-literal">null</span>, ErrorCode.NO_AUTH_ERROR);<br><br><br>        <span class="hljs-comment">//判断是新增图片还是更新图片</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">pictureId</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span>(pictureUploadRequest != <span class="hljs-literal">null</span>) &#123;<br>            pictureId = pictureUploadRequest.getId();<br>        &#125;<br><br>        <span class="hljs-comment">//更新图片</span><br>        <span class="hljs-keyword">if</span>(pictureId != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">exists</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lambdaQuery()<br>                    .eq(picture -&gt; picture.getId(),pictureId)<br>                    .exists();<br><br>            ThrowUtils.throwIf(!exists,ErrorCode.NOT_FOUND_ERROR,<span class="hljs-string">&quot;图片不存在&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//用户ID划分目录</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">uploadPathPrefix</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;public/%s&quot;</span>,loginUser.getId());<br>        <span class="hljs-type">UploadPictureResult</span> <span class="hljs-variable">uploadPictureResult</span> <span class="hljs-operator">=</span> fileManager.uploadPicture(multipartFile,uploadPathPrefix);<br><br>        <span class="hljs-comment">//构造入库信息</span><br>        <span class="hljs-type">Picture</span> <span class="hljs-variable">picture</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Picture</span>();<br>        picture.setUrl(uploadPictureResult.getUrl());<br>        picture.setName(uploadPictureResult.getPicName());<br>        picture.setPicSize(uploadPictureResult.getPicSize());<br>        picture.setPicWidth(uploadPictureResult.getPicWidth());<br>        picture.setPicHeight(uploadPictureResult.getPicHeight());<br>        picture.setPicScale(uploadPictureResult.getPicScale());<br>        picture.setPicFormat(uploadPictureResult.getPicFormat());<br>        picture.setUserId(loginUser.getId());<br><br><br>        <span class="hljs-comment">//如果图片是更新</span><br>        <span class="hljs-keyword">if</span>(pictureId != <span class="hljs-literal">null</span>) &#123;<br>            picture.setId(pictureId);<br>            picture.setEditTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        &#125;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.saveOrUpdate(picture);<br>        ThrowUtils.throwIf(!res, ErrorCode.OPERATION_ERROR,<span class="hljs-string">&quot;图片上传失败&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> PictureVO.objToVo(picture);<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>注意点</p><p>1、这里我们使用/public/用户ID作为文件目录</p><p>2、通过检查传入参数PictureID是否有与之对应的图片，来决定是更新还是创建</p><h4 id="接口开发">5）接口开发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;PictureVO&gt; <span class="hljs-title function_">uploadPicture</span><span class="hljs-params">(<span class="hljs-meta">@RequestPart(&quot;file&quot;)</span> MultipartFile multipartFile, PictureUploadRequest pictureUploadRequest, HttpServletRequest request)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> userService.getLoginUser(request);<br><br>    <span class="hljs-type">PictureVO</span> <span class="hljs-variable">pictureVO</span> <span class="hljs-operator">=</span> pictureService.uploadPicture(multipartFile, pictureUploadRequest, loginUser);<br><br>    <span class="hljs-keyword">return</span> ResultUtils.success(pictureVO);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>当我们上传图片过大的时候，会报错。这是因为Tomcat限制了请求文件上传的大小，可以更改<code>application.yml</code>解除限制</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span>  <br>  <span class="hljs-comment"># 开放更大的文件上传体积  </span><br>  <span class="hljs-attr">servlet:</span>  <br>    <span class="hljs-attr">multipart:</span>  <br>      <span class="hljs-attr">max-file-size:</span> <span class="hljs-string">10MB</span><br></code></pre></td></tr></table></figure><p>测试，成功！！！</p><p>如果新建图片的话，保证<code>PictureUploadRequest</code>为空，只有当更新图片才传入ID</p><figure><img src="/img/pictureLibrary/image-20250713173905563.png"alt="image-20250713173905563" /><figcaption aria-hidden="true">image-20250713173905563</figcaption></figure><p>扩展</p><p>当然在我们文件上传的时候，总是要创建临时文件赋值。为了提高性能可以通过流的方式将请求的文件上传到COS</p><h3 id="图片管理">图片管理</h3><h4 id="需求分析">需求分析</h4><ul><li>根据ID删除图片(管理员)</li><li>更新图片(管理员)</li><li>分页获取图片列表(管理员)</li><li>根据ID获取图片(管理员)</li><li>分页获取图片列表(需要脱敏)</li><li>修改图片</li></ul><h4 id="请求类封装">请求类封装</h4><p>1）图片更新请求封装类(管理员)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PictureUpdateRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 图片名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 简介</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String introduction;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String category;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 标签</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; tags;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2）图片更新请求封装类(用户)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PictureEditRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 图片名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 简介</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String introduction;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String category;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 标签</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; tags;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>3）图片分页查询请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EqualsAndHashCode(callSuper = true)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PictureQueryRequest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PageRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 图片名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 简介</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String introduction;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String category;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 标签</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; tags;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文件体积</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Long picSize;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 图片宽度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer picWidth;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 图片高度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer picHeight;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 图片比例</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Double picScale;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 图片格式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String picFormat;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 搜索词（同时搜名称、简介等）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String searchText;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户 id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Long userId;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="服务开发-1">服务开发</h4><p>1）由于需要频繁验证用户身份，userService新增isAdmin实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAdmin</span><span class="hljs-params">(User user)</span> &#123;  <br>    <span class="hljs-keyword">return</span> user != <span class="hljs-literal">null</span> &amp;&amp; UserRoleEnum.ADMIN.getValue().equals(user.getUserRole());  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>2）针对于图片分页查询，需要设计与用户getQueryWrapper一样的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> QueryWrapper&lt;Picture&gt; <span class="hljs-title function_">getQueryWrapper</span><span class="hljs-params">(PictureQueryRequest pictureQueryRequest)</span> &#123;<br><br>        QueryWrapper&lt;Picture&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(pictureQueryRequest == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> queryWrapper;<br>        &#125;<br><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> pictureQueryRequest.getId();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> pictureQueryRequest.getName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">introduction</span> <span class="hljs-operator">=</span> pictureQueryRequest.getIntroduction();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">category</span> <span class="hljs-operator">=</span> pictureQueryRequest.getCategory();<br>        List&lt;String&gt; tags = pictureQueryRequest.getTags();<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">picSize</span> <span class="hljs-operator">=</span> pictureQueryRequest.getPicSize();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">picWidth</span> <span class="hljs-operator">=</span> pictureQueryRequest.getPicWidth();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">picHeight</span> <span class="hljs-operator">=</span> pictureQueryRequest.getPicHeight();<br>        <span class="hljs-type">Double</span> <span class="hljs-variable">picScale</span> <span class="hljs-operator">=</span> pictureQueryRequest.getPicScale();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">picFormat</span> <span class="hljs-operator">=</span> pictureQueryRequest.getPicFormat();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">searchText</span> <span class="hljs-operator">=</span> pictureQueryRequest.getSearchText();<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> pictureQueryRequest.getUserId();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sortField</span> <span class="hljs-operator">=</span> pictureQueryRequest.getSortField();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sortOrder</span> <span class="hljs-operator">=</span> pictureQueryRequest.getSortOrder();<br><br>        <span class="hljs-comment">//从多个字段中搜索</span><br>        <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(searchText)) &#123;<br>            queryWrapper.and(qw -&gt; qw.like(<span class="hljs-string">&quot;name&quot;</span>,searchText)<br>                    .or()<br>                    .like(<span class="hljs-string">&quot;introduction&quot;</span>,searchText)<br>            );<br>        &#125;<br><br><br>        queryWrapper.eq(ObjUtil.isNotEmpty(id),<span class="hljs-string">&quot;id&quot;</span>,id);<br>        queryWrapper.eq(ObjUtil.isNotEmpty(userId),<span class="hljs-string">&quot;userId&quot;</span>,userId);<br>        queryWrapper.like(StrUtil.isNotBlank(name),<span class="hljs-string">&quot;name&quot;</span>,name);<br>        queryWrapper.like(StrUtil.isNotBlank(introduction),<span class="hljs-string">&quot;introduction&quot;</span>,introduction);<br>        queryWrapper.like(StrUtil.isNotBlank(picFormat),<span class="hljs-string">&quot;picFormat&quot;</span>,picFormat);<br>        queryWrapper.eq(StrUtil.isNotBlank(category),<span class="hljs-string">&quot;category&quot;</span>,category);<br>        queryWrapper.eq(ObjUtil.isNotEmpty(picSize),<span class="hljs-string">&quot;picSize&quot;</span>,picSize);<br>        queryWrapper.eq(ObjUtil.isNotEmpty(picWidth),<span class="hljs-string">&quot;picWidth&quot;</span>,picWidth);<br>        queryWrapper.eq(ObjUtil.isNotEmpty(picHeight),<span class="hljs-string">&quot;picHeight&quot;</span>,picHeight);<br>        queryWrapper.eq(ObjUtil.isNotEmpty(picScale),<span class="hljs-string">&quot;picScale&quot;</span>,picScale);<br><br>        <span class="hljs-keyword">if</span>(CollUtil.isNotEmpty(tags)) &#123;<br>            <span class="hljs-keyword">for</span>(String tag : tags) &#123;<br>                queryWrapper.like(<span class="hljs-string">&quot;tags&quot;</span>,<span class="hljs-string">&quot;\&quot;&quot;</span> + tag + <span class="hljs-string">&quot;\&quot;&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        queryWrapper.orderBy(StrUtil.isNotEmpty(sortField),sortOrder.equals(<span class="hljs-string">&quot;ascend&quot;</span>),sortField);<br><br>        <span class="hljs-keyword">return</span> queryWrapper;<br>    &#125;<br></code></pre></td></tr></table></figure><p>注意</p><p>1、searchText 是从name和introduction中搜索</p><p>2、tags在数据库中存储的是JSON格式字符串，提取出的每一个标签都需要模糊查询</p><p>3）编写获取图片封装方法，关联创建用户信息</p><p>获取单张图片封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> PictureVO <span class="hljs-title function_">getPictureVO</span><span class="hljs-params">(Picture picture, HttpServletRequest request)</span> &#123;<br>    <span class="hljs-type">PictureVO</span> <span class="hljs-variable">pictureVO</span> <span class="hljs-operator">=</span> PictureVO.objToVo(picture);<br><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> pictureVO.getUserId();<br>    <span class="hljs-keyword">if</span>(userId != <span class="hljs-literal">null</span> &amp;&amp; userId &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.getById(userId);<br>        <span class="hljs-type">UserVO</span> <span class="hljs-variable">userVO</span> <span class="hljs-operator">=</span> userService.getUserVO(user);<br><br>        pictureVO.setUser(userVO);<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> pictureVO;<br>&#125;<br></code></pre></td></tr></table></figure><p>分页获取图片封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Page&lt;PictureVO&gt; <span class="hljs-title function_">getPictureVOPage</span><span class="hljs-params">(Page&lt;Picture&gt; picturePage, HttpServletRequest request)</span> &#123;<br>    List&lt;Picture&gt; pictureList = picturePage.getRecords();<br>    Page&lt;PictureVO&gt; pictureVOPage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(picturePage.getCurrent(), picturePage.getSize(),picturePage.getTotal());<br><br>    <span class="hljs-keyword">if</span>(CollUtil.isEmpty(pictureList)) &#123;<br>        <span class="hljs-keyword">return</span> pictureVOPage;<br>    &#125;<br><br><br>    List&lt;PictureVO&gt; pictureVOList = pictureList.stream().map(PictureVO::objToVo).collect(Collectors.toList());<br><br>    Set&lt;Long&gt; userIdSet = pictureVOList.stream().map(PictureVO::getUserId).collect(Collectors.toSet());<br>    Map&lt;Long, List&lt;User&gt;&gt; userIdUserListMap = userService.listByIds(userIdSet).stream().collect(Collectors.groupingBy(User::getId));<br><br><br>    pictureVOList.forEach(pictureVO -&gt; &#123;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> pictureVO.getUserId();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span>(userIdUserListMap.containsKey(userId)) &#123;<br>            user = userIdUserListMap.get(userId).get(<span class="hljs-number">0</span>);<br>        &#125;<br><br>        pictureVO.setUser(userService.getUserVO(user));<br>    &#125;);<br><br>    pictureVOPage.setRecords(pictureVOList);<br><br><br>    <span class="hljs-keyword">return</span> pictureVOPage;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码可能有些复杂，但归根结底只做了<code>Page&lt;Picture&gt;</code>转化为<code>Page&lt;PictureVO&gt;</code>，为内部PictureVO插入创建用户字段</p><p>4）编写图片数据校验方法，在图片更新和修改的时候判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">validPicture</span><span class="hljs-params">(Picture picture)</span> &#123;<br>    ThrowUtils.throwIf(picture == <span class="hljs-literal">null</span>,ErrorCode.PARAMS_ERROR);<br><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> picture.getId();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> picture.getUrl();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">introduction</span> <span class="hljs-operator">=</span> picture.getIntroduction();<br><br>    ThrowUtils.throwIf(ObjUtil.isNull(id),ErrorCode.PARAMS_ERROR,<span class="hljs-string">&quot;id不能为空&quot;</span>);<br>    <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(url)) &#123;<br>        ThrowUtils.throwIf(url.length() &gt; <span class="hljs-number">1024</span>,ErrorCode.PARAMS_ERROR,<span class="hljs-string">&quot;url过长&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(introduction)) &#123;<br>        ThrowUtils.throwIf(introduction.length() &gt; <span class="hljs-number">800</span>,ErrorCode.PARAMS_ERROR,<span class="hljs-string">&quot;简介过长&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里主要对图片id、url、introduction进行约束，如果想要增添规则自己加</p><h4 id="接口开发-1">接口开发</h4><p>上述功能都是样板代码，俗称增删改查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/delete&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;Boolean&gt; <span class="hljs-title function_">deletePicture</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> DeleteRequest deleteRequest, HttpServletRequest request)</span> &#123;<br>        ThrowUtils.throwIf(deleteRequest == <span class="hljs-literal">null</span> || deleteRequest.getId() &lt;= <span class="hljs-number">0</span>, ErrorCode.PARAMS_ERROR);<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> userService.getLoginUser(request);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> deleteRequest.getId();<br><br>        <span class="hljs-type">Picture</span> <span class="hljs-variable">picture</span> <span class="hljs-operator">=</span> pictureService.getById(id);<br>        ThrowUtils.throwIf(picture == <span class="hljs-literal">null</span>, ErrorCode.PARAMS_ERROR);<br><br>        <span class="hljs-keyword">if</span> (!loginUser.getId().equals(picture.getUserId()) &amp;&amp; !UserConstant.ADMIN_ROLE.equals(loginUser.getUserRole())) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.NO_AUTH_ERROR);<br>        &#125;<br><br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> pictureService.removeById(picture);<br>        ThrowUtils.throwIf(!res, ErrorCode.PARAMS_ERROR);<br>        <span class="hljs-keyword">return</span> ResultUtils.success(<span class="hljs-literal">true</span>);<br>    &#125;<br><br><br><br>    <span class="hljs-meta">@PostMapping(&quot;/update&quot;)</span><br>    <span class="hljs-meta">@AuthCheck(mustRole = UserConstant.ADMIN_ROLE)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;Boolean&gt; <span class="hljs-title function_">updatePicture</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> PictureUpdateRequest pictureUpdateRequest)</span> &#123;<br>        ThrowUtils.throwIf(pictureUpdateRequest == <span class="hljs-literal">null</span> || pictureUpdateRequest.getId() &lt;= <span class="hljs-number">0</span>, ErrorCode.PARAMS_ERROR);<br><br>        <span class="hljs-type">Picture</span> <span class="hljs-variable">picture</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Picture</span>();<br>        BeanUtils.copyProperties(pictureUpdateRequest,picture);<br>        <br>        picture.setTags(JSONUtil.toJsonStr(pictureUpdateRequest.getTags()));<br>        <span class="hljs-type">long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> pictureUpdateRequest.getId();<br>        <span class="hljs-type">Picture</span> <span class="hljs-variable">oldPicture</span> <span class="hljs-operator">=</span> pictureService.getById(id);<br><br>        ThrowUtils.throwIf(oldPicture == <span class="hljs-literal">null</span>,ErrorCode.NOT_FOUND_ERROR);<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> pictureService.updateById(picture);<br>        ThrowUtils.throwIf(!res,ErrorCode.PARAMS_ERROR);<br><br>        <span class="hljs-keyword">return</span> ResultUtils.success(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/get&quot;)</span><br>    <span class="hljs-meta">@AuthCheck(mustRole = UserConstant.ADMIN_ROLE)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;Picture&gt; <span class="hljs-title function_">getPicture</span><span class="hljs-params">(<span class="hljs-type">long</span> id)</span> &#123;<br>        ThrowUtils.throwIf(id &lt;= <span class="hljs-number">0</span>, ErrorCode.PARAMS_ERROR);<br><br>        <span class="hljs-type">Picture</span> <span class="hljs-variable">picture</span> <span class="hljs-operator">=</span> pictureService.getById(id);<br><br>        ThrowUtils.throwIf(picture == <span class="hljs-literal">null</span>,ErrorCode.NOT_FOUND_ERROR);<br><br>        <span class="hljs-keyword">return</span> ResultUtils.success(picture);<br>    &#125;<br><br><br>    <span class="hljs-meta">@GetMapping(&quot;/get/vo&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;PictureVO&gt; <span class="hljs-title function_">getPictureVO</span><span class="hljs-params">(<span class="hljs-type">long</span> id,HttpServletRequest request)</span> &#123;<br>        ThrowUtils.throwIf(id &lt;= <span class="hljs-number">0</span>, ErrorCode.PARAMS_ERROR);<br><br>        <span class="hljs-type">Picture</span> <span class="hljs-variable">picture</span> <span class="hljs-operator">=</span> pictureService.getById(id);<br><br>        ThrowUtils.throwIf(picture == <span class="hljs-literal">null</span>,ErrorCode.NOT_FOUND_ERROR);<br><br><br>        <span class="hljs-keyword">return</span> ResultUtils.success(pictureService.getPictureVO(picture,request));<br>    &#125;<br><br><br><br>    <span class="hljs-meta">@PostMapping(&quot;/list/page&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;Page&lt;Picture&gt;&gt; <span class="hljs-title function_">listPictureByPage</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> PictureQueryRequest pictureQueryRequest)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> pictureQueryRequest.getCurrent();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> pictureQueryRequest.getPageSize();<br><br>        <span class="hljs-comment">// 限制爬虫</span><br>        ThrowUtils.throwIf(size &gt; <span class="hljs-number">20</span>, ErrorCode.PARAMS_ERROR);<br><br>        <span class="hljs-comment">// 查询数据库</span><br>        Page&lt;Picture&gt; picturePage = pictureService.page(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(current, size),<br>                pictureService.getQueryWrapper(pictureQueryRequest)<br>        );<br><br>        <span class="hljs-comment">// 获取封装类</span><br>        <span class="hljs-keyword">return</span> ResultUtils.success(picturePage);<br>    &#125;<br><br><br>    <span class="hljs-meta">@PostMapping(&quot;/list/page/vo&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;Page&lt;PictureVO&gt;&gt; <span class="hljs-title function_">listPictureVOByPage</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> PictureQueryRequest pictureQueryRequest,HttpServletRequest request)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> pictureQueryRequest.getCurrent();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> pictureQueryRequest.getPageSize();<br><br>        <span class="hljs-comment">// 限制爬虫</span><br>        ThrowUtils.throwIf(size &gt; <span class="hljs-number">20</span>, ErrorCode.PARAMS_ERROR);<br><br>        <span class="hljs-comment">// 查询数据库</span><br>        Page&lt;Picture&gt; picturePage = pictureService.page(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(current, size),<br>                pictureService.getQueryWrapper(pictureQueryRequest)<br>        );<br><br>        <span class="hljs-comment">// 获取封装类</span><br>        <span class="hljs-keyword">return</span> ResultUtils.success(pictureService.getPictureVOPage(picturePage, request));<br>    &#125;<br><br><br>    <span class="hljs-comment">//编辑图片(用户)</span><br>    <span class="hljs-meta">@PostMapping(&quot;/edit&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;Boolean&gt; <span class="hljs-title function_">editPicture</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> PictureEditRequest pictureEditRequest,HttpServletRequest request)</span> &#123;<br>        ThrowUtils.throwIf(pictureEditRequest == <span class="hljs-literal">null</span> || pictureEditRequest.getId() &lt;= <span class="hljs-number">0</span>,ErrorCode.PARAMS_ERROR);<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> userService.getLoginUser(request);<br>        <span class="hljs-type">Picture</span> <span class="hljs-variable">picture</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Picture</span>();<br>        BeanUtils.copyProperties(pictureEditRequest,picture);<br><br>        picture.setTags(JSONUtil.toJsonStr(pictureEditRequest.getTags()));<br>        picture.setEditTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> pictureEditRequest.getId();<br>        <span class="hljs-type">Picture</span> <span class="hljs-variable">oldPicture</span> <span class="hljs-operator">=</span> pictureService.getById(id);<br>        ThrowUtils.throwIf(oldPicture == <span class="hljs-literal">null</span>,ErrorCode.NOT_FOUND_ERROR);<br><br>        <span class="hljs-comment">//仅本人和管理员可以编辑</span><br>        <span class="hljs-keyword">if</span>(!oldPicture.getUserId().equals(loginUser.getId()) || !UserConstant.ADMIN_ROLE.equals(loginUser.getUserRole())) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.NO_AUTH_ERROR);<br>        &#125;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> pictureService.updateById(oldPicture);<br><br>        ThrowUtils.throwIf(!res,ErrorCode.OPERATION_ERROR);<br><br>        <span class="hljs-keyword">return</span> ResultUtils.success(<span class="hljs-literal">true</span>);<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>注意，编辑和更新图片的时候，由于tags类型不一致，我们需要将List集合转化为字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">picture.setTags(JSONUtil.toJsonStr(pictureEditRequest.getTags()));<br></code></pre></td></tr></table></figure><h3 id="设置预置标签和类型">设置预置标签和类型</h3><p>用户需要通过标签和类型进行搜索图片</p><p>我们可以设置一组固定的数值初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/tag_category&quot;)</span>  <br><span class="hljs-keyword">public</span> BaseResponse&lt;PictureTagCategory&gt; <span class="hljs-title function_">listPictureTagCategory</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-type">PictureTagCategory</span> <span class="hljs-variable">pictureTagCategory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PictureTagCategory</span>();  <br>    List&lt;String&gt; tagList = Arrays.asList(<span class="hljs-string">&quot;热门&quot;</span>, <span class="hljs-string">&quot;搞笑&quot;</span>, <span class="hljs-string">&quot;生活&quot;</span>, <span class="hljs-string">&quot;高清&quot;</span>, <span class="hljs-string">&quot;艺术&quot;</span>, <span class="hljs-string">&quot;校园&quot;</span>, <span class="hljs-string">&quot;背景&quot;</span>, <span class="hljs-string">&quot;简历&quot;</span>, <span class="hljs-string">&quot;创意&quot;</span>);  <br>    List&lt;String&gt; categoryList = Arrays.asList(<span class="hljs-string">&quot;模板&quot;</span>, <span class="hljs-string">&quot;电商&quot;</span>, <span class="hljs-string">&quot;表情包&quot;</span>, <span class="hljs-string">&quot;素材&quot;</span>, <span class="hljs-string">&quot;海报&quot;</span>);  <br>    pictureTagCategory.setTagList(tagList);  <br>    pictureTagCategory.setCategoryList(categoryList);  <br>    <span class="hljs-keyword">return</span> ResultUtils.success(pictureTagCategory);  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>至此后端部分完结！！！</p><p>已经有点晕了，感觉都在乱写了。。。。。</p>]]></content>
    
    
    <categories>
      
      <category>项目实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KR云图库Day02</title>
    <link href="/2025/07/11/%E4%BA%91%E5%9B%BE%E5%BA%9302/"/>
    <url>/2025/07/11/%E4%BA%91%E5%9B%BE%E5%BA%9302/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>最后更新于：2025/7/11 PM</p>          </div><h1 id="项目开始前闲话">项目开始前闲话</h1><p>通过昨天的努力，我们终于来到了用户模块</p><p>我认为今天的进度可以学完用户模块</p><p>有一说一，感觉在文字教程的基础上写博客分享自己的见解是一件很有趣的事情</p><p>如果让我只照着文字教程做，不写笔记的话，说真的我可能半途而废了(之前试过hhh)</p><p>COME ON！把手头的闲杂事情放一放开始今天的学习</p><h1 id="用户模块后端开发">用户模块（后端开发）</h1><p>昨天已经完成到了根据Mybatis-plusX插件根据用户表创建实体类，同时放到指定的位置</p><p>当然生成的代码不能完全满足我们，有一些需要我们自己修改</p><h3 id="数据模型开发">数据模型开发</h3><h4 id="实体类">实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableId(type = IdType.ASSIGN_ID)</span> <span class="hljs-comment">//防止按序爬虫</span><br><span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-meta">@TableLogic</span> <span class="hljs-comment">//逻辑删除</span><br><span class="hljs-keyword">private</span> Integer isDelete;<br></code></pre></td></tr></table></figure><h4 id="枚举类针对于用户权限">枚举类（针对于用户权限）</h4><p>创建<code>/model/enums</code>，设置这个枚举类可以避免我们更快的获取到val，而不是自己手写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> enums;<br><br><span class="hljs-keyword">import</span> cn.hutool.core.util.ObjUtil;<br><span class="hljs-keyword">import</span> lombok.Getter;<br><br><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">UserRoleEnum</span> &#123;<br><br>    USER(<span class="hljs-string">&quot;用户&quot;</span>,<span class="hljs-string">&quot;user&quot;</span>),<br>    ADMIN(<span class="hljs-string">&quot;管理员&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String text;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String val;<br><br>    UserRoleEnum(String text, String val) &#123;<br>        <span class="hljs-built_in">this</span>.text = text;<br>        <span class="hljs-built_in">this</span>.val = val;<br>    &#125;<br><br><br><br>    <span class="hljs-comment">//根据val获取枚举</span><br>    <span class="hljs-keyword">public</span> UserRoleEnum <span class="hljs-title function_">getEnumByVal</span><span class="hljs-params">(String val)</span> &#123;<br>        <span class="hljs-keyword">if</span>(ObjUtil.isEmpty(val)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(UserRoleEnum e : UserRoleEnum.values()) &#123;<br>            <span class="hljs-keyword">if</span>(e.val.equals(val)) &#123;<br>                <span class="hljs-keyword">return</span> e;<br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="用户注册">用户注册</h3><p>创建<code>/model/dto/UserRegisterRequest</code>，封装用户注册请求</p><p>dto(数据传输对象)，主要是用来封装参数对象的，就例如登录需要用户名和密码，我们可以封装这个类</p><h4 id="用户注册请求类封装">用户注册请求类封装</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserRegisterRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String userAccount;<br>    <br>    <span class="hljs-keyword">private</span> String userPassword;<br>    <br>    <span class="hljs-keyword">private</span> String checkPassword;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="服务及服务实现类">服务及服务实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;User&gt; &#123;<br><br>    <span class="hljs-type">long</span> <span class="hljs-title function_">userRegister</span><span class="hljs-params">(String userAccount,String userPassword,String checkPassword)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="实现用户注册逻辑">实现用户注册逻辑</h4><p>主要分为4步曲</p><p>1）校验参数是否合法 2）判断是否存在想注册的用户 3）加密密码4）插入数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper, User&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">userRegister</span><span class="hljs-params">(String userAccount, String userPassword, String checkPassword)</span> &#123;<br>        <span class="hljs-comment">//1.校验参数</span><br>        <span class="hljs-keyword">if</span>(StrUtil.hasBlank(userAccount,userPassword,checkPassword)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);<br>        &#125;<br><br><br>        <span class="hljs-keyword">if</span>(userAccount.length() &lt; <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(userPassword.length() &lt; <span class="hljs-number">8</span> || checkPassword.length() &lt; <span class="hljs-number">8</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);<br>        &#125;<br><br><br>        <span class="hljs-keyword">if</span>(!userPassword.equals(checkPassword)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);<br>        &#125;<br><br>        <span class="hljs-comment">//2.判断是否已有用户</span><br>        <span class="hljs-type">QueryWrapper</span> <span class="hljs-variable">queryWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();<br>        queryWrapper.eq(<span class="hljs-string">&quot;userAccount&quot;</span>,userAccount);<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.baseMapper.selectCount(queryWrapper);<br>        <span class="hljs-keyword">if</span>(count &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);<br>        &#125;<br><br>        <span class="hljs-comment">//3.加密</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">encryptPass</span> <span class="hljs-operator">=</span> getEncryptPass(userPassword);<br><br>        <span class="hljs-comment">//4.插入数据库</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUserAccount(userAccount);<br>        user.setUserPassword(encryptPass);<br>        user.setUserName(<span class="hljs-string">&quot;无名字&quot;</span>);<br>        user.setUserRole(UserRoleEnum.USER.getVal());<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.save(user);<br>        <span class="hljs-keyword">if</span>(!res) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> user.getId();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>加密的时候需要我们放盐(搅屎)，防止对方试密码，这里使用md5加密(这方面可以自己了解)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEncryptPass</span><span class="hljs-params">(String userPassword)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SALT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;KotRin&quot;</span>;<br>    <span class="hljs-keyword">return</span> DigestUtils.md5DigestAsHex((SALT + userPassword).getBytes());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="接口开发">接口开发</h4><p>刚刚已经实现了注册逻辑，现在可以在接口中调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br><br>    <span class="hljs-meta">@PostMapping(&quot;/register&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;Long&gt; <span class="hljs-title function_">register</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserRegisterRequest userRegisterRequest)</span> &#123;<br>        ThrowUtils.throwIf(userRegisterRequest == <span class="hljs-literal">null</span>, ErrorCode.PARAMS_ERROR);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userAccount</span> <span class="hljs-operator">=</span> userRegisterRequest.getUserAccount();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userPassword</span> <span class="hljs-operator">=</span> userRegisterRequest.getUserPassword();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">checkPassword</span> <span class="hljs-operator">=</span> userRegisterRequest.getCheckPassword();<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> userService.userRegister(userAccount, userPassword, checkPassword);<br><br>        <span class="hljs-keyword">return</span> ResultUtils.success(l);<br>    &#125;<br><br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试接口</p><figure><img src="/img/pictureLibrary/image-20250711123351901.png"alt="image-20250711123351901" /><figcaption aria-hidden="true">image-20250711123351901</figcaption></figure><h3 id="用户登录">用户登录</h3><p>注册做好后，登录相比于注册少了一个checkPassword的字段</p><p>这里还需要考虑到返回给用户的数据需要时脱敏后的，而且还需要记录用户登录态，方便下次用户直接登录</p><h4 id="用户服务前置准备">用户服务前置准备</h4><p><code>/dto/user</code>下封装<code>UserLoginRequest</code>请求类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserLoginRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">3466946553368564010L</span>;<br>    <span class="hljs-keyword">private</span> String userAccount;<br><br>    <span class="hljs-keyword">private</span> String userPassword;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>新建<code>/vo/LoginUserVO</code>，用来脱敏数据</p><p>这里主要需要对userPassword、editTime脱敏</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginUserVO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户 id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 账号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userAccount;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户昵称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userName;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户头像</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userAvatar;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户简介</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userProfile;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户角色：user/admin</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userRole;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建存储用户登录态键的常量<code>/constant/UserConstant</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kroot.krpicturebackend.constant;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserConstant</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户登录态键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">USER_LOGIN_STATE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user_login&quot;</span>;<br><br>    <span class="hljs-comment">//  region 权限</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 默认角色</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_ROLE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 管理员角色</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">ADMIN_ROLE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;admin&quot;</span>;<br><br>    <span class="hljs-comment">// endregion</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="服务实现类开发">服务实现类开发</h4><p>根据<code>request</code>获取当前登录用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getLoginUser</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>  <span class="hljs-comment">//判断是否已经登录</span><br>  <span class="hljs-type">Object</span> <span class="hljs-variable">userObj</span> <span class="hljs-operator">=</span> request.getSession().getAttribute(UserConstant.USER_LOGIN_STATE);<br>  <span class="hljs-type">User</span> <span class="hljs-variable">currentUser</span> <span class="hljs-operator">=</span> (User) userObj;<br><br>  <span class="hljs-keyword">if</span>(currentUser == <span class="hljs-literal">null</span> || currentUser.getId() == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.NOT_LOGIN_ERROR);<br>  &#125;<br><br>  <span class="hljs-comment">//从数据库中查询(也可以不查直接返回)</span><br>  <span class="hljs-type">long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> currentUser.getId();<br>  currentUser = <span class="hljs-built_in">this</span>.getById(userId);<br>  <span class="hljs-keyword">if</span>(currentUser == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.NOT_LOGIN_ERROR);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> currentUser;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取当前脱敏后的用户信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> LoginUserVO <span class="hljs-title function_">getLoginUserVO</span><span class="hljs-params">(User user)</span> &#123;<br>  <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br><br>  <span class="hljs-type">LoginUserVO</span> <span class="hljs-variable">loginUserVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginUserVO</span>();<br>  BeanUtils.copyProperties(user,loginUserVO); <span class="hljs-comment">//将user内包含的内容拷贝给loginUserVO</span><br><br>  <span class="hljs-keyword">return</span> loginUserVO;<br>&#125;<br></code></pre></td></tr></table></figure><p>用户登录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> LoginUserVO <span class="hljs-title function_">userLogin</span><span class="hljs-params">(String userAccount, String userPassword, HttpServletRequest request)</span> &#123;<br>  <span class="hljs-comment">//1.校验参数</span><br>  <span class="hljs-keyword">if</span>(StrUtil.hasBlank(userAccount,userPassword)) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);<br>  &#125;<br><br><br>  <span class="hljs-keyword">if</span>(userAccount.length() &lt; <span class="hljs-number">4</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR,<span class="hljs-string">&quot;账户名必须大于4位&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span>(userPassword.length() &lt; <span class="hljs-number">8</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR,<span class="hljs-string">&quot;密码需要大于8位&quot;</span>);<br>  &#125;<br><br><br><br>  <span class="hljs-type">String</span> <span class="hljs-variable">encryptPass</span> <span class="hljs-operator">=</span> getEncryptPass(userPassword);<br><br>  <span class="hljs-comment">//2.查询是否有当前用户</span><br>  <span class="hljs-type">QueryWrapper</span> <span class="hljs-variable">queryWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();<br>  queryWrapper.eq(<span class="hljs-string">&quot;userAccount&quot;</span>,userAccount);<br>  queryWrapper.eq(<span class="hljs-string">&quot;userPassword&quot;</span>,encryptPass);<br><br>  <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.baseMapper.selectOne(queryWrapper);<br><br>  <span class="hljs-comment">//用户不存在</span><br>  <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR,<span class="hljs-string">&quot;用户不存在或者密码错误&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">//3.记录用户登录态</span><br>  request.getSession().setAttribute(UserConstant.USER_LOGIN_STATE,user);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getLoginUserVO(user);<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="接口开发-1">接口开发</h4><p>登录接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;LoginUserVO&gt; <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserLoginRequest userLoginRequest, HttpServletRequest request)</span> &#123;<br>  ThrowUtils.throwIf(userLoginRequest == <span class="hljs-literal">null</span>, ErrorCode.PARAMS_ERROR);<br>  <span class="hljs-type">String</span> <span class="hljs-variable">userAccount</span> <span class="hljs-operator">=</span> userLoginRequest.getUserAccount();<br>  <span class="hljs-type">String</span> <span class="hljs-variable">userPassword</span> <span class="hljs-operator">=</span> userLoginRequest.getUserPassword();<br><br><br>  <span class="hljs-type">LoginUserVO</span> <span class="hljs-variable">loginUserVO</span> <span class="hljs-operator">=</span> userService.userLogin(userAccount, userPassword,request);<br><br>  <span class="hljs-keyword">return</span> ResultUtils.success(loginUserVO);<br>&#125;<br></code></pre></td></tr></table></figure><p>获取当前登录用户接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/get/login&quot;)</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;LoginUserVO&gt; <span class="hljs-title function_">getLoginUser</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>  <span class="hljs-type">User</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> userService.getLoginUser(request);<br><br>  <span class="hljs-keyword">return</span> ResultUtils.success(userService.getLoginUserVO(loginUser));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用户注销">用户注销</h3><p>用户注销，实际上只需要我们去判断用户是否登录，如果已经登录那么清除用户登录态</p><h4 id="服务实现类">服务实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">logout</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>  <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> request.getSession().getAttribute(UserConstant.USER_LOGIN_STATE);<br>  <span class="hljs-keyword">if</span>(o == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.NOT_LOGIN_ERROR,<span class="hljs-string">&quot;用户未登录&quot;</span>);<br>  &#125;<br><br>  request.getSession().removeAttribute(UserConstant.USER_LOGIN_STATE);<br><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="接口开发-2">接口开发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/logout&quot;)</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;Boolean&gt; <span class="hljs-title function_">userLogOut</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br><br>  <span class="hljs-type">boolean</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> userService.logout(request);<br><br>  <span class="hljs-keyword">return</span> ResultUtils.success(res);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用户权限控制">用户权限控制</h3><p>权限控制业务需求中很常用，主要是用AOP + 自定义注解实现统一拦截</p><h4 id="权限校验注解">权限校验注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> AuthCheck &#123;<br>    String <span class="hljs-title function_">mustRole</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="aop">AOP</h4><p>主要讲一下代码，可以直接拷贝</p><p><code>@Aspect</code> 声明是AOP切面</p><p>针对于自定义注解，采用环绕切面<code>@Around("@annotation(authCheck)")</code></p><p>提取<code>authCheck.mustRole()</code>根据枚举类，去判断权限是否可以放行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 执行拦截</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> joinPoint 切入点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> authCheck 权限校验注解</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Around(&quot;@annotation(authCheck)&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">doInterceptor</span><span class="hljs-params">(ProceedingJoinPoint joinPoint, AuthCheck authCheck)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">mustRole</span> <span class="hljs-operator">=</span> authCheck.mustRole();<br>        <span class="hljs-type">RequestAttributes</span> <span class="hljs-variable">requestAttributes</span> <span class="hljs-operator">=</span> RequestContextHolder.currentRequestAttributes();<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> ((ServletRequestAttributes) requestAttributes).getRequest();<br>        <span class="hljs-comment">// 当前登录用户</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> userService.getLoginUser(request);<br>        <span class="hljs-type">UserRoleEnum</span> <span class="hljs-variable">mustRoleEnum</span> <span class="hljs-operator">=</span> UserRoleEnum.getEnumByValue(mustRole);<br>        <span class="hljs-comment">// 不需要权限，放行</span><br>        <span class="hljs-keyword">if</span> (mustRoleEnum == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> joinPoint.proceed();<br>        &#125;<br>        <span class="hljs-comment">// 以下为：必须有该权限才通过</span><br>        <span class="hljs-comment">// 获取当前用户具有的权限</span><br>        <span class="hljs-type">UserRoleEnum</span> <span class="hljs-variable">userRoleEnum</span> <span class="hljs-operator">=</span> UserRoleEnum.getEnumByValue(loginUser.getUserRole());<br>        <span class="hljs-comment">// 没有权限，拒绝</span><br>        <span class="hljs-keyword">if</span> (userRoleEnum == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.NO_AUTH_ERROR);<br>        &#125;<br>        <span class="hljs-comment">// 要求必须有管理员权限，但用户没有管理员权限，拒绝</span><br>        <span class="hljs-keyword">if</span> (UserRoleEnum.ADMIN.equals(mustRoleEnum) &amp;&amp; !UserRoleEnum.ADMIN.equals(userRoleEnum)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.NO_AUTH_ERROR);<br>        &#125;<br>        <span class="hljs-comment">// 通过权限校验，放行</span><br>        <span class="hljs-keyword">return</span> joinPoint.proceed();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="用户管理">用户管理</h3><p>用户管理功能包含</p><ul><li>创建用户</li><li>根据ID删除用户</li><li>更新用户</li><li>分页查询用户</li><li>根据ID查询用户</li></ul><p>1、创建用户请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserAddRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1500218048664610744L</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 账号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userAccount;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户昵称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userName;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户头像</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userAvatar;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户简介</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userProfile;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户角色：user/admin</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userRole;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>2、更新用户请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserUpdateRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">730213206973121277L</span>;<br>    <span class="hljs-keyword">private</span> Long id;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户昵称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userName;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户头像</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userAvatar;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户简介</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userProfile;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户角色：user/admin</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userRole;<br>    <br><br>&#125;<br></code></pre></td></tr></table></figure><p>3、查询用户请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EqualsAndHashCode(callSuper = true)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserQueryRequest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PageRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">5025140473960503198L</span>;<br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 账号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userAccount;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户昵称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userName;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户简介</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userProfile;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户角色：user/admin</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userRole;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="用户信息脱敏">用户信息脱敏</h4><p><code>/model/vo</code>包下创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserVO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 账号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userAccount;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户昵称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userName;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户头像</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userAvatar;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户简介</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userProfile;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户角色：user/admin</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userRole;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="服务开发">服务开发</h4><p>编写获取当前脱敏用户信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> UserVO <span class="hljs-title function_">getUserVO</span><span class="hljs-params">(User user)</span> &#123;<br>  <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br><br>  <span class="hljs-type">UserVO</span> <span class="hljs-variable">userVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserVO</span>();<br>  BeanUtils.copyProperties(user,userVO);<br><br>  <span class="hljs-keyword">return</span> userVO;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;UserVO&gt; <span class="hljs-title function_">getUserVOList</span><span class="hljs-params">(List&lt;User&gt; userList)</span> &#123;<br><br>  <span class="hljs-keyword">if</span>(CollUtil.isEmpty(userList)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>  &#125;<br><br><br>  <span class="hljs-keyword">return</span> userList.stream().map(<span class="hljs-built_in">this</span>::getUserVO).collect(Collectors.toList());<br><br>&#125;<br></code></pre></td></tr></table></figure><p>针对于分页查询，我们需要根据用户查询参数构造SQL查询，因为使用了Mybatis-plus，我们可以通过QueryWrapper构建查询条件</p><p>Service中编写getWrapper拼接查询条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> QueryWrapper&lt;User&gt; <span class="hljs-title function_">getQueryWrapper</span><span class="hljs-params">(UserQueryRequest userQueryRequest)</span> &#123;<br><br>  <span class="hljs-type">Long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> userQueryRequest.getId();<br>  <span class="hljs-type">String</span> <span class="hljs-variable">userAccount</span> <span class="hljs-operator">=</span> userQueryRequest.getUserAccount();<br>  <span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> userQueryRequest.getUserName();<br>  <span class="hljs-type">String</span> <span class="hljs-variable">userProfile</span> <span class="hljs-operator">=</span> userQueryRequest.getUserProfile();<br>  <span class="hljs-type">String</span> <span class="hljs-variable">sortField</span> <span class="hljs-operator">=</span> userQueryRequest.getSortField();<br>  <span class="hljs-type">String</span> <span class="hljs-variable">sortOrder</span> <span class="hljs-operator">=</span> userQueryRequest.getSortOrder();<br><br><br>  QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>  queryWrapper.eq(ObjUtil.isNotNull(id),<span class="hljs-string">&quot;id&quot;</span>,id);<br>  queryWrapper.eq(StrUtil.isNotBlank(userAccount),<span class="hljs-string">&quot;userAccount&quot;</span>,userAccount);<br>  queryWrapper.like(StrUtil.isNotBlank(userName),<span class="hljs-string">&quot;userName&quot;</span>,userName);<br>  queryWrapper.like(StrUtil.isNotBlank(userProfile),<span class="hljs-string">&quot;userProfile&quot;</span>,userProfile);<br>  <span class="hljs-comment">//queryWraper.orderBy(boolean，isasc，column)  参数一：断言 参数二：是否升序 参数三：按照那个字段排序</span><br>  queryWrapper.orderBy(StrUtil.isNotEmpty(sortField),sortOrder.equals(<span class="hljs-string">&quot;ascend&quot;</span>),sortField);<br><br><br><br>  <span class="hljs-keyword">return</span> queryWrapper;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="接口开发-3">接口开发</h4><p>创建默认用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span><br><span class="hljs-meta">@AuthCheck(mustRole = UserConstant.ADMIN_ROLE)</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;Long&gt; <span class="hljs-title function_">addUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserAddRequest userAddRequest)</span> &#123;<br>  ThrowUtils.throwIf(userAddRequest == <span class="hljs-literal">null</span>, ErrorCode.PARAMS_ERROR);<br><br>  <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>  BeanUtils.copyProperties(userAddRequest, user);<br>  <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_PASS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12345678&quot;</span>;<br>  <span class="hljs-type">String</span> <span class="hljs-variable">encryptPass</span> <span class="hljs-operator">=</span> userService.getEncryptPass(DEFAULT_PASS);<br><br><br>  user.setUserPassword(encryptPass);<br>  <span class="hljs-type">boolean</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> userService.save(user);<br>  ThrowUtils.throwIf(!res, ErrorCode.OPERATION_ERROR);<br><br>  <span class="hljs-keyword">return</span> ResultUtils.success(user.getId());<br>&#125;<br></code></pre></td></tr></table></figure><p>根据ID获取用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/get&quot;)</span><br><span class="hljs-meta">@AuthCheck(mustRole = UserConstant.ADMIN_ROLE)</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;User&gt; <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-type">long</span> id)</span> &#123;<br>  ThrowUtils.throwIf(id &lt;= <span class="hljs-number">0</span>, ErrorCode.PARAMS_ERROR);<br><br>  <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.getById(id);<br><br>  <span class="hljs-keyword">return</span> ResultUtils.success(user);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>根据ID获取包装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/get/vo&quot;)</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;UserVO&gt; <span class="hljs-title function_">getUserVoById</span><span class="hljs-params">(<span class="hljs-type">long</span> id)</span> &#123;<br>  BaseResponse&lt;User&gt; response = getUserById(id);<br><br>  <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> response.getData();<br>  <span class="hljs-keyword">return</span> ResultUtils.success(userService.getUserVO(user));<br><br>&#125;<br></code></pre></td></tr></table></figure><p>删除用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/delete&quot;)</span><br><span class="hljs-meta">@AuthCheck(mustRole = UserConstant.ADMIN_ROLE)</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;Boolean&gt; <span class="hljs-title function_">deleteUserById</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> DeleteRequest deleteRequest)</span> &#123;<br>  ThrowUtils.throwIf(deleteRequest == <span class="hljs-literal">null</span>, ErrorCode.PARAMS_ERROR);<br><br>  <span class="hljs-type">boolean</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> userService.removeById(deleteRequest.getId());<br><br>  <span class="hljs-keyword">return</span> ResultUtils.success(res);<br>&#125;<br></code></pre></td></tr></table></figure><p>更新用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/update&quot;)</span><br><span class="hljs-meta">@AuthCheck(mustRole = UserConstant.ADMIN_ROLE)</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;Boolean&gt; <span class="hljs-title function_">updateUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserUpdateRequest updateRequest)</span> &#123;<br>  ThrowUtils.throwIf(updateRequest == <span class="hljs-literal">null</span> || updateRequest.getId() == <span class="hljs-literal">null</span>, ErrorCode.PARAMS_ERROR);<br><br>  <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>  BeanUtils.copyProperties(updateRequest, user);<br><br>  <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> userService.updateById(user);<br>  ThrowUtils.throwIf(!b, ErrorCode.OPERATION_ERROR);<br><br>  <span class="hljs-keyword">return</span> ResultUtils.success(<span class="hljs-literal">true</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>分页获取用户</p><p>标记一下Page对象可以自定义current、pageSize、total，<code>Page对象.getRecords</code>获取到的是<code>List</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/list/page/vo&quot;)</span><br><span class="hljs-meta">@AuthCheck(mustRole = UserConstant.ADMIN_ROLE)</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;Page&lt;UserVO&gt;&gt; <span class="hljs-title function_">listUserVOByPage</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserQueryRequest userQueryRequest)</span> &#123;<br>  ThrowUtils.throwIf(userQueryRequest == <span class="hljs-literal">null</span>, ErrorCode.PARAMS_ERROR);<br><br>  <span class="hljs-type">long</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> userQueryRequest.getCurrent();<br>  <span class="hljs-type">long</span> <span class="hljs-variable">pageSize</span> <span class="hljs-operator">=</span> userQueryRequest.getPageSize();<br><br><br>  Page&lt;User&gt; userPage = userService.page(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(current,pageSize),<br>                                         userService.getQueryWrapper(userQueryRequest));<br><br><br>  Page&lt;UserVO&gt; userVOPage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(current,pageSize,userPage.getTotal());<br>  List&lt;UserVO&gt; userVOList = userService.getUserVOList(userPage.getRecords());<br>  userVOPage.setRecords(userVOList);<br><br>  <span class="hljs-keyword">return</span> ResultUtils.success(userVOPage);<br>&#125;<br></code></pre></td></tr></table></figure><p>分页BUG、在我们写好接口后调用，会发现数据库中所有user都进行了展示，并没有生效，这是为什么呢？</p><figure><img src="/img/pictureLibrary/image-20250711160247983.png"alt="image-20250711160247983" /><figcaption aria-hidden="true">image-20250711160247983</figcaption></figure><p>观察<ahref="https://baomidou.com/plugins/pagination/">官方文档</a>，v3.5.9后分页拦截器被分离出来，需要自己手动配置</p><figure><img src="/img/pictureLibrary/image-20250711160506675.png"alt="image-20250711160506675" /><figcaption aria-hidden="true">image-20250711160506675</figcaption></figure><p><ahref="https://baomidou.com/getting-started/install/#maven-bom">官方操作MavenBOM 操作</a></p><p>先下载依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- MyBatis Plus 分页插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-jsqlparser-4.9<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-bom<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>依赖下载后，config包下创建分页拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(&quot;com.kroot.krpicturebackend.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisPlusConfig</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 拦截器配置</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> MybatisPlusInterceptor&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>        <span class="hljs-comment">// 分页插件</span><br>        interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));<br>        <span class="hljs-keyword">return</span> interceptor;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试插件是否生效</p><figure><img src="/img/pictureLibrary/image-20250711161211082.png"alt="image-20250711161211082" /><figcaption aria-hidden="true">image-20250711161211082</figcaption></figure><p>可以看到生效了，但是ID对不上，网络服务中最后几位变成了0，这是因为后端ID过大，前端JS精度丢失</p><p>如何解决 =》后端config包下创建全局JSON，将后端接口返回值长整型转化为字符串返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Spring MVC Json 配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@JsonComponent</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonConfig</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加 Long 转 json 精度丢失的配置</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ObjectMapper <span class="hljs-title function_">jacksonObjectMapper</span><span class="hljs-params">(Jackson2ObjectMapperBuilder builder)</span> &#123;<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> builder.createXmlMapper(<span class="hljs-literal">false</span>).build();<br>        <span class="hljs-type">SimpleModule</span> <span class="hljs-variable">module</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleModule</span>();<br>        <span class="hljs-keyword">module</span>.addSerializer(Long.class, ToStringSerializer.instance);<br>        <span class="hljs-keyword">module</span>.addSerializer(Long.TYPE, ToStringSerializer.instance);<br>        objectMapper.registerModule(<span class="hljs-keyword">module</span>);<br>        <span class="hljs-keyword">return</span> objectMapper;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>完美解决！！</p><figure><img src="/img/pictureLibrary/image-20250711161532741.png"alt="image-20250711161532741" /><figcaption aria-hidden="true">image-20250711161532741</figcaption></figure><h2 id="用户模块前端开发">用户模块（前端开发）</h2><p>开始前先OpenAPI为前端创建后端接口</p><p>上一次是做到了创建用户登录、注册、管理文件，现在为每一个界面配置路由</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;主页&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">HomePage</span>,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/login&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;用户登录&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserLoginPage</span>,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/register&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;用户注册&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserRegisterPage</span>,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/admin/userManage&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;用户管理&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserManagerPage</span>,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>,<br>      <span class="hljs-comment">// route level code-splitting</span><br>      <span class="hljs-comment">// this generates a separate chunk (About.[hash].js) for this route</span><br>      <span class="hljs-comment">// which is lazy-loaded when the route is visited.</span><br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/AboutView.vue&#x27;</span>),<br>    &#125;,<br>  ],<br></code></pre></td></tr></table></figure><h3 id="获取当前登录用户信息">获取当前登录用户信息</h3><p>更新状态管理代码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> loginUser = ref&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">LoginUserVO</span>&gt;(&#123;<br>  <span class="hljs-attr">userName</span>: <span class="hljs-string">&quot;未登录&quot;</span><br>&#125;)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchLoginUser</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getLoginUserUsingGet</span>()<br>  <span class="hljs-keyword">if</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> === <span class="hljs-number">0</span> &amp;&amp; res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>) &#123;<br>    loginUser.<span class="hljs-property">value</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用户登录界面">用户登录界面</h3><p>AntDesignVue启动！！！这里我们使用<ahref="https://antdv.com/components/form-cn#%E8%A1%A8%E5%8D%95">Form组件</a></p><figure><img src="/img/pictureLibrary/image-20250711163152312.png"alt="image-20250711163152312" /><figcaption aria-hidden="true">image-20250711163152312</figcaption></figure><p>接下来我会告诉你如何去更改</p><p>原版</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;a-form<br>    :model=&quot;formState&quot;<br>    name=&quot;basic&quot;<br>    :label-col=&quot;&#123; span: 8 &#125;&quot;<br>    :wrapper-col=&quot;&#123; span: 16 &#125;&quot;<br>    autocomplete=&quot;off&quot;<br>    @finish=&quot;onFinish&quot;<br>    @finishFailed=&quot;onFinishFailed&quot;<br>  &gt;<br>    &lt;a-form-item<br>      label=&quot;Username&quot;<br>      name=&quot;username&quot;<br>      :rules=&quot;[&#123; required: true, message: &#x27;Please input your username!&#x27; &#125;]&quot;<br>    &gt;<br>      &lt;a-input v-model:value=&quot;formState.username&quot; /&gt;<br>    &lt;/a-form-item&gt;<br><br>    &lt;a-form-item<br>      label=&quot;Password&quot;<br>      name=&quot;password&quot;<br>      :rules=&quot;[&#123; required: true, message: &#x27;Please input your password!&#x27; &#125;]&quot;<br>    &gt;<br>      &lt;a-input-password v-model:value=&quot;formState.password&quot; /&gt;<br>    &lt;/a-form-item&gt;<br><br>    &lt;a-form-item name=&quot;remember&quot; :wrapper-col=&quot;&#123; offset: 8, span: 16 &#125;&quot;&gt;<br>      &lt;a-checkbox v-model:checked=&quot;formState.remember&quot;&gt;Remember me&lt;/a-checkbox&gt;<br>    &lt;/a-form-item&gt;<br><br>    &lt;a-form-item :wrapper-col=&quot;&#123; offset: 8, span: 16 &#125;&quot;&gt;<br>      &lt;a-button type=&quot;primary&quot; html-type=&quot;submit&quot;&gt;Submit&lt;/a-button&gt;<br>    &lt;/a-form-item&gt;<br>  &lt;/a-form&gt;<br>&lt;/template&gt;<br>&lt;script lang=&quot;ts&quot; setup&gt;<br>import &#123; reactive &#125; from &#x27;vue&#x27;;<br><br>interface FormState &#123;<br>  username: string;<br>  password: string;<br>  remember: boolean;<br>&#125;<br><br>const formState = reactive&lt;FormState&gt;(&#123;<br>  username: &#x27;&#x27;,<br>  password: &#x27;&#x27;,<br>  remember: true,<br>&#125;);<br>const onFinish = (values: any) =&gt; &#123;<br>  console.log(&#x27;Success:&#x27;, values);<br>&#125;;<br><br>const onFinishFailed = (errorInfo: any) =&gt; &#123;<br>  console.log(&#x27;Failed:&#x27;, errorInfo);<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>我们会发现<code>:label-col="&#123; span: 8 &#125;" :wrapper-col="&#123; span: 16 &#125;"</code>是和样式相关，先删掉</p><p><span class="citation"data-cites="finish事件保留一个">@finish事件保留一个</span>，重命名为handleSubmit(处理点击)</p><p>我们不需要Rememberme，删掉<code>a-form-item</code>下有remember的，替换为可以跳转到注册界面的代码</p><p>数据是使用v-model绑定的，初始化的值定义类型为FormState，因为后端我们定义了UserLoginRequest里面有userAccount、userPassword替换掉</p><p>输入框元素label占用空间，直接删除，在此基础上添加标题</p><p>我们后端定义的封装请求类在这里充当了枚举</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;userLoginPage&quot;&gt;<br>    &lt;h2 class=&quot;title&quot;&gt;KR云图库 - 用户登录&lt;/h2&gt;<br>    &lt;div class=&quot;desc&quot;&gt;企业级图库&lt;/div&gt;<br>    &lt;a-form<br>      :model=&quot;formState&quot;<br>      autocomplete=&quot;off&quot;<br>      @finish=&quot;handleSubmit&quot;<br>    &gt;<br>      &lt;a-form-item<br>        name=&quot;userAccount&quot;<br>        :rules=&quot;[&#123; required: true, message: &#x27;请输入账号&#x27; &#125;]&quot;<br>      &gt;<br>        &lt;a-input v-model:value=&quot;formState.userAccount&quot; placeholder=&quot;请输入账号&quot;/&gt;<br>      &lt;/a-form-item&gt;<br><br>      &lt;a-form-item<br>        name=&quot;userPassword&quot;<br>        :rules=&quot;[&#123; required: true, message: &#x27;请输入密码&#x27; &#125;,&#123;min:8,message: &#x27;密码不少于8位&#x27;&#125;]&quot;<br>      &gt;<br>        &lt;a-input-password v-model:value=&quot;formState.userPassword&quot; placeholder=&quot;请输入密码&quot;/&gt;<br>      &lt;/a-form-item&gt;<br><br>      &lt;div class=&quot;tips&quot;&gt;<br>        没有账号？<br>        &lt;RouterLink to=&quot;/user/register&quot;&gt;去注册&lt;/RouterLink&gt;<br>      &lt;/div&gt;<br><br>      &lt;a-form-item&gt;<br>        &lt;a-button type=&quot;primary&quot; html-type=&quot;submit&quot; style=&quot;width: 100%&quot;&gt;Submit&lt;/a-button&gt;<br>      &lt;/a-form-item&gt;<br>    &lt;/a-form&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script lang=&quot;ts&quot; setup&gt;<br>import &#123; reactive &#125; from &#x27;vue&#x27;;<br><br>const formState = reactive&lt;API.UserLoginRequest&gt;(&#123;<br>  userAccount: &#x27;&#x27;,<br>  userPassword: &#x27;&#x27;,<br>&#125;);<br><br>const handleSubmit = (values: any) =&gt; &#123;<br>  console.log(&#x27;Success:&#x27;, values);<br>&#125;;<br><br>&lt;/script&gt;<br><br><br></code></pre></td></tr></table></figure><figure><img src="/img/pictureLibrary/image-20250711163826487.png"alt="image-20250711163826487" /><figcaption aria-hidden="true">image-20250711163826487</figcaption></figure><p>说真的、挺丑的，接下来在style标签中更改样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style scoped&gt;<br><span class="hljs-selector-id">#userLoginPage</span> &#123;<br>  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br><br><span class="hljs-selector-id">#userLoginPage</span> <span class="hljs-selector-class">.title</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">16px</span>;<br>&#125;<br><br><span class="hljs-selector-id">#userLoginPage</span> <span class="hljs-selector-class">.desc</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#bbb</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">16px</span>;<br>&#125;<br><br><span class="hljs-selector-id">#userLoginPage</span> <span class="hljs-selector-class">.tips</span> &#123;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#bbb</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">13px</span>;<br>  <span class="hljs-attribute">text-align</span>: right;<br>&#125;<br>&lt;/style<br></code></pre></td></tr></table></figure><p>凑合能看</p><figure><img src="/img/pictureLibrary/image-20250711164527106.png"alt="image-20250711164527106" /><figcaption aria-hidden="true">image-20250711164527106</figcaption></figure><p>完善handleSubmit的代码，点击后调用后端login接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleSubmit</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">values: any</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">userLoginUsingPost</span>(values)<br><br>  <span class="hljs-keyword">if</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> == <span class="hljs-number">0</span> &amp;&amp; res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>) &#123;<br>    <span class="hljs-comment">//因为要保存用户登录态，这里直接调用fetchLoginUser</span><br>    <span class="hljs-keyword">await</span> loginUserStore.<span class="hljs-title function_">fetchLoginUser</span>()<br>    message.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;登录成功&#x27;</span>)<br>    router.<span class="hljs-title function_">push</span>(&#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//不跳转界面</span><br>    &#125;)<br>  &#125;<span class="hljs-keyword">else</span> &#123;<br>    message.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;登录失败&#x27;</span>)<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="用户注册界面">用户注册界面</h3><p>注册界面同理，直接复制登录界面在此基础上更改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;userRegisterPage&quot;&gt;<br>    &lt;h2 class=&quot;title&quot;&gt;KR云图库 - 用户注册&lt;/h2&gt;<br>    &lt;div class=&quot;desc&quot;&gt;企业级图库&lt;/div&gt;<br>    &lt;a-form<br>      :model=&quot;formState&quot;<br>      autocomplete=&quot;off&quot;<br>      @finish=&quot;handleSubmit&quot;<br>    &gt;<br>      &lt;a-form-item<br>        name=&quot;userAccount&quot;<br>        :rules=&quot;[&#123; required: true, message: &#x27;请输入账号&#x27; &#125;]&quot;<br>      &gt;<br>        &lt;a-input v-model:value=&quot;formState.userAccount&quot; placeholder=&quot;请输入账号&quot;/&gt;<br>      &lt;/a-form-item&gt;<br><br>      &lt;a-form-item<br>        name=&quot;userPassword&quot;<br>        :rules=&quot;[&#123; required: true, message: &#x27;请输入密码&#x27; &#125;,&#123;min:8,message: &#x27;密码不少于8位&#x27;&#125;]&quot;<br>      &gt;<br>        &lt;a-input-password v-model:value=&quot;formState.userPassword&quot; placeholder=&quot;请输入密码&quot;/&gt;<br>      &lt;/a-form-item&gt;<br><br>      &lt;a-form-item<br>        name=&quot;userPassword&quot;<br>        :rules=&quot;[&#123; required: true, message: &#x27;请输入密码&#x27; &#125;,&#123;min:8,message: &#x27;密码不少于8位&#x27;&#125;]&quot;<br>      &gt;<br>        &lt;a-input-password v-model:value=&quot;formState.userPassword&quot; placeholder=&quot;再次输入密码&quot;/&gt;<br>      &lt;/a-form-item&gt;<br><br>      &lt;div class=&quot;tips&quot;&gt;<br>        已有账号？<br>        &lt;RouterLink to=&quot;/user/login&quot;&gt;去登录&lt;/RouterLink&gt;<br>      &lt;/div&gt;<br><br>      &lt;a-form-item&gt;<br>        &lt;a-button type=&quot;primary&quot; html-type=&quot;submit&quot; style=&quot;width: 100%&quot;&gt;Submit&lt;/a-button&gt;<br>      &lt;/a-form-item&gt;<br>    &lt;/a-form&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script lang=&quot;ts&quot; setup&gt;<br>import &#123; reactive &#125; from &#x27;vue&#x27;;<br>import &#123; useRouter &#125; from &#x27;vue-router&#x27;<br>import &#123; userLoginUsingPost, userRegisterUsingPost &#125; from &#x27;@/api/userController&#x27;<br>import &#123; useLoginUserStore &#125; from &#x27;@/stores/user&#x27;<br>import &#123; message &#125; from &#x27;ant-design-vue&#x27;<br><br>const formState = reactive&lt;API.UserRegisterRequest&gt;(&#123;<br>  userAccount: &#x27;&#x27;,<br>  userPassword: &#x27;&#x27;,<br>  checkPassword: &#x27;&#x27;<br>&#125;);<br>const router = useRouter();<br>const loginUserStore = useLoginUserStore()<br><br>const handleSubmit = async (values: any) =&gt; &#123;<br><br>  if(formState.userPassword != formState.checkPassword) &#123;<br>    message.error(&#x27;两次输入密码不一致&#x27;)<br>    return<br>  &#125;<br>  const res = await userRegisterUsingPost(values)<br><br>  if(res.data.code == 0 &amp;&amp; res.data.data) &#123;<br>    message.success(&#x27;注册成功&#x27;)<br>    router.push(&#123;<br>      path: &#x27;/user/login&#x27;,<br>      replace: true,<br>    &#125;)<br>  &#125;else &#123;<br>    message.error(&#x27;注册失败&#x27;)<br>  &#125;<br>&#125;;<br><br>&lt;/script&gt;<br><br><br>&lt;style scoped&gt;<br>#userRegisterPage &#123;<br>  max-width: 400px;<br>  margin: 0 auto;<br>&#125;<br><br>#userRegisterPage .title &#123;<br>  text-align: center;<br>  margin-bottom: 16px;<br>&#125;<br><br>#userRegisterPage .desc &#123;<br>  text-align: center;<br>  color: #bbb;<br>  margin-bottom: 16px;<br>&#125;<br><br>#userRegisterPage .tips &#123;<br>  margin-bottom: 16px;<br>  color: #bbb;<br>  font-size: 13px;<br>  text-align: right;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p>虽然我们后端已经做了checkPass和userPass校验，但是前端还是需要做一下，毕竟两次输入密码不一致，根本不用调用后端接口</p><figure><img src="/img/pictureLibrary/image-20250711170050270.png"alt="image-20250711170050270" /><figcaption aria-hidden="true">image-20250711170050270</figcaption></figure><h3 id="用户注销-1">用户注销</h3><p>组件我们选择下拉框<ahref="https://antdv.com/components/dropdown-cn#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8">DropDown</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;a-dropdown&gt;<br>  &lt;ASpace&gt;<br>    &lt;a-avatar :src=&quot;loginUserStore.loginUser.userAvatar&quot; /&gt;<br>    &#123;&#123;loginUserStore.loginUser.userName ?? &#x27;无名&#x27;&#125;&#125;<br>  &lt;/ASpace&gt;<br>  &lt;template #overlay&gt;<br>&lt;a-menu&gt;<br>  &lt;a-menu-item @click=&quot;doLogOut&quot;&gt;<br>    退出登录<br>    &lt;/a-menu-item&gt;<br>    &lt;/a-menu&gt;<br>  &lt;/template&gt;<br>&lt;/a-dropdown&gt;<br></code></pre></td></tr></table></figure><figure><img src="/img/pictureLibrary/image-20250711170905406.png"alt="image-20250711170905406" /><figcaption aria-hidden="true">image-20250711170905406</figcaption></figure><p>doLogOut代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">doLogOut</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">userLogOutUsingPost</span>()<br><br>  <span class="hljs-keyword">if</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> === <span class="hljs-number">0</span>) &#123;<br>    loginUserStore.<span class="hljs-title function_">setLoginUser</span>(&#123;<br>      <span class="hljs-attr">userName</span>: <span class="hljs-string">&#x27;未登录&#x27;</span><br>    &#125;)<br>    message.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;注销成功&#x27;</span>)<br>    <span class="hljs-keyword">await</span> router.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/user/login&#x27;</span>)<br>  &#125;<span class="hljs-keyword">else</span> &#123;<br>    message.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;注销失败&#x27;</span>)<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="用户管理-1">用户管理</h3><p>用户管理界面允许管理员查看所有用户的基本信息，并可以通过某些字段进行查询指定用户</p><p>组件选择<ahref="https://antdv.com/components/table-cn#components-table-demo-basic">Table</a>组件</p><figure><img src="/img/pictureLibrary/image-20250711172511091.png"alt="image-20250711172511091" /><figcaption aria-hidden="true">image-20250711172511091</figcaption></figure><p><strong>1、展示的字段需要我们手动插入</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> columns = [<br>  &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;id&#x27;</span>,<br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;id&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;账号&#x27;</span>,<br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;userAccount&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;userName&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;头像&#x27;</span>,<br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;userAvatar&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;简介&#x27;</span>,<br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;userProfile&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;用户角色&#x27;</span>,<br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;userRole&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;createTime&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>    <span class="hljs-attr">dataIndex</span>: <span class="hljs-string">&#x27;updateTime&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;操作&#x27;</span>,<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;action&#x27;</span>,<br>  &#125;,<br>]<br></code></pre></td></tr></table></figure><p><strong>2、data-source绑定数据data，我们需要调用后端分页接口，获取数据并填充</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> dataList = ref&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">UserVO</span>[]&gt;([])<br><span class="hljs-keyword">const</span> total = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><br><br><span class="hljs-keyword">const</span> searchParams = reactive&lt;<span class="hljs-variable constant_">API</span>.<span class="hljs-property">UserQueryRequest</span>&gt;(&#123;<br>  <span class="hljs-attr">current</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">pageSize</span>: <span class="hljs-number">10</span><br>&#125;)<br><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">fetchData</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">listUserVoByPageUsingPost</span>(&#123;<br>    ...searchParams<br>  &#125;)<br><br>  <span class="hljs-keyword">if</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>) &#123;<br>    dataList.<span class="hljs-property">value</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-property">records</span> ?? []<br>    total.<span class="hljs-property">value</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-property">total</span> ?? <span class="hljs-number">0</span><br><br>  &#125;<span class="hljs-keyword">else</span> &#123;<br>    message.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;获取分页数据失败&#x27;</span> + res.<span class="hljs-property">data</span>.<span class="hljs-property">message</span>)<br>  &#125;<br>&#125;<br><br><br><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">fetchData</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>3、前端展示数据更改</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template #bodyCell=&quot;&#123; column, record &#125;&quot;&gt;<br>      &lt;template v-if=&quot;column.dataIndex === &#x27;userAvatar&#x27;&quot;&gt;<br>        &lt;a-image :src=&quot;record.userAvatar&quot;/&gt;<br>      &lt;/template&gt;<br>      &lt;template v-else-if=&quot;column.dataIndex === &#x27;userRole&#x27;&quot;&gt;<br>        &lt;div v-if=&quot;record.userRole == &#x27;admin&#x27;&quot;&gt;<br>          &lt;a-tag color=&quot;green&quot;&gt;管理员&lt;/a-tag&gt;<br>        &lt;/div&gt;<br>        &lt;div v-else&gt;<br>          &lt;a-tag color=&quot;blue&quot;&gt;用户&lt;/a-tag&gt;<br>        &lt;/div&gt;<br>      &lt;/template&gt;<br>      &lt;template v-else-if=&quot;column.dataIndex === &#x27;createTime&#x27;&quot;&gt;<br>        &#123;&#123;dayjs(record.createTime).format(&#x27;YYYY-MM-DD HH:mm:ss&#x27;)&#125;&#125;<br>      &lt;/template&gt;<br>      &lt;template v-else-if=&quot;column.key === &#x27;action&#x27;&quot;&gt;<br>        &lt;a-button danger&gt;删除&lt;/a-button&gt;<br>      &lt;/template&gt;<br>    &lt;/template&gt;<br></code></pre></td></tr></table></figure><p>展示效果如下</p><figure><img src="/img/pictureLibrary/image-20250711173711791.png"alt="image-20250711173711791" /><figcaption aria-hidden="true">image-20250711173711791</figcaption></figure><h4 id="插入分页">插入分页</h4><p>1）表格组件默认支持<ahref="https://antdv.com/components/pagination-cn/#api">分页</a>操作，自定义分页变量，指定current、pageSize、total</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> pagination = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">current</span>: searchParams.<span class="hljs-property">current</span> ?? <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">pageSize</span>: searchParams.<span class="hljs-property">pageSize</span> ?? <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">total</span>: total.<span class="hljs-property">value</span>,<br>    <span class="hljs-attr">showSizeChanger</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">showTotal</span>: <span class="hljs-function">(<span class="hljs-params">total</span>) =&gt;</span> <span class="hljs-string">`共<span class="hljs-subst">$&#123;total&#125;</span>条`</span>,<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>因为分页参数是在不停更改的需要我们设置其为计算属性，否则参数遍，pagination不会发生改变</p><p>2）编写函数，在与分页交互的时候，重新发送分页请求</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">doTableChange</span> = (<span class="hljs-params"><span class="hljs-attr">page</span>: <span class="hljs-built_in">any</span></span>) =&gt; &#123;<br>  searchParams.<span class="hljs-property">current</span> = page.<span class="hljs-property">current</span><br>  searchParams.<span class="hljs-property">pageSize</span> = page.<span class="hljs-property">pageSize</span><br>  <span class="hljs-title function_">fetchData</span>()<br>&#125;<br><br></code></pre></td></tr></table></figure><p>3）表格组件绑定分页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;a-table<br>  :columns=&quot;columns&quot;<br>  :data-source=&quot;dataList&quot;<br>  :pagination=&quot;pagination&quot;<br>  @change=&quot;doTableChange&quot;<br>&gt;<br><br></code></pre></td></tr></table></figure><p>效果如下</p><figure><img src="/img/pictureLibrary/image-20250711175157526.png"alt="image-20250711175157526" /><figcaption aria-hidden="true">image-20250711175157526</figcaption></figure><h4 id="关键词搜索">关键词搜索</h4><p>组件选择<ahref="https://antdv.com/components/input-cn#components-input-demo-search-input">Form</a></p><figure><img src="/img/pictureLibrary/image-20250711175634875.png"alt="image-20250711175634875" /><figcaption aria-hidden="true">image-20250711175634875</figcaption></figure><p>1）表单代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;a-form<br>      layout=&quot;inline&quot;<br>      :model=&quot;searchParams&quot;<br>      @finish=&quot;doSearch&quot;<br>    &gt;<br>      &lt;a-form-item label=&quot;账号&quot;&gt;<br>        &lt;a-input v-model:value=&quot;searchParams.userAccount&quot; placeholder=&quot;输入账号&quot; /&gt;<br>      &lt;/a-form-item&gt;<br>        <br>        &lt;a-form-item label=&quot;用户名&quot;&gt;<br>        &lt;a-input v-model:value=&quot;searchParams.userName&quot; placeholder=&quot;输入用户名&quot; /&gt;<br>      &lt;/a-form-item&gt;<br>        <br>      &lt;a-form-item&gt;<br>        &lt;a-button<br>          type=&quot;primary&quot;<br>          html-type=&quot;submit&quot;<br>        &gt;<br>          搜索<br>        &lt;/a-button&gt;<br>      &lt;/a-form-item&gt;<br>    &lt;/a-form&gt;<br></code></pre></td></tr></table></figure><p>2）doSearch函数，当出发后，需要将current设置为1，重新搜索</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">doSearch</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  searchParams.<span class="hljs-property">current</span> = <span class="hljs-number">1</span><br>  <span class="hljs-title function_">fetchData</span>()<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="操作">操作</h4><p>点击删除按钮后，确保数据真的删除同时刷新界面</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">doDelete</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"><span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span></span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span>(!id) &#123;<br>    <span class="hljs-keyword">return</span><br>  &#125;<br><br> <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">deleteUserByIdUsingPost</span>(&#123;<br>    id<br>  &#125;)<br><br>  <span class="hljs-keyword">if</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> === <span class="hljs-number">0</span>) &#123;<br>    message.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;删除成功&#x27;</span>)<br>    <span class="hljs-title function_">fetchData</span>()<br>  &#125;<span class="hljs-keyword">else</span> &#123;<br>    message.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;删除失败&#x27;</span>)<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>按钮绑定事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;a-button danger @click=&quot;doDelete(record.id)&quot;&gt;删除&lt;/a-button&gt;<br></code></pre></td></tr></table></figure><h3 id="用户权限控制-1">用户权限控制</h3><p>虽然后端做好了权限校验，避免了非管理员进行用户管理。前端也需要处理</p><p>这里涉及到两种实现方式：单页面权限控制、全局权限控制</p><p>单页面指的是将权限控制的代码写入到单个页面控制，全局相当于抽离出一个文件专门做权限控制</p><p>这里我们选择全局权限控制，在src下创建<code>access.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; useLoginUserStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/stores/useLoginUserStore&#x27;</span><br><span class="hljs-keyword">import</span> &#123; message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ant-design-vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/router&#x27;</span><br><br><span class="hljs-comment">// 是否为首次获取登录用户</span><br><span class="hljs-keyword">let</span> firstFetchLoginUser = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 全局权限校验</span><br><span class="hljs-comment"> */</span><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-title function_">async</span> (to, <span class="hljs-keyword">from</span>, next) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> loginUserStore = <span class="hljs-title function_">useLoginUserStore</span>()<br>  <span class="hljs-keyword">let</span> loginUser = loginUserStore.<span class="hljs-property">loginUser</span><br>  <span class="hljs-comment">// 确保页面刷新，首次加载时，能够等后端返回用户信息后再校验权限</span><br>  <span class="hljs-keyword">if</span> (firstFetchLoginUser) &#123;<br>    <span class="hljs-keyword">await</span> loginUserStore.<span class="hljs-title function_">fetchLoginUser</span>()<br>    loginUser = loginUserStore.<span class="hljs-property">loginUser</span><br>    firstFetchLoginUser = <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">const</span> toUrl = to.<span class="hljs-property">fullPath</span><br>  <span class="hljs-keyword">if</span> (toUrl.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;/admin&#x27;</span>)) &#123;<br>    <span class="hljs-keyword">if</span> (!loginUser || loginUser.<span class="hljs-property">userRole</span> !== <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>      message.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;没有权限&#x27;</span>)<br>      <span class="hljs-title function_">next</span>(<span class="hljs-string">`/user/login?redirect=<span class="hljs-subst">$&#123;to.fullPath&#125;</span>`</span>)<br>      <span class="hljs-keyword">return</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">next</span>()<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>这串代码很好理解</p><p>当我们没有用户数据，需要首次向后端请求，拿到用户数据后判断跳转的页面是否是管理员才可以访问的</p><p>如果用户角色为普通用户，那么跳转登录界面</p><p>这里使用await等待后端数据返回(Promise函数执行完毕)，才进行权限校验</p><p>main.ts全局引入access.ts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@/access&#x27;</span><br></code></pre></td></tr></table></figure><p>虽然已经完成了权限控制的需求，但是普通用户并不应该在顶部栏看到用户管理菜单，接着更改GlobalHeader</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> originItems = [<br>  &#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">icon</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">HomeOutlined</span>),<br>    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;主页&#x27;</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;主页&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;/admin/userManage&#x27;</span>,<br>    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;用户管理&#x27;</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;用户管理&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;/blog&#x27;</span>,<br>    <span class="hljs-attr">label</span>: <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;a&#x27;</span>, &#123; <span class="hljs-attr">href</span>: <span class="hljs-string">&#x27;https://korinall.github.io/&#x27;</span>, <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;_blank&#x27;</span> &#125;, <span class="hljs-string">&#x27;作者博客&#x27;</span>),<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;作者BLOG&#x27;</span>,<br>  &#125;,<br>]<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">filterMenus</span> = (<span class="hljs-params">menus = [] <span class="hljs-keyword">as</span> <span class="hljs-title class_">MenuProps</span>[<span class="hljs-string">&#x27;items&#x27;</span>]</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> menus?.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">menu</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span>(menu?.<span class="hljs-property">key</span>.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;/admin&#x27;</span>)) &#123;<br>      <span class="hljs-keyword">const</span> loginUser = loginUserStore.<span class="hljs-property">loginUser</span><br>      <span class="hljs-keyword">if</span> (!loginUser || loginUser.<span class="hljs-property">userRole</span> !== <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>      &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  &#125;)<br>&#125;<br><br><br><span class="hljs-keyword">const</span> items = computed&lt;<span class="hljs-title class_">MenuProps</span>[<span class="hljs-string">&#x27;items&#x27;</span>]&gt;(<span class="hljs-function">()=&gt;</span> <span class="hljs-title function_">filterMenus</span>(originItems))<br></code></pre></td></tr></table></figure><p>这里我们对原菜单项进行了一个过滤，但凡其中的key头部包含管理员将其给过滤掉</p><p>这里我一直对这个<code>MenuProps['items']</code>有个疑问，不到这个到底是个啥？</p><p>查了一下<code>MenuProps['items']</code>等价于<code>MenuItem[]</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">//MenuItem接口</span><br>&#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>  <span class="hljs-attr">icon</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">HomeOutlined</span>),<br>  <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;主页&#x27;</span>,<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;主页&#x27;</span>,<br>&#125;,<br></code></pre></td></tr></table></figure><p>测试，成功！！</p><figure><img src="/img/pictureLibrary/image-20250711184650780.png"alt="image-20250711184650780" /><figcaption aria-hidden="true">image-20250711184650780</figcaption></figure><p>扩展：在右上角添加个人中心，可以编辑用户信息</p>]]></content>
    
    
    <categories>
      
      <category>项目实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KR云图库Day01</title>
    <link href="/2025/07/10/%E4%BA%91%E5%9B%BE%E5%BA%9301/"/>
    <url>/2025/07/10/%E4%BA%91%E5%9B%BE%E5%BA%9301/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>最后更新于：2025/7/10 PM</p>          </div><h1 id="前言">前言</h1><p>基于之前一直观看视频学习，没有记录笔记感觉并没有真正学到什么，有点自欺欺人的感觉</p><p>再加上本人比较迷恋游戏，不知不觉浪费的半个多月的时间</p><p>所以从今天开始根据文字教程依次学习，把自己在项目中遇到的问题解决收集一些陌生的概念和语法</p><p>废话少说现在开始。。。。。</p><h1 id="项目介绍">项目介绍</h1><h2 id="概述">概述</h2><p>在开始之前，我们需要对我们要做的项目有一个基本的认识，清楚自己在做什么，做这个项目有什么意义？？</p><blockquote><p>我们要做的项目是一个云图库项目，就类似于网上的图片网站</p></blockquote><p>教程：参考<ahref="https://www.codefather.cn/course/1864210260732116994/section/1864990875352473601?type=#heading-0">鱼皮图库项目</a></p><p>部分模块介绍，整个项目围绕以下几点进行实现</p><p>1）用户模块：登录注册</p><p>2）图片模块：上传图片，管理图片，查询图片，管理员审核图片</p><p>3）空间模块：个人空间，团队空间</p><h2id="核心业务流程可以帮助我们下一步该做什么本人太懒不太爱画这个hh但是一定要多画">核心业务流程(可以帮助我们下一步该做什么，本人太懒不太爱画这个hh，但是一定要多画)</h2><p>在线工具：<a href="https://draw.io">draw.io</a></p><h3 id="一图库平台流程">一、图库平台流程</h3><figure><img src="/img/pictureLibrary/user_modal.png" alt="user_modal" /><figcaption aria-hidden="true">user_modal</figcaption></figure><h3 id="二加入用户私有图库">二、加入用户私有图库</h3><figure><img src="/img/pictureLibrary/private_user_modal.png"alt="private_user_modal" /><figcaption aria-hidden="true">private_user_modal</figcaption></figure><h3 id="三加入团队空间">三、加入团队空间</h3><figure><img src="/img/pictureLibrary/team_modal.png" alt="team_modal" /><figcaption aria-hidden="true">team_modal</figcaption></figure><h2 id="项目功能介绍">项目功能介绍</h2><h3 id="阶段一">阶段一</h3><p>用户模块</p><ul><li>登录</li><li>注册</li><li>注销</li><li>AOP权限控制</li><li>用户管理</li></ul><p>图片模块</p><ul><li>上传图片</li><li>编辑图片</li><li>图片管理</li><li>关键词搜索图片</li><li>下载图片</li><li>审核用户上传的图片</li><li>导入图片<ul><li>URL上传</li><li>本地上传</li></ul></li><li>优化<ul><li>缓存优化查询</li><li>上传优化</li><li>加载优化</li><li>存储优化</li></ul></li></ul><h3 id="阶段二">阶段二</h3><p>用户私有空间</p><ul><li>空间管理(管理员)</li><li>用户开通私有空间</li><li>权限控制</li><li>空间级别</li><li>用户空间、管理员全空间分析</li></ul><p>图片模块</p><ul><li>图片搜索<ul><li>字段搜索</li><li>以图搜图</li><li>颜色搜索</li></ul></li><li>图片分享<ul><li>二维码分享</li><li>链接分享</li></ul></li><li>批量管理<ul><li>重命名</li><li>修改信息</li></ul></li><li>图片编辑<ul><li>AI编辑</li><li>基础编辑</li></ul></li></ul><h3 id="阶段三">阶段三</h3><p>空间模块</p><ul><li>创建团队空间</li><li>空间成员管理</li><li>成员邀请</li><li>成员权限控制</li></ul><p>图片模块</p><ul><li>协同编辑</li></ul><h2 id="技术选型">技术选型</h2><p>前端</p><ul><li>Vue3 + AntDesign Vue</li><li>Pinia 全局状态管理</li><li>格式化工具：Prettier、ESlint、TS</li><li>OpenAPI</li><li>axios</li></ul><p>后端</p><ul><li>SpringBoot</li><li>MySQL + MyBatis + MP</li><li>Redis + Caffeine 缓存</li><li>Jsoup数据抓取</li><li>COS + 数据万象</li><li>WebSocket</li><li>编程式事务操作</li></ul><h1 id="项目初始化">项目初始化</h1><h2 id="后端项目初始化">后端项目初始化</h2><h3 id="环境配置">环境配置</h3><p>1）JDK17</p><p>2）MySQL8</p><h3 id="idea配置">IDEA配置</h3><h4 id="一引入基础依赖">一、引入基础依赖</h4><ol type="1"><li>Spring Web：提供Web服务，通过localhost:端口请求接口</li><li>Lombok：<span class="citation" data-cites="Data">@Data</span>注解提供getter setter</li><li>Mybatis Framework：mb 基础操作数据库服务</li><li>提供IDEA里连接Mysql的接口</li></ol><figure><img src="/img/pictureLibrary/1.png" alt="1" /><figcaption aria-hidden="true">1</figcaption></figure><h4 id="二启动">二、启动！</h4><figure><img src="/img/pictureLibrary/image-20250710143603834.png"alt="image-20250710143603834" /><figcaption aria-hidden="true">image-20250710143603834</figcaption></figure><p>报错了？别慌，观察错误信息说我们并没有对数据库进行相关的配置，对咯、application.yml都没改跑个毛</p><h4 id="三添加配置项">三、添加配置项</h4><p><code>application.yml</code></p><p>初次写建议自己写一遍就当练习了</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8082</span> <span class="hljs-comment"># 服务端口</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/api</span> <span class="hljs-comment">#设置上下文路径，之后访问后端接口需要带/api</span><br><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">kr-picture-backend</span><br><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span> <br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/kr_picture</span> <br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">intmain()</span><br><br></code></pre></td></tr></table></figure><p>datasource的信息除了<code>driver-class-name</code>是写死的，其余的都可以参照图片信息</p><figure><img src="/img/pictureLibrary/image-20250710144516360.png"alt="image-20250710144516360" /><figcaption aria-hidden="true">image-20250710144516360</figcaption></figure><h4 id="四整合依赖">四、整合依赖</h4><p>1）Mybatis-plus</p><p>引入MP 需要移除Mybatis 相关依赖以免冲突</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>在启动类中，添加@MapperScan注解同时指定mapper包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(&quot;com.kroot.krpicturebackend.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KrPictureBackendApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(KrPictureBackendApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>application.yml中添加MP相关配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>  <span class="hljs-comment"># 执行sql语句时，字段下划线转驼峰</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 仅在开发环境开启日志</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">logic-delete-field:</span> <span class="hljs-string">isDelete</span> <span class="hljs-comment"># 全局逻辑删除的实体字段名</span><br>      <span class="hljs-attr">logic-delete-value:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 逻辑已删除值（默认为 1）</span><br>      <span class="hljs-attr">logic-not-delete-value:</span> <span class="hljs-number">0</span> <span class="hljs-comment"># 逻辑未删除值（默认为 0）</span><br><br></code></pre></td></tr></table></figure><p>2）Hutool</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.26<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3）Knife4j</p><p><ahref="https://doc.xiaominfo.com/docs/quick-start#spring-boot-2">官方文档，依赖引入以及yml配置</a></p><p>Swagger升级版，后端API文档</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-openapi2-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>yml配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 接口文档配置</span><br><span class="hljs-attr">knife4j:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">openapi:</span><br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;接口文档&quot;</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">1.0</span><br>    <span class="hljs-attr">group:</span><br>      <span class="hljs-attr">default:</span><br>        <span class="hljs-attr">api-rule:</span> <span class="hljs-string">package</span><br>        <span class="hljs-attr">api-rule-resources:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">com.kroot.krpicturebackend.controller</span><br><br></code></pre></td></tr></table></figure><p>编写controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/health&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">health</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Nice try&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试</p><p>编写controller包，同时包下创建<code>MainController</code>测试接口文档，启动项目访问<ahref="http://localhost:8082/api/doc.html#/home">http://localhost:8082/api/doc.html#/home</a>，同时发现刚才我们添加的Controller下的health接口也生效了</p><figure><img src="/img/pictureLibrary/image-20250710150522714.png"alt="image-20250710150522714" /><figcaption aria-hidden="true">image-20250710150522714</figcaption></figure><p>4）AOP</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4id="五通用代码块多练写熟练了再copy">五、通用代码块（多练，写熟练了再Copy）</h4><p>异常通用基础代码</p><p><strong>1、自定义异常</strong></p><p>✨技巧404作为HTTP错误码意思是Not Found，那我们定义状态码为40400</p><p>其余的状态码类似，针对于错误码一个code对应一条消息，我们将其定义为枚举，同时设置@Getter方便获取字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kroot.krpicturebackend.exception;<br><br><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ErrorCode</span> &#123;<br><br>    SUCCESS(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;ok&quot;</span>),<br>    PARAMS_ERROR(<span class="hljs-number">40000</span>, <span class="hljs-string">&quot;请求参数错误&quot;</span>),<br>    NOT_LOGIN_ERROR(<span class="hljs-number">40100</span>, <span class="hljs-string">&quot;未登录&quot;</span>),<br>    NO_AUTH_ERROR(<span class="hljs-number">40101</span>, <span class="hljs-string">&quot;无权限&quot;</span>),<br>    NOT_FOUND_ERROR(<span class="hljs-number">40400</span>, <span class="hljs-string">&quot;请求数据不存在&quot;</span>),<br>    FORBIDDEN_ERROR(<span class="hljs-number">40300</span>, <span class="hljs-string">&quot;禁止访问&quot;</span>),<br>    SYSTEM_ERROR(<span class="hljs-number">50000</span>, <span class="hljs-string">&quot;系统内部异常&quot;</span>),<br>    OPERATION_ERROR(<span class="hljs-number">50001</span>, <span class="hljs-string">&quot;操作失败&quot;</span>);<br><br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> code;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String message;<br><br>    ErrorCode(<span class="hljs-type">int</span> code, String message) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>在项目中我们往往不直接抛出<code>RuntimeException</code>，需要自定义业务异常类<code>BusinessException</code>同时继承<code>RuntimeException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kroot.krpicturebackend.exception;<br><br><br><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BusinessException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span>&#123;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BusinessException</span><span class="hljs-params">(<span class="hljs-type">int</span> code,String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BusinessException</span><span class="hljs-params">(ErrorCode errorCode)</span> &#123;<br>        <span class="hljs-built_in">super</span>(errorCode.getMessage());<br>        <span class="hljs-built_in">this</span>.code = errorCode.getCode();<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BusinessException</span><span class="hljs-params">(ErrorCode errorCode,String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>        <span class="hljs-built_in">this</span>.code = errorCode.getCode();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>为了不直接抛出异常，可以设置断言、通过某些条件判断是否跑出异常，我们可以封装一个Utils，方法定义为static方法方便<code>ThrowUtils.throwIf</code>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kroot.krpicturebackend.exception;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThrowUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">throwIf</span><span class="hljs-params">(<span class="hljs-type">boolean</span> condition, RuntimeException runtimeException)</span> &#123;<br>        <span class="hljs-keyword">if</span>(condition) &#123;<br>            <span class="hljs-keyword">throw</span> runtimeException;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">throwIf</span><span class="hljs-params">(<span class="hljs-type">boolean</span> condition, ErrorCode errorCode)</span> &#123;<br>        <span class="hljs-keyword">if</span>(condition) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(errorCode.getCode(), errorCode.getMessage());<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">throwIf</span><span class="hljs-params">(<span class="hljs-type">boolean</span> condition, ErrorCode errorCode,String message)</span> &#123;<br>        <span class="hljs-keyword">if</span>(condition) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(errorCode.getCode(), message);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>2、响应包装类</strong></p><p>正常情况下，后端需要返回一个统一的格式，方便前端对数据进行响应的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kroot.krpicturebackend.common;<br><br><span class="hljs-keyword">import</span> com.kroot.krpicturebackend.exception.ErrorCode;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseResponse</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br><br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseResponse</span><span class="hljs-params">(<span class="hljs-type">int</span> code, T data, String message)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.data = data;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseResponse</span><span class="hljs-params">(<span class="hljs-type">int</span> code, T data)</span> &#123;<br>        <span class="hljs-built_in">this</span>(code,data,<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseResponse</span><span class="hljs-params">(ErrorCode errorCode)</span> &#123;<br>        <span class="hljs-built_in">this</span>(errorCode.getCode(),<span class="hljs-literal">null</span>,errorCode.getMessage());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>但是现在每一次返回值都需要<code>new BaseResponse</code>，我们可以自定义一个工具类，针对于成功与失败的情况进行new响应包装类的封装</p><p>针对于泛型方法，如果参数中涉及泛型，那么需要在方法前添加<code>&lt;T&gt;</code>来表明是个泛型方法</p><p>在不使用泛型参数的时候返回值可以使用？代表不需要知道确切类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kroot.krpicturebackend.common;<br><br><span class="hljs-keyword">import</span> com.kroot.krpicturebackend.exception.ErrorCode;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; BaseResponse&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">(T data)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(<span class="hljs-number">0</span>,data,<span class="hljs-string">&quot;ok&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BaseResponse&lt;?&gt; error(ErrorCode errorCode) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(errorCode.getCode(),<span class="hljs-literal">null</span>,errorCode.getMessage());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BaseResponse&lt;?&gt; error(ErrorCode errorCode,String message) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(errorCode.getCode(),<span class="hljs-literal">null</span>,message);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>3、全局异常处理器</strong></p><p>为了防止出现一些意料之外的异常，可以封装全局异常，针对于RuntimeException和业务异常分别进行捕获</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br>    <span class="hljs-meta">@ExceptionHandler(BusinessException.class)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;?&gt; businessExceptionHandler(BusinessException e) &#123;<br>        log.error(<span class="hljs-string">&quot;BusinessException&quot;</span>,e);<br>        <span class="hljs-keyword">return</span> ResultUtils.error(e.getCode(),e.getMessage());<br>    &#125;<br><br><br>    <span class="hljs-meta">@ExceptionHandler(RuntimeException.class)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;?&gt; runtimeExceptionHandler(RuntimeException e) &#123;<br>        log.error(<span class="hljs-string">&quot;RuntimeException&quot;</span>,e);<br>        <span class="hljs-keyword">return</span> ResultUtils.error(ErrorCode.SYSTEM_ERROR,<span class="hljs-string">&quot;系统错误&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>4、请求封装类</strong></p><p>针对于某些公共的请求，参数一致，我们可以把它单独提取出来</p><p>分页请求包装类封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kroot.krpicturebackend.common;<br><br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">6981652838124494846L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">pageSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-comment">//排序字段</span><br>    <span class="hljs-keyword">private</span> String sortField;<br><br>    <span class="hljs-comment">//升序还是降序</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">sortOrder</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;descend&quot;</span>;<br>    <br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><p>删除请求封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kroot.krpicturebackend.common;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeleteRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">6018983994171083590L</span>;<br>    <span class="hljs-keyword">private</span> Long id;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>5、全局配置跨域</strong></p><p>什么是跨域问题？</p><blockquote><p>跨域指的是浏览器中访问URL和后端URL或者是端口不一致情况，例如后端运行localhost:8080，前端localhost:5347，前端请求后端就会触发跨域问题</p></blockquote><p>新建config包下创建CorsConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CorsConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>        <span class="hljs-comment">// 覆盖所有请求</span><br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                <span class="hljs-comment">// 允许发送 Cookie</span><br>                .allowCredentials(<span class="hljs-literal">true</span>)<br>                <span class="hljs-comment">// 放行哪些域名（必须用 patterns，否则 * 会和 allowCredentials 冲突）</span><br>                .allowedOriginPatterns(<span class="hljs-string">&quot;*&quot;</span>)<br>                .allowedMethods(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;PUT&quot;</span>, <span class="hljs-string">&quot;DELETE&quot;</span>, <span class="hljs-string">&quot;OPTIONS&quot;</span>)<br>                .allowedHeaders(<span class="hljs-string">&quot;*&quot;</span>)<br>                .exposedHeaders(<span class="hljs-string">&quot;*&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>后端配置到此结束，启动项目检查是否生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainController</span> &#123;<br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;String&gt; <span class="hljs-title function_">health</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> ResultUtils.success(<span class="hljs-string">&quot;Nice Try&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里有一个疑问，为什么当我们使用@Controller注解会发生报错？</p><ul><li>想要返回对象本身，<span class="citation"data-cites="RestController会将返回值序列化为HTTP响应体">@RestController会将返回值序列化为HTTP响应体</span>(JSON)</li><li>或者使用@Controller + <span class="citation"data-cites="ResponseBody组合">@ResponseBody组合</span></li><li><span class="citation"data-cites="Controller返回的是HTML界面">@Controller返回的是HTML界面</span>，Restful规范要求服务器返回结构化数据(JSON)</li></ul><p>返回结果，和我们定义的一样，说明没毛病</p><figure><img src="/img/pictureLibrary/image-20250710161709041.png"alt="image-20250710161709041" /><figcaption aria-hidden="true">image-20250710161709041</figcaption></figure><h2 id="前端项目初始化">前端项目初始化</h2><h3 id="环境要求">环境要求</h3><p>Nodejs &gt;= 18</p><p>包管理工具yarn + npm(2选1)</p><h3 id="创建项目">创建项目</h3><p>初始化 vue3.12.1 版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm create vue@3.12.1<br></code></pre></td></tr></table></figure><p>依次按照下面步骤做</p><figure><img src="/img/pictureLibrary/image-20250710162312780.png"alt="image-20250710162312780" /><figcaption aria-hidden="true">image-20250710162312780</figcaption></figure><p>启动WebStorm打开项目，终端执行<code>npm install</code>安装依赖，接着运行package.json中的dev，或者输入指令<code>npm run dev</code>，看到这个界面运行成功</p><figure><img src="/img/pictureLibrary/image-20250710162929753.png"alt="image-20250710162929753" /><figcaption aria-hidden="true">image-20250710162929753</figcaption></figure><p>配置美化工具Prettier</p><figure><img src="/img/pictureLibrary/image-20250710163040790.png"alt="image-20250710163040790" /><figcaption aria-hidden="true">image-20250710163040790</figcaption></figure><p>配置好后可以项目中右键可以格式化</p><figure><img src="/img/pictureLibrary/image-20250710163222233.png"alt="image-20250710163222233" /><figcaption aria-hidden="true">image-20250710163222233</figcaption></figure><p>关闭Eslint，防止编译错误</p><figure><img src="/img/pictureLibrary/image-20250710163343894.png"alt="image-20250710163343894" /><figcaption aria-hidden="true">image-20250710163343894</figcaption></figure><h4 id="引入组件库ant-design-vue">引入组件库(Ant Design Vue)</h4><p><a href="https://antdv.com/docs/vue/getting-started">GettingStarted</a></p><figure><img src="/img/pictureLibrary/image-20250710163644757.png"alt="image-20250710163644757" /><figcaption aria-hidden="true">image-20250710163644757</figcaption></figure><p>验证是否引入成功，可以看到按钮已经引入成功了</p><figure><img src="/img/pictureLibrary/image-20250710163955618.png"alt="image-20250710163955618" /><figcaption aria-hidden="true">image-20250710163955618</figcaption></figure><p>定义开发规范</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;xxPage&quot;&gt;<br><br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br><br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>#xxPage &#123;<br>&#125;<br><br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p>修改基础标签信息</p><p>更改根目录下的index.html，同时替换/public下的favicon.ico，修改后效果如下</p><figure><img src="/img/pictureLibrary/image-20250710164533893.png"alt="image-20250710164533893" /><figcaption aria-hidden="true">image-20250710164533893</figcaption></figure><h4 id="全局通用布局引入">全局通用布局引入</h4><p>创建layout目录，新建布局<code>BasicLayout.vue</code>，同时在Vue中引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup lang=&quot;ts&quot;&gt;<br>import BasicLayout from &#x27;@/layout/BasicLayout.vue&#x27;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>    &lt;BasicLayout /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p>BasicLayout 布局参考 <ahref="https://antdv.com/components/layout">Ant Design vue layout</a></p><figure><img src="/img/pictureLibrary/image-20250710165305691.png"alt="image-20250710165305691" /><figcaption aria-hidden="true">image-20250710165305691</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;basicLayOut&quot;&gt;<br>    &lt;a-layout&gt;<br>      &lt;a-layout-header&gt;Header&lt;/a-layout-header&gt;<br>      &lt;a-layout-content&gt;Content&lt;/a-layout-content&gt;<br>      &lt;a-layout-footer&gt;Footer&lt;/a-layout-footer&gt;<br>    &lt;/a-layout&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br><br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>#basicLayOut &#123;<br><br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><h4 id="全局底部栏">全局底部栏</h4><blockquote><p>底部主要显示版权信息，需要设置fixed样式，使其固定在底部</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;a-layout-footer class=&quot;footer&quot;&gt;<br>    &lt;a href=&quot;https://github.com&quot; target=&quot;_blank&quot;&gt;联系KotRin&lt;/a&gt;<br>&lt;/a-layout-footer&gt;<br></code></pre></td></tr></table></figure><p>样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#basicLayOut</span> <span class="hljs-selector-class">.footer</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#efefef</span>;<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="内容部分根据vue-router动态展示">内容部分根据VueRouter动态展示</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;a-layout-content&gt;<br>     &lt;router-view /&gt;<br>&lt;/a-layout-content&gt;<br></code></pre></td></tr></table></figure><p>样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#basicLayOut</span> <span class="hljs-selector-class">.content</span>&#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right,<span class="hljs-number">#fefefe</span>,<span class="hljs-number">#fff</span>);  //背景色设置为渐变色<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">30px</span>;   //为了防止被<span class="hljs-selector-tag">footer</span>遮挡<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;  //使内容靠中<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="全局顶部烂">全局顶部烂</h4><p>参考<a href="https://antdv.com/components/menu#Menu">Ant DesignMenu</a></p><figure><img src="/img/pictureLibrary/image-20250710171353472.png"alt="image-20250710171353472" /><figcaption aria-hidden="true">image-20250710171353472</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;a-layout-header&gt;<br>    &lt;GlobalHeader /&gt;<br>&lt;/a-layout-header&gt;<br></code></pre></td></tr></table></figure><p>引入全局顶部栏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">GlobalHeader</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/GlobalHeader.vue&#x27;</span><br></code></pre></td></tr></table></figure><figure><img src="/img/pictureLibrary/image-20250710171555420.png"alt="image-20250710171555420" /><figcaption aria-hidden="true">image-20250710171555420</figcaption></figure><p>顶部栏ant design 定义的默认padding-inline: 50px</p><p>样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#basicLayOut</span> <span class="hljs-selector-class">.header</span> &#123;<br>  <span class="hljs-attribute">padding-inline</span>: <span class="hljs-number">20px</span>; //等于<span class="hljs-attribute">padding-left</span>:<span class="hljs-number">20px</span>;<span class="hljs-attribute">padding-right</span>:<span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">16px</span>; <br>  <span class="hljs-attribute">background</span>: white;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>按照需求修改默认菜单</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; h, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MailOutlined</span>, <span class="hljs-title class_">HomeOutlined</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons-vue&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MenuProps</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ant-design-vue&#x27;</span>;<br><span class="hljs-keyword">const</span> current = ref&lt;string[]&gt;([<span class="hljs-string">&#x27;mail&#x27;</span>]);<br><span class="hljs-keyword">const</span> items = ref&lt;<span class="hljs-title class_">MenuProps</span>[<span class="hljs-string">&#x27;items&#x27;</span>]&gt;([<br>  &#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">icon</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">HomeOutlined</span>),<br>    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;主页&#x27;</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;主页&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;关于&#x27;</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;关于&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;/blog&#x27;</span>,<br>    <span class="hljs-attr">label</span>: <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;a&#x27;</span>, &#123; <span class="hljs-attr">href</span>: <span class="hljs-string">&#x27;https://korinall.github.io/&#x27;</span>, <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;_blank&#x27;</span> &#125;, <span class="hljs-string">&#x27;作者博客&#x27;</span>),<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;作者BLOG&#x27;</span>,<br><br>  &#125;,<br>]);<br></code></pre></td></tr></table></figure><p>效果如下</p><figure><img src="/img/pictureLibrary/image-20250710173327570.png"alt="image-20250710173327570" /><figcaption aria-hidden="true">image-20250710173327570</figcaption></figure><p>h()是Vue中的虚拟DOM函数，用法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">h(<span class="hljs-string">&#x27;a&#x27;</span>, &#123; href: <span class="hljs-string">&#x27;https://korinall.github.io/&#x27;</span>, target: <span class="hljs-string">&#x27;_blank&#x27;</span> &#125;, <span class="hljs-string">&#x27;作者博客&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lisp">h(&#x27;div&#x27;,&#123;class: &#x27;container&#x27;&#125;,[<br>h(&#x27;h1&#x27;,标题),<br>h(&#x27;p&#x27;,&#x27;内容&#x27;)<br>])<br></code></pre></td></tr></table></figure><p>优化导航栏</p><p>除此之外，我需要在左侧添加Logo 标题，点击后可以跳回主页</p><p>右侧添加登录按钮</p><p>这里分为三部分，建议使用<ahref="https://antdv.com/components/grid/#Grid">Ant DesignGrid</a>，左右两侧自定义width大小，中间自适应</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div id=&quot;globalHeader&quot;&gt;<br>  &lt;a-row&gt;<br>    &lt;a-col flex=&quot;200px&quot;&gt;<br>      //RouterLink组件支持超链接跳转，不刷新界面<br>      &lt;RouterLink to=&quot;/&quot;&gt;<br>        &lt;div class=&quot;title-bar&quot;&gt;<br>          &lt;img class=&quot;logo&quot; src=&quot;../assets/logo.png&quot; alt=&quot;logo&quot; /&gt;<br>          &lt;div class=&quot;title&quot;&gt;KR智能云图库&lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/RouterLink&gt;<br>    &lt;/a-col&gt;<br>    &lt;a-col flex=&quot;auto&quot;&gt;<br>      &lt;a-menu v-model:selectedKeys=&quot;current&quot; mode=&quot;horizontal&quot; :items=&quot;items&quot; /&gt;<br>    &lt;/a-col&gt;<br>    &lt;a-col flex=&quot;180px&quot;&gt;<br>      &lt;a-button type=&quot;primary&quot; href=&quot;/user/login&quot;&gt;登录&lt;/a-button&gt;<br>    &lt;/a-col&gt;<br>  &lt;/a-row&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>效果如下</p><figure><img src="/img/pictureLibrary/image-20250710180019627.png"alt="image-20250710180019627" /><figcaption aria-hidden="true">image-20250710180019627</figcaption></figure><h4 id="路由">路由</h4><p>路由配置中一个path对应一个components，同时支持按需懒加载组件(不点击不加载)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">BASE_URL</span>),<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">HomeView</span>,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>,<br>      <span class="hljs-comment">// route level code-splitting</span><br>      <span class="hljs-comment">// this generates a separate chunk (About.[hash].js) for this route</span><br>      <span class="hljs-comment">// which is lazy-loaded when the route is visited.</span><br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/AboutView.vue&#x27;</span>),<br>    &#125;,<br>  ],<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>GlobalHeader添加路由跳转，ant designvue中<code>a-menu</code>标签是支持@click的</p><figure><img src="/img/pictureLibrary/image-20250710181156925.png"alt="image-20250710181156925" /><figcaption aria-hidden="true">image-20250710181156925</figcaption></figure><p>返回的结果是一个对象，如果看不懂，可以通过console.log打印</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">doMenuClick</span> = (<span class="hljs-params">val: any</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(val)<br>&#125;<br></code></pre></td></tr></table></figure><figure><img src="/img/pictureLibrary/image-20250710181247119.png"alt="image-20250710181247119" /><figcaption aria-hidden="true">image-20250710181247119</figcaption></figure><p>我们可以通过解构的方式提取出内部key，跳转到对应位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">doMenuClick</span> = (<span class="hljs-params">&#123;key&#125;: &#123;key: string&#125;</span>) =&gt; &#123;<br>  router.<span class="hljs-title function_">push</span>(&#123;<br>    <span class="hljs-attr">path</span>: key,<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="设置高亮">设置高亮</h4><p>高亮原理</p><p>点击菜单后，v-model绑定了current值实现高亮</p><p>刷新界面需要根据URL路径来修改current的值来实现高亮</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;a-col flex=&quot;auto&quot;&gt;<br>   &lt;a-menu v-model:selectedKeys=&quot;current&quot; mode=&quot;horizontal&quot; :items=&quot;items&quot; @click=&quot;doMenuClick&quot; /&gt;<br>&lt;/a-col&gt;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> current = ref&lt;string[]&gt;([])<br></code></pre></td></tr></table></figure><p>这里我们可以使用生命周期钩子<code>afterEach</code>监听路由变化，当界面发生刷新自动更改current的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">afterEach</span>(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>) =&gt;</span> &#123;<br>  current.<span class="hljs-property">value</span> = [to.<span class="hljs-property">path</span>];<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="axios请求">axios请求</h4><p>为了方便我们向后端发送请求，获取数据，这里我们需要引入axios</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> axios<br></code></pre></td></tr></table></figure><p>全局自定义请求</p><p>应用场景：当我们需要对通用的响应对象统一处理，设置请求拦截器和响应拦截器，这里主要是在响应后判断是否未登录，如果未登录则判断当前请求不是获取用户登录态或者说用户不在登录界面，提示用户去登录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> &#123; message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ant-design-vue&#x27;</span><br><br><span class="hljs-comment">// 创建 Axios 实例</span><br><span class="hljs-keyword">const</span> myAxios = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://localhost:8082&#x27;</span>,<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">60000</span>,<br>  <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span>,<br>&#125;)<br><br><span class="hljs-comment">// 全局请求拦截器</span><br>myAxios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-comment">// Do something before request is sent</span><br>    <span class="hljs-keyword">return</span> config<br>  &#125;,<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-comment">// Do something with request error</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>  &#125;,<br>)<br><br><span class="hljs-comment">// 全局响应拦截器</span><br>myAxios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; data &#125; = response<br>    <span class="hljs-comment">// 未登录</span><br>    <span class="hljs-keyword">if</span> (data.<span class="hljs-property">code</span> === <span class="hljs-number">40100</span>) &#123;<br>      <span class="hljs-comment">// 不是获取用户信息的请求，并且用户目前不是已经在用户登录页面，则跳转到登录页面</span><br>      <span class="hljs-keyword">if</span> (<br>        !response.<span class="hljs-property">request</span>.<span class="hljs-property">responseURL</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;user/get/login&#x27;</span>) &amp;&amp;<br>        !<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">pathname</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;/user/login&#x27;</span>)<br>      ) &#123;<br>        message.<span class="hljs-title function_">warning</span>(<span class="hljs-string">&#x27;请先登录&#x27;</span>)<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">`/user/login?redirect=<span class="hljs-subst">$&#123;<span class="hljs-variable language_">window</span>.location.href&#125;</span>`</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> response<br>  &#125;,<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-comment">// Any status codes that falls outside the range of 2xx cause this function to trigger</span><br>    <span class="hljs-comment">// Do something with response error</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>  &#125;,<br>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> myAxios<br><br></code></pre></td></tr></table></figure><h4 id="openapi自动生成请求代码">openapi自动生成请求代码</h4><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i --save-dev @umijs/openapi<br></code></pre></td></tr></table></figure><p>根目录创建openapi.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; generateService &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@umijs/openapi&#x27;</span><br><br><span class="hljs-title function_">generateService</span>(&#123;<br>  <span class="hljs-attr">requestLibPath</span>: <span class="hljs-string">&quot;import request from &#x27;@/request&#x27;&quot;</span>,<br>  <span class="hljs-attr">schemaPath</span>: <span class="hljs-string">&#x27;http://localhost:8082/api/v2/api-docs&#x27;</span>,<br>  <span class="hljs-attr">serversPath</span>: <span class="hljs-string">&#x27;./src&#x27;</span>,<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>package.json中添加<code>"openapi": "node openapi.config.js"</code></p><p>运行<code>npm run openapi</code>创建了api文件，同时创建了后端请求代码</p><figure><img src="/img/pictureLibrary/image-20250710184506890.png"alt="image-20250710184506890" /><figcaption aria-hidden="true">image-20250710184506890</figcaption></figure><p>测试请求</p><figure><img src="/img/pictureLibrary/image-20250710185814726.png"alt="image-20250710185814726" /><figcaption aria-hidden="true">image-20250710185814726</figcaption></figure><p>如果出现跨域CORS问题，没有配置CorsConfig的情况</p><p>后端Controller方法上添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CrossOrigin(origins = &#123;&quot;https://localhost:8081&quot;&#125;,allowCredentials = &quot;true&quot;)</span><br></code></pre></td></tr></table></figure><p>如果前端使用vite，可以在vite.config.ts中增加代理配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">server</span>: &#123;<br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;/api&#x27;</span>: <span class="hljs-string">&#x27;http://localhost:8082&#x27;</span>,<br>    &#125;<br>  &#125;,<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>同时修改request.ts，删除前缀</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建 Axios 实例</span><br><span class="hljs-keyword">const</span> myAxios = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">60000</span>,<br>  <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span>,<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>前端这样配置相当于代理帮你发送到后端<code>http://localhost:8082</code></p><h3 id="全局状态管理">全局状态管理</h3><p><strong>什么是全局状态管理？</strong></p><blockquote><p>所有页面都共享的变量，适合作为全局状态管理的对象：用户的登录态</p></blockquote><p>全局状态管理库主要包括Vuex、Pinia，由于VuexStore状态管理需要引入<code>state</code>,<code>mutations</code>,<code>actions</code>,<code>getters</code>这些概念</p><p>这里使用Pinia，很适合上手</p><p>create-vue的时候已经选择了使用Pinia状态管理，这里无需引入</p><p><strong>定义用户状态</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useLoginUserStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&quot;loginUser&quot;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-comment">//state</span><br>  <span class="hljs-keyword">const</span> loginUser = ref&lt;any&gt;(&#123;<br>    <span class="hljs-attr">userName</span>: <span class="hljs-string">&quot;未登录&quot;</span><br>  &#125;)<br><br>  <span class="hljs-comment">//调用后端getLoginUser接口获取当前用户信息</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchLoginUser</span>(<span class="hljs-params"></span>) &#123;<br><br>  &#125;<br><br><br><span class="hljs-comment">//修改用户状态</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">setLoginUser</span>(<span class="hljs-params">newLoginUser: any</span>) &#123;<br>    loginUser.<span class="hljs-property">value</span> = newLoginUser<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> &#123;loginUser,fetchLoginUser,setLoginUser&#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p><strong>全局使用用户状态</strong></p><p>首次加入页面，需要获取用户信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> loginUserStore = <span class="hljs-title function_">useLoginUserStore</span>()<br>loginUserStore.<span class="hljs-title function_">fetchLoginUser</span>()<br></code></pre></td></tr></table></figure><p>想要获取内部数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">loginUserStore.<span class="hljs-property">loginUser</span>.<span class="hljs-property">userName</span><br></code></pre></td></tr></table></figure><p>修改顶部菜单栏，如果用户有ID展示其昵称，没有昵称展示无名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div class=&quot;user-login-state&quot;&gt;<br>  &lt;div v-if=&quot;loginUserStore.loginUser.id&quot;&gt;<br>    &#123;&#123;loginUserStore.loginUser.userName ?? &#x27;无名&#x27;&#125;&#125;<br>  &lt;/div&gt;<br>  &lt;div v-else&gt;<br>    &lt;a-button type=&quot;primary&quot; href=&quot;/user/login&quot;&gt;登录&lt;/a-button&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>为了方便看到效果，我们设置延迟修改<code>loginUser</code>的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchLoginUser</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    loginUser.<span class="hljs-property">value</span> = &#123;<span class="hljs-attr">userName</span>: <span class="hljs-string">&quot;测试用户&quot;</span>,<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>&#125;<br>  &#125;,<span class="hljs-number">3000</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>页面开发目录结构</p><p>我们主要分为管理员和用户，管理员可以管理用户</p><p>所以我们需要创建用户注册页面、用户登录页面、用户管理页面</p><figure><img src="/img/pictureLibrary/image-20250710204256240.png"alt="image-20250710204256240" /><figcaption aria-hidden="true">image-20250710204256240</figcaption></figure><p>/user/login ===&gt; UserLoginPage</p><p>/user/register ====&gt; UserRegisterPage</p><p>至此第一部分项目初始化结束！！！！</p><h2 id="用户模块">用户模块</h2><h3 id="用户模块需求分析">用户模块需求分析</h3><ul><li>用户登录</li><li>用户注册</li><li>用户注销</li><li>用户权限控制</li><li>用户管理界面(管理员)</li></ul><h3 id="用户表设计">用户表设计</h3><p>用户表名：user</p><p>用户字段：ID、userAccount、userPassword、userName、userRole、userAvatar、userProfile、editTime、createTime、updateTime、isDelete</p><p>为经常查询的键设置索引：userAccount(账号唯一)、userName</p><p>editTime和updateTime区别：editTime指的是用户编辑个人信息时更改，updateTime指的是任意字段变动更改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 用户表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> <span class="hljs-keyword">user</span><br>(<br>    id           <span class="hljs-type">bigint</span> auto_increment comment <span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-keyword">primary</span> key,<br>    userAccount  <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                           <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;账号&#x27;</span>,<br>    userPassword <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>)                           <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;密码&#x27;</span>,<br>    userName     <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                           <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户昵称&#x27;</span>,<br>    userAvatar   <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>)                          <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户头像&#x27;</span>,<br>    userProfile  <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>)                           <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户简介&#x27;</span>,<br>    userRole     <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;user&#x27;</span>            <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户角色：user/admin&#x27;</span>,<br>    editTime     datetime     <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;编辑时间&#x27;</span>,<br>    createTime   datetime     <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    updateTime   datetime     <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>    isDelete     tinyint      <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;是否删除&#x27;</span>,<br>    <span class="hljs-keyword">UNIQUE</span> KEY uk_userAccount (userAccount),<br>    INDEX idx_userName (userName)<br>) comment <span class="hljs-string">&#x27;用户&#x27;</span> <span class="hljs-keyword">collate</span> <span class="hljs-operator">=</span> utf8mb4_unicode_ci;<br><br></code></pre></td></tr></table></figure><h3 id="用户登录流程一定要搞明白">用户登录流程(一定要搞明白)</h3><p>1）初始对话：前端与服务器创建连接后，服务器给客户端一个Session，同时保存。SessionID会作为唯一标识，返回给前端。</p><p>2）登录成功，后端服务器校验信息成功后，会将用户信息存入Session中。服务器生成一个Set-Cookie响应头指向前端SessionID</p><p>3）前端保存Cookie：前端收到后端响应后，根据浏览器Set-Session指令，将SessionID存储到浏览器Cookie同时绑定域名</p><p>4）再次向绑定域名发送请求，浏览器后续会携带之前保存的Cookie，其中包含SessionID</p><p>5）服务器收到请求，提取SessionID，获取Session</p><p>6）通过Session，获取用户信息</p><h3 id="权限控制">权限控制</h3><ul><li>无权限也可以看</li><li>登录用户才可以看</li><li>未登录可以看，登录解锁更多</li><li>只有管理员可以看</li></ul><h3 id="后端开发">后端开发</h3><p>刚刚已经创建了user表，这里使用mybatis-plusX插件，右键user表，选择mybatis-plus插件，来为我们生成mapper和service</p><figure><img src="/img/pictureLibrary/image-20250710214119233.png"alt="image-20250710214119233" /><figcaption aria-hidden="true">image-20250710214119233</figcaption></figure><p>将User拖动到model/entity下，UserMapper拖到mapper，Service移动到service包下，如果有mapper中应用到了generator的包名记得更改</p>]]></content>
    
    
    <categories>
      
      <category>项目实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM Like HotSpot?</title>
    <link href="/2025/01/02/JVM-Like-HotSpot/"/>
    <url>/2025/01/02/JVM-Like-HotSpot/</url>
    
    <content type="html"><![CDATA[<h1 id="q1jvm-在哪里">Q1：JVM 在哪里？</h1><p>JVM(Java VirtualMachine)是位于操作系统之上的一个环境，在这个环境中，我们同时运行了一堆Java程序。</p><p>JRE包含JVM、操作系统也是安装于硬件之上。</p><p><img src="/img/JVMIMG/1.png" /></p><h1 id="q2jvm体系结构">Q2：JVM体系结构</h1><p><img src="/img/JVMIMG/2.png" /></p><p><img src="/img/JVMIMG/3.png" /></p><h1 id="什么是类加载器的双亲委派机制">什么是类加载器的双亲委派机制</h1><h3 id="类加载流程图">类加载流程图</h3><p><img src="/img/JVMIMG/4.png" /></p><h3 id="模版对象介绍">模版对象介绍</h3><p><img src="/img/JVMIMG/5.png" /></p><h3 id="双亲委派机制">双亲委派机制</h3><p>通过打印我们会发信啊当前使用的是AppClassLoader、父亲为ExtClassLoader、爷爷是NULL(java调用不到、由C实现)</p><p><img src="/img/JVMIMG/6.png" /></p><p>其实不然，为什么以下程序报错，正在我们使用类的时候，他会从AppLoader逐渐过渡到rt.jar发现rt.jar包下的java.lang底下也是有一个叫String的类，优先执行ROOT下的String，而不会执行当前AppLoader中的</p><p><img src="/img/JVMIMG/7.png" /></p><p>所以说双亲委派的流程大致为类加载器收到类加载请求，之后将请求委托给ROOT，如果当前类加载器可以加载这个类，直接结束，否则的话，逐步传递给子类，判断是否可以类加载，最后实在没有就报错</p><h1 id="沙箱安全机制">沙箱安全机制</h1><p><a href="https://www.51cto.com/article/709366.html">详见</a></p><h1 id="native关键字">native关键字</h1><p>凡是带有native关键字的，都会回到本地方法栈，调用本地方法接口(JNI)</p><p>JNI作用：扩展Java的使用，融合不同的语言为Java使用</p><h1 id="pc寄存器">PC寄存器</h1><p>也被称为程序计数器，本质上是一个指针为线程私有</p><h1 id="方法区">方法区</h1><p><img src="/img/JVMIMG/8.png" /></p><p>存储static、final、class、常量池</p><h1 id="栈的实行机制">栈的实行机制</h1><p>栈遵循先进后出的道理</p><p>所以说Main函数在栈中最后弹出，不存在垃圾回收机制</p><p>线程的生命周期和栈是同步的，线程结束，栈被释放</p><p>栈运行原理为栈帧</p><h1 id="jvm有哪些">JVM有哪些？</h1><ul><li>HotSpot</li><li>BEA JRockit</li><li>IBM J9 VM</li></ul><h1 id="堆">堆</h1><p><img src="/img/JVMIMG/9.png" /></p><p>堆区内存满了叫做OOM、堆内存不够</p><p>在JDK8以后永久区叫做元空间</p><h3 id="永久区">永久区</h3><p>存储java运行时的环境以及jdk自带的Class对象、不存在垃圾回收机制</p><ul><li>jdk1.6之前：永久化，常量池存储在永久区中</li><li>jdk1.7：去除永久代，常量池存放到堆中</li><li>jdk1.8：常量池存放到元空间中</li></ul><h3id="如果出现了oom的情况如何解决">如果出现了OOM的情况，如何解决？</h3><p>默认情况下打印内存分配情况</p><p><img src="/img/JVMIMG/10.png" /></p><p><img src="/img/JVMIMG/11.png" /></p><p>根据打印信息我们会发现新生区 + 老年区大小 = 堆区内存大小</p><p><img src="/img/JVMIMG/12.png" /></p><p>因为元空间也属于堆的范畴，但是并没有为其分配空间，所以说元空间物理上并不存在</p><p>GC垃圾回收的机制</p><p>每次向堆中存放数据都会进行轻GC，当新生区满了进行一次重GC，数据存放到老年区，如果最终老年区中的数据也满了报错显示</p><p>使用工具排除问题</p><ul><li>Debug调试代码</li><li>使用内存快照工具，MAT，Jprofiler</li></ul><p>Jprofiler作用</p><ul><li>分析Dump文件，定位内存泄漏</li><li>获取堆中的对象</li></ul><h1 id="gc">GC</h1><h3 id="引用计数法">引用计数法</h3><p>对象每使用一次，将其计数加一，最后将不怎么使用的对象筛选掉</p><p><img src="/img/JVMIMG/13.png" /></p><h3 id="复制算法">复制算法</h3><p><img src="/img/JVMIMG/14.png" /></p><p>每一次GC都会将伊甸园区的数据存放到幸存区，Eden变为空</p><p>幸存From和幸存To如何分辨：谁空谁是To，假设经过GC、Eden中的数据存放到幸存区中，则另一个幸存区由于是空被标识为To，对象流向To，From又为空，接着将From变为To，接着进行GC操作，当操作来到15次对象还没有挂掉就会进入老年区</p><p>15次是默认老年区的GC次数，我们还可以手动设置<code>-XX:MaxTenuringThreshold=15</code></p><p>好处：没有内存碎片</p><p>坏处：浪费内存空间，两个幸存区，一块永远是空的</p><p>复制算法最佳使用场景：对象存活度较低的情况 对应新生区</p><h3 id="标记清除算法">标记清除算法</h3><p>标记活着的对象、清除没有标记的对象</p><p>优点：不需要额外的空间</p><p>缺点：两次扫描、严重浪费时间，会产生内存碎片</p><h3 id="标记压缩算法">标记压缩算法</h3><p><img src="/img/JVMIMG/15.png" /></p><p>再次扫描，将存活的对象向前移动</p><h1 id="jmm是什么">JMM是什么？</h1><p>JVM(Java Memory Model)</p><p>作用：缓存一致性原则，用于定义数据读写规则</p><p>JMM定义了主内存和线程工作内存之间的关系，同时保证了主内存和线程工作内存之间的通信</p><p><img src="/img/JVMIMG/16.png" /></p><p>volilate主要用来解决线程中的数据和主存同步</p>]]></content>
    
    
    <categories>
      
      <category>JavaVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fluid+GithubPage</title>
    <link href="/2024/10/19/Fluid+GithubPage/"/>
    <url>/2024/10/19/Fluid+GithubPage/</url>
    
    <content type="html"><![CDATA[<h2 id="hexo-fluid-theme-githubpage-搭建个人博客">Hexo + Fluid Theme +GithubPage 搭建个人博客</h2><p>前言</p><ul><li>GithubPage是静态站点托管服务，它可以读取到你上传至仓库中的html、css、javascript代码，运行并且在对应位置进行显示</li><li>Hexo是一个快速、简洁且高效的博客框架。 Hexo使用Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页，Hexo提供服务Fluid提供前端页面</li></ul><h3 id="前置条件">1. 前置条件</h3><h4 id="git的安装与配置">1.1 Git的安装与配置</h4><h5 id="安装">安装</h5><p>两种方式</p><ul><li><p>brew安装 <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>git<br></code></pre></td></tr></table></figure></p></li><li><p><a href="https://git-scm.com/">官方直达</a></p></li></ul><p>git -v查看版本</p><h6 id="配置">配置</h6><p><ahref="https://www.cnblogs.com/techflow/p/13703721.html">参考链接</a></p><p><strong>name对应Github用户名、email对应Github绑定的邮箱</strong><strong>其中[user]一定要配置好，其余的可以没有</strong> <imgsrc="/img/T1/gf.png" /></p><p><span style="color: red; font-size: 1.2em;">后期常常出现的问题:github,Empty reply from server？</span></p><p><strong>解决方案</strong></p><p>本地生成公钥，查看公钥内容 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;Github绑定邮箱&quot;</span><br><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure></p><p>将cat到的内容放入到New SSH Key中 <img src="/img/T1/ssh.png" /></p><h4 id="nodejs安装">1.2 Nodejs安装</h4><p><ahref="https://nodejs.org/en">官方直达</a>或者说可以使用brew安装</p><p>node -v查看版本</p><h4 id="github-创建仓库">1.3 Github 创建仓库</h4><p>创建一个名为用户名.github.io的仓库</p><p><em>初体验(所有的操作都在master中进行，记得修改main -&gt;master)</em></p><ol type="1"><li>我们可以创建一个html页面index.html</li><li>点击Setting，选择GithubPage</li><li>点击Visit Website，如果404，可以查看Actions，生效后访问</li></ol><h3 id="hexo简单使用与结构分析">2. Hexo简单使用与结构分析</h3><h4 id="hexo初体验">2.1 hexo初体验</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><ol type="1"><li>hexo初始化项目</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hexo</span> init<span class="hljs-meta"> [可选]</span><br></code></pre></td></tr></table></figure><p>hexo init 直接在当前文件夹下创建项目内容、hexo init my-blog创建一个my-blog文件夹，同时在里面创建项目内容</p><p>项目结构</p><blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus">├── _config<span class="hljs-selector-class">.fluid</span><span class="hljs-selector-class">.yml</span><br>├── _config<span class="hljs-selector-class">.landscape</span><span class="hljs-selector-class">.yml</span><br>├── _config<span class="hljs-selector-class">.yml</span><br>├── db<span class="hljs-selector-class">.json</span><br>├── node_modules<br>├── package-lock<span class="hljs-selector-class">.json</span><br>├── package<span class="hljs-selector-class">.json</span><br>├── public<br>├── scaffolds<br>├── <span class="hljs-selector-tag">source</span><br>├── themes<br>└── yarn.lock<br></code></pre></td></tr></table></figure></blockquote><p>启动项目 <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure></p><p>接着去浏览器里访问localhost:4000，会看到初始化好的界面</p><p>配置完整后hexo的操作为 <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss">hexo clean<br><br>hexo <span class="hljs-selector-tag">g</span><br><br>hexo s<span class="hljs-selector-attr">[预览、可选]</span><br><br>hexo <span class="hljs-built_in">d</span>(下面介绍)<br></code></pre></td></tr></table></figure></p><h4 id="hexo-theme引入">2.2 Hexo-Theme引入</h4><p><a href="https://hexo.io/themes/">Themes</a></p><p>本篇文章只介绍Fluid主题的相关配置</p><h5 id="在博客目录下创建_config.fluid.yml">2.2.1在博客目录下创建_config.fluid.yml</h5><p>默认情况下_config.yml是博客的配置入口，fluid主题将_config.fluid.yml优先级设置的比较高，可能是考虑到不小心把_config.yml改乱了，所以接下来我们只需要设置_config.fluid.yml就可以了</p><ul><li>_config.fluid.yml配置</li></ul><p>基本配置 <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">title:</span> 标签页内容<br><span class="hljs-symbol">theme:</span> fluid<br><span class="hljs-symbol">author:</span> 设置成自己名(可选)<br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN<br></code></pre></td></tr></table></figure></p><p>添加deploy便于后期上传 <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">    type:</span> git<br><span class="hljs-symbol">    repo:</span> git@github.com:KoRinALL/KoRinALL.github.io.git (这里我建议使用ssh)<br><span class="hljs-symbol">    branch:</span> master<br></code></pre></td></tr></table></figure></p><p>部署好后，我们可以使用<code>hexo d</code>进行上传文件到仓库中</p><ul><li>博客目录下主要文件介绍</li></ul><p>public: 主要前端文件 html、css、javascript source: - _posts管理md文章的文件 - about 需要自己创建，对应about界面 - img需要自己创建，图片路径优先级比themes下_config.yml 优先级高</p><p>node_modules - hexo-themes-fluid - <em>config.yml 主题配置文件 </em>img和刚才创建的img对应</p><h3 id="插件引入">3. 插件引入</h3><p>-&gt; hexo-themes-fluid/_config.yml</p><blockquote><p>图片更换，文本的更改以及一些很基础的操作这里就不介绍了，我相信各位大佬能自行解决同时学到些新知识～</p></blockquote><p>评论插件包括utterances | disqus | gitalk | valine | waline | changyan| livere | remark42 | twikoo | cusdis | giscus |discuss，我使用的主要是gitalk</p><h4 id="gitalk-comment-不推荐请看3.4-配置waline评论">3.1 Gitalk Comment(不推荐，请看3.4 配置Waline评论)</h4><p><img src="/img/T1/GK.png" /></p><ol type="1"><li><p>来到Github/Setting/Developer Setting/OAuth Apps/New OAuthApps</p></li><li><p>Homepage URL 和Authorization callback URL填写自己仓库地址(一定要是https协议) ex:https://korinall.github.io/，里面会提供Client ID和Client secrets</p></li></ol><p>3.其他设置 <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">repo:</span>仓库名<br>owner、admin: 用户名<br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN<br>其余默认<br></code></pre></td></tr></table></figure></p><p>Tip： 效果只有在部署后，初始化给予权限后才可以使用</p><h4 id="latex">3.2 Latex</h4><ol type="1"><li>更改主题配置</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">math:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">engine:</span> <span class="hljs-string">mathjax</span><br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>更换渲染器渲染器只允许同时存在一个，所以我们需要删除默认的，下载支持Latex的<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm uninstall hexo-renderer-marked <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure></li></ol><p>mathjax: <code>npm install hexo-renderer-kramed --save</code></p><p>katex:<code>npm install @upupming/hexo-renderer-markdown-it-plus --save</code></p><p>下载好后，我们只需要在对应的md文章FrontMatter部分添加<code>math: true</code></p><p>Front Matter指的是如下部分 <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">ssssss</span><br><span class="hljs-attr">math:</span> <span class="hljs-literal">true</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure></p><h4 id="添加看板娘">3.3 添加看板娘</h4><ol type="1"><li><p>git clone<ahref="https://github.com/stevenjoezhang/live2d-widget">live2d-widget</a>到主题的<font color="red">source</font>目录下</p></li><li><p>在主题的<font color="red">layout</font>目录下找到<strong>head.js</strong>添加如下代码<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/live2d-widget/autoload.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></p></li><li><p>修改autoload.js文件 <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">// const live2d_path <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://fastly.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/&quot;</span><span class="hljs-comment">;</span><br>const live2d_path <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/live2d-widget/&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></p></li><li><p>更改autoload.js下的CDN地址 默认CND地址不可以进行换装，这里使用<ahref="https://akilar.top/posts/5b8f515f/">Akilarの糖果屋</a>的CDN，模型多放心使用<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">cdnPath:</span> <span class="hljs-string">&quot;https://npm.elemecdn.com/akilar-live2dapi@latest/&quot;</span><br></code></pre></td></tr></table></figure></p></li><li><p>为了防止看板娘被挡住，我们可以将其图层设置为999，具体操作更改<font color="blue">live2d-widget</font>下的<font color="blue">waifu.css</font><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta">#waifu &#123;</span><br>    z-<span class="hljs-keyword">index</span>: <span class="hljs-number">999</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p></li><li><p>调整看板娘位于右下角，修改配置如下</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#waifu</span> &#123;<br><span class="hljs-attribute">bottom</span>: -<span class="hljs-number">1000px</span>;<br><span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br><span class="hljs-attribute">line-height</span>: <span class="hljs-number">0</span>;<br><span class="hljs-attribute">margin-bottom</span>: -<span class="hljs-number">10px</span>;<br><span class="hljs-attribute">position</span>: fixed;<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">3px</span>);<br><span class="hljs-attribute">transition</span>: transform .<span class="hljs-number">3s</span> ease-in-out, bottom <span class="hljs-number">3s</span> ease-in-out;<br><span class="hljs-attribute">z-index</span>: <span class="hljs-number">999</span>;<br>&#125;<br><br><br><span class="hljs-selector-id">#waifu-tool</span> &#123;<br><span class="hljs-attribute">color</span>: <span class="hljs-number">#aaa</span>;<br><span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br><span class="hljs-attribute">position</span>: absolute;<br><span class="hljs-attribute">left</span>: <span class="hljs-number">0px</span>;<br><span class="hljs-attribute">top</span>: <span class="hljs-number">70px</span>;<br><span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">1s</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="waline-comment">3.4 Waline Comment</h4><blockquote><p>Gitalk博客每一次都需要管理员初始化感觉挺CS，这里推荐换成Waline</p></blockquote><p>需要用到的网站</p><p>LeanCloud(推荐使用国际版本)：<ahref="https://console.leancloud.app/apps">https://console.leancloud.app/apps</a></p><p><font>如果使用国内版本，需要在LeanCloud上绑定已经备案等域名，Vercel中也需要多添加一步环境变量，具体参考<ahref="https://www.zywvvd.com/notes/hexo/theme/fluid/fluid-waline/fluid-waline/">Here!</a></font></p><p>Vercel：<a href="https://vercel.com/">https://vercel.com/</a></p><p><font size=5>LeanCloud</font></p><ol type="1"><li>创建应用实例</li></ol><figure><img src="/img/T1/ca.png" alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><ol start="2" type="1"><li><p>来到Setting中完成邮箱验证</p></li><li><p>选择Setting-&gt;App Keys</p></li></ol><p>待会要用AppID、AppKey、MasterKey</p><p><font size=5>Vercel</font></p><ol type="1"><li><p>注册账号(推荐使用github登录)</p></li><li><p><ahref="https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fwalinejs%2Fwaline%2Ftree%2Fmain%2Fexample&amp;teamSlug=korinalls-projects">点这里</a></p></li><li><p>解锁、添加仓库名</p></li></ol><figure><img src="/img/T1/newpro.png" alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><ol start="4" type="1"><li>点击Continue to Dashboard -&gt; Environment Variables</li></ol><p>配置三个环境变量LEAN_ID, LEAN_KEY 和 LEAN_MASTER_KEY 。</p><p>它们的值分别对应之前在 LeanCloud 中获得的 APP ID, APP KEY, MasterKey，然后Save。</p><ol start="5" type="1"><li><p>点击顶部栏点Deployments中的Redeploy <imgsrc="/img/T1/redeploy.png" alt="alt text" /></p></li><li><p>回到顶部栏Project -&gt; Visit -&gt; Login</p></li></ol><figure><img src="/img/T1/register.png" alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><ol start="7" type="1"><li>这个页面中第一个注册的人默认就是管理员，后期可以使用管理员进行发送消息</li></ol><p><font size=5>主题配置文件(_config.yml)</font></p><p>在原有的基础上只需要将Visit访问的网址填入就可以使用了</p><figure><img src="/img/T1/vs.png" alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>至此，博客已经搭建完毕，其余的内容自行探索，学习永无止境^_^ echoBye！</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac技巧-1-应用位置查询</title>
    <link href="/2024/10/19/Mac%E6%8A%80%E5%B7%A7-1-%E5%BA%94%E7%94%A8%E4%BD%8D%E7%BD%AE%E6%9F%A5%E8%AF%A2/"/>
    <url>/2024/10/19/Mac%E6%8A%80%E5%B7%A7-1-%E5%BA%94%E7%94%A8%E4%BD%8D%E7%BD%AE%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>最后更新于：2024/10/24 PM</p>          </div><p>最近想要删除一个软件，这个软件在控制台中是存在的，通过Command +Space是可以打开的</p><p>但是忘记当时放在访达中什么位置，迫不得已上网查找，可能自己问题描述的有点抽象，没找到。。</p><p>最后去搜索了Spotlight Search的用法，其中介绍了一种查找路径的方法</p><p><font>长按command接着放置到查找的文件上</font>如图所示</p><figure><img src="/img/mac_tip/1.png" alt="alt text" /><figcaption aria-hidden="true">alt text</figcaption></figure><p>成功 ！！！ <img src="/img/mac_tip/2.png" alt="alt text" /></p>]]></content>
    
    
    <categories>
      
      <category>Mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MAC技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
